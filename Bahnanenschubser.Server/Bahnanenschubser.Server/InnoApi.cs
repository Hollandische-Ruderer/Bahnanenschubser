//----------------------
// <auto-generated>
//     Generated using the NSwag toolchain v13.8.2.0 (NJsonSchema v10.2.1.0 (Newtonsoft.Json v12.0.0.2)) (http://NSwag.org)
// </auto-generated>
//----------------------

#pragma warning disable 108 // Disable "CS0108 '{derivedDto}.ToJson()' hides inherited member '{dtoBase}.ToJson()'. Use the new keyword if hiding was intended."
#pragma warning disable 114 // Disable "CS0114 '{derivedDto}.RaisePropertyChanged(String)' hides inherited member 'dtoBase.RaisePropertyChanged(String)'. To make the current member override that implementation, add the override keyword. Otherwise add the new keyword."
#pragma warning disable 472 // Disable "CS0472 The result of the expression is always 'false' since a value of type 'Int32' is never equal to 'null' of type 'Int32?'
#pragma warning disable 1573 // Disable "CS1573 Parameter '...' has no matching param tag in the XML comment for ...
#pragma warning disable 1591 // Disable "CS1591 Missing XML comment for publicly visible type or member ..."

namespace Bahnanenschubser.Server
{
    using System = global::System;
    
    [System.CodeDom.Compiler.GeneratedCode("NSwag", "13.8.2.0 (NJsonSchema v10.2.1.0 (Newtonsoft.Json v12.0.0.2))")]
    public partial interface IInnoApiClient
    {
        /// <param name="clientID">Unique identifier of client.</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<EventFetchResponse> FetchAsync(string clientID);
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <param name="clientID">Unique identifier of client.</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<EventFetchResponse> FetchAsync(string clientID, System.Threading.CancellationToken cancellationToken);
    
        /// <param name="clientID">Unique identifier of client.</param>
        /// <param name="journeyID">ID of journey.</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<EventJourneySubscribeResponse> JourneySubscribeAsync(string clientID, string journeyID);
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <param name="clientID">Unique identifier of client.</param>
        /// <param name="journeyID">ID of journey.</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<EventJourneySubscribeResponse> JourneySubscribeAsync(string clientID, string journeyID, System.Threading.CancellationToken cancellationToken);
    
        /// <param name="clientID">Unique identifier of client.</param>
        /// <param name="journeyID">ID of journey.</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<EventJourneyUnsubscribeResponse> JourneyUnsubscribeAsync(string clientID, string journeyID);
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <param name="clientID">Unique identifier of client.</param>
        /// <param name="journeyID">ID of journey.</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<EventJourneyUnsubscribeResponse> JourneyUnsubscribeAsync(string clientID, string journeyID, System.Threading.CancellationToken cancellationToken);
    
        /// <param name="clientID">Unique identifier of client.</param>
        /// <param name="journeyID">ID of journey.</param>
        /// <param name="trainID">ID of train within journey.</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<EventTrainPositionSubscribeResponse> TrainPositionSubscribeAsync(string clientID, string journeyID, string trainID);
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <param name="clientID">Unique identifier of client.</param>
        /// <param name="journeyID">ID of journey.</param>
        /// <param name="trainID">ID of train within journey.</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<EventTrainPositionSubscribeResponse> TrainPositionSubscribeAsync(string clientID, string journeyID, string trainID, System.Threading.CancellationToken cancellationToken);
    
        /// <param name="clientID">Unique identifier of client.</param>
        /// <param name="journeyID">ID of journey.</param>
        /// <param name="trainID">ID of train within journey.</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<EventTrainPositionUnsubscribeResponse> TrainPositionUnsubscribeAsync(string clientID, string journeyID, string trainID);
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <param name="clientID">Unique identifier of client.</param>
        /// <param name="journeyID">ID of journey.</param>
        /// <param name="trainID">ID of train within journey.</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<EventTrainPositionUnsubscribeResponse> TrainPositionUnsubscribeAsync(string clientID, string journeyID, string trainID, System.Threading.CancellationToken cancellationToken);
    
        /// <param name="evaNumbers">list of eva numbers of stations [Bahnhoefe] to get board for</param>
        /// <param name="timeStart">start time for board as full qualified datetime, if omitted current time will be used</param>
        /// <param name="timeEnd">end time for board as full qualified datetime, if omitted current time plus 30 minutes will be used</param>
        /// <param name="includeStationGroup">should all stations of group the passed eva numbers belong to (for instance a request to 'FFM Hoch' would also return 'FFM tief') be included</param>
        /// <param name="filterTransports">filter for transport types that should be returned, if ommitted all types of transport are returned</param>
        /// <param name="maxViaStops">limits amount of via stops per transport (limitation doesn't apply to additional and canceled stops), if ommitted all via stops are returned, if zero no via stops are returned</param>
        /// <param name="maxTransportsPerType">limits amount of results per transport type, if ommitted no truncation is applied</param>
        /// <param name="sortBy">define sorting order, if omitted sorting is by TIME
        /// - TIME (Sorting based on best known time information ie real before preview before schedule)
        /// - TIME_SCHEDULE (Sorting based on schedule time)</param>
        /// <param name="innoSollfahrplan">inno: controls whether to include scheduled timetable [Sollfahrplan] or not</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<BoardPublicArrival> BoardArrivalAsync(System.Collections.Generic.IEnumerable<string> evaNumbers, System.DateTimeOffset? timeStart, System.DateTimeOffset? timeEnd, bool? includeStationGroup, System.Collections.Generic.IEnumerable<TransportType> filterTransports, int? maxViaStops, int? maxTransportsPerType, SortKeyTime? sortBy, bool? innoSollfahrplan);
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <param name="evaNumbers">list of eva numbers of stations [Bahnhoefe] to get board for</param>
        /// <param name="timeStart">start time for board as full qualified datetime, if omitted current time will be used</param>
        /// <param name="timeEnd">end time for board as full qualified datetime, if omitted current time plus 30 minutes will be used</param>
        /// <param name="includeStationGroup">should all stations of group the passed eva numbers belong to (for instance a request to 'FFM Hoch' would also return 'FFM tief') be included</param>
        /// <param name="filterTransports">filter for transport types that should be returned, if ommitted all types of transport are returned</param>
        /// <param name="maxViaStops">limits amount of via stops per transport (limitation doesn't apply to additional and canceled stops), if ommitted all via stops are returned, if zero no via stops are returned</param>
        /// <param name="maxTransportsPerType">limits amount of results per transport type, if ommitted no truncation is applied</param>
        /// <param name="sortBy">define sorting order, if omitted sorting is by TIME
        /// - TIME (Sorting based on best known time information ie real before preview before schedule)
        /// - TIME_SCHEDULE (Sorting based on schedule time)</param>
        /// <param name="innoSollfahrplan">inno: controls whether to include scheduled timetable [Sollfahrplan] or not</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<BoardPublicArrival> BoardArrivalAsync(System.Collections.Generic.IEnumerable<string> evaNumbers, System.DateTimeOffset? timeStart, System.DateTimeOffset? timeEnd, bool? includeStationGroup, System.Collections.Generic.IEnumerable<TransportType> filterTransports, int? maxViaStops, int? maxTransportsPerType, SortKeyTime? sortBy, bool? innoSollfahrplan, System.Threading.CancellationToken cancellationToken);
    
        /// <param name="evaNumbers">list of eva numbers of stations [Bahnhoefe] to get board for</param>
        /// <param name="timeStart">start time for board as full qualified datetime, if omitted current time will be used</param>
        /// <param name="timeEnd">end time for board as full qualified datetime, if omitted current time plus 30 minutes will be used</param>
        /// <param name="includeStationGroup">should all stations of group the passed eva numbers belong to (for instance a request to 'FFM Hoch' would also return 'FFM tief') be included</param>
        /// <param name="filterTransports">filter for transport types that should be returned, if ommitted all types of transport are returned</param>
        /// <param name="maxViaStops">limits amount of via stops per transport (limitation doesn't apply to additional and canceled stops), if ommitted all via stops are returned, if zero no via stops are returned</param>
        /// <param name="maxTransportsPerType">limits amount of results per transport type, if ommitted no truncation is applied</param>
        /// <param name="sortBy">define sorting order, if omitted sorting is by TIME
        /// - TIME (Sorting based on best known time information ie real before preview before schedule)
        /// - TIME_SCHEDULE (Sorting based on schedule time)</param>
        /// <param name="innoSollfahrplan">inno: controls whether to include scheduled timetable [Sollfahrplan] or not</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<BoardPublicDeparture> BoardDepartureAsync(System.Collections.Generic.IEnumerable<string> evaNumbers, System.DateTimeOffset? timeStart, System.DateTimeOffset? timeEnd, bool? includeStationGroup, System.Collections.Generic.IEnumerable<TransportType> filterTransports, int? maxViaStops, int? maxTransportsPerType, SortKeyTime? sortBy, bool? innoSollfahrplan);
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <param name="evaNumbers">list of eva numbers of stations [Bahnhoefe] to get board for</param>
        /// <param name="timeStart">start time for board as full qualified datetime, if omitted current time will be used</param>
        /// <param name="timeEnd">end time for board as full qualified datetime, if omitted current time plus 30 minutes will be used</param>
        /// <param name="includeStationGroup">should all stations of group the passed eva numbers belong to (for instance a request to 'FFM Hoch' would also return 'FFM tief') be included</param>
        /// <param name="filterTransports">filter for transport types that should be returned, if ommitted all types of transport are returned</param>
        /// <param name="maxViaStops">limits amount of via stops per transport (limitation doesn't apply to additional and canceled stops), if ommitted all via stops are returned, if zero no via stops are returned</param>
        /// <param name="maxTransportsPerType">limits amount of results per transport type, if ommitted no truncation is applied</param>
        /// <param name="sortBy">define sorting order, if omitted sorting is by TIME
        /// - TIME (Sorting based on best known time information ie real before preview before schedule)
        /// - TIME_SCHEDULE (Sorting based on schedule time)</param>
        /// <param name="innoSollfahrplan">inno: controls whether to include scheduled timetable [Sollfahrplan] or not</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<BoardPublicDeparture> BoardDepartureAsync(System.Collections.Generic.IEnumerable<string> evaNumbers, System.DateTimeOffset? timeStart, System.DateTimeOffset? timeEnd, bool? includeStationGroup, System.Collections.Generic.IEnumerable<TransportType> filterTransports, int? maxViaStops, int? maxTransportsPerType, SortKeyTime? sortBy, bool? innoSollfahrplan, System.Threading.CancellationToken cancellationToken);
    
        /// <param name="evaNumber">eva number to return stop place [Haltestelle] keys for</param>
        /// <param name="keyType">filter mapped keys by specific key type, if omitted all keys are returned</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<StopPlaceKeys> KeysAsync(string evaNumber, StopPlaceKeyType? keyType);
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <param name="evaNumber">eva number to return stop place [Haltestelle] keys for</param>
        /// <param name="keyType">filter mapped keys by specific key type, if omitted all keys are returned</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<StopPlaceKeys> KeysAsync(string evaNumber, StopPlaceKeyType? keyType, System.Threading.CancellationToken cancellationToken);
    
        /// <param name="evaNumber">eva number of desired stop place [Haltestelle]</param>
        /// <param name="platform">name of desired platform</param>
        /// <param name="includeSectors">should sector information be included</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<Platform> PlatformAsync(string evaNumber, string platform, bool? includeSectors);
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <param name="evaNumber">eva number of desired stop place [Haltestelle]</param>
        /// <param name="platform">name of desired platform</param>
        /// <param name="includeSectors">should sector information be included</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<Platform> PlatformAsync(string evaNumber, string platform, bool? includeSectors, System.Threading.CancellationToken cancellationToken);
    
        /// <param name="evaNumber">eva number to return stop place [Haltestelle] for</param>
        /// <param name="locales">languages to include, defaults to DE only
        /// - DE (German)
        /// - EN (English)
        /// - FR (French)
        /// - IT (Italian)</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<StopPlace> ByEvaNumberAsync(string evaNumber, System.Collections.Generic.IEnumerable<Locale> locales);
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <param name="evaNumber">eva number to return stop place [Haltestelle] for</param>
        /// <param name="locales">languages to include, defaults to DE only
        /// - DE (German)
        /// - EN (English)
        /// - FR (French)
        /// - IT (Italian)</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<StopPlace> ByEvaNumberAsync(string evaNumber, System.Collections.Generic.IEnumerable<Locale> locales, System.Threading.CancellationToken cancellationToken);
    
        /// <param name="query">query for stop place names [Haltestellenname] to search for, use * for wildcards if necessary</param>
        /// <param name="longitude">optional geo reference position longitude</param>
        /// <param name="latitude">optional geo reference position latitude</param>
        /// <param name="radius">optional radius in meters around geo reference position to search for stop places matching query</param>
        /// <param name="sortBy">sorting for search results, if omitted RELEVANCE will be used
        /// - RELEVANCE (stop places are sorted by relevance descending (main stations etc. first))
        /// - QUERY_MATCH (stop places are sorted by matching the provided query string descending aka Levensthein Distance)</param>
        /// <param name="onlyValid">indicates whether only valid stop places should be returned, defaults to true</param>
        /// <param name="locales">languages to include, defaults to DE only
        /// - DE (German)
        /// - EN (English)
        /// - FR (French)
        /// - IT (Italian)</param>
        /// <param name="limit">limit parameter in order to limit total amount of results, defaults to 25</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<StopPlaceSearchResults> ByNameAsync(string query, double? longitude, double? latitude, int? radius, StopPlaceSortKey? sortBy, bool? onlyValid, System.Collections.Generic.IEnumerable<Locale> locales, int? limit);
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <param name="query">query for stop place names [Haltestellenname] to search for, use * for wildcards if necessary</param>
        /// <param name="longitude">optional geo reference position longitude</param>
        /// <param name="latitude">optional geo reference position latitude</param>
        /// <param name="radius">optional radius in meters around geo reference position to search for stop places matching query</param>
        /// <param name="sortBy">sorting for search results, if omitted RELEVANCE will be used
        /// - RELEVANCE (stop places are sorted by relevance descending (main stations etc. first))
        /// - QUERY_MATCH (stop places are sorted by matching the provided query string descending aka Levensthein Distance)</param>
        /// <param name="onlyValid">indicates whether only valid stop places should be returned, defaults to true</param>
        /// <param name="locales">languages to include, defaults to DE only
        /// - DE (German)
        /// - EN (English)
        /// - FR (French)
        /// - IT (Italian)</param>
        /// <param name="limit">limit parameter in order to limit total amount of results, defaults to 25</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<StopPlaceSearchResults> ByNameAsync(string query, double? longitude, double? latitude, int? radius, StopPlaceSortKey? sortBy, bool? onlyValid, System.Collections.Generic.IEnumerable<Locale> locales, int? limit, System.Threading.CancellationToken cancellationToken);
    
        /// <param name="longitude">geo position longitude</param>
        /// <param name="latitude">geo position latitude</param>
        /// <param name="radius">radius in meters around geo position</param>
        /// <param name="onlyValid">indicates whether only valid stop places should be returned, defaults to true</param>
        /// <param name="locales">languages to include, defaults to DE only
        /// - DE (German)
        /// - EN (English)
        /// - FR (French)
        /// - IT (Italian)</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<StopPlaces> ByPositionAsync(double longitude, double latitude, int? radius, bool? onlyValid, System.Collections.Generic.IEnumerable<Locale> locales);
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <param name="longitude">geo position longitude</param>
        /// <param name="latitude">geo position latitude</param>
        /// <param name="radius">radius in meters around geo position</param>
        /// <param name="onlyValid">indicates whether only valid stop places should be returned, defaults to true</param>
        /// <param name="locales">languages to include, defaults to DE only
        /// - DE (German)
        /// - EN (English)
        /// - FR (French)
        /// - IT (Italian)</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<StopPlaces> ByPositionAsync(double longitude, double latitude, int? radius, bool? onlyValid, System.Collections.Generic.IEnumerable<Locale> locales, System.Threading.CancellationToken cancellationToken);
    
        /// <param name="evaNumber">eva number of desired stop place [Haltestelle]</param>
        /// <param name="group">stop place group [Station, Stadtgebiet, Umstiegsbereich] to consider connecting times for, defaults to STATION if omitted
        /// - STATION (group defined by station, for instance FFM = Hoch + Tief)</param>
        /// <param name="fromPlatform">platform to calculate times origin, if omitted all platforms are considered</param>
        /// <param name="fromSector">sector to calculate times origin, if omitted all sectors are considered</param>
        /// <param name="toPlatform">platform to calculate times destination, if omitted all platforms are considered</param>
        /// <param name="toSector">sector to calculate times destination, if omitted all sectors are considered</param>
        /// <param name="calculateSectors">should connecting times be calculated based on sector level, otherwise platform level</param>
        /// <param name="personaTypes">persona types that should be returned (if more than 1 is available), defaults to all personae if omitted</param>
        /// <param name="onlyRil420">only return RIL420 based connecting times (hence no INDOOR_ROUTING or FALLBACK), defaults to false meaning the best available connecting time source will be returned (1. INDOOR_ROUTING, 2. RIL420, 3. FALLBACK)</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<ConnectingTimes> ConnectingTimesAsync(string evaNumber, StopPlaceGroupType? group, string fromPlatform, string fromSector, string toPlatform, string toSector, bool? calculateSectors, System.Collections.Generic.IEnumerable<PersonaType> personaTypes, bool? onlyRil420);
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <param name="evaNumber">eva number of desired stop place [Haltestelle]</param>
        /// <param name="group">stop place group [Station, Stadtgebiet, Umstiegsbereich] to consider connecting times for, defaults to STATION if omitted
        /// - STATION (group defined by station, for instance FFM = Hoch + Tief)</param>
        /// <param name="fromPlatform">platform to calculate times origin, if omitted all platforms are considered</param>
        /// <param name="fromSector">sector to calculate times origin, if omitted all sectors are considered</param>
        /// <param name="toPlatform">platform to calculate times destination, if omitted all platforms are considered</param>
        /// <param name="toSector">sector to calculate times destination, if omitted all sectors are considered</param>
        /// <param name="calculateSectors">should connecting times be calculated based on sector level, otherwise platform level</param>
        /// <param name="personaTypes">persona types that should be returned (if more than 1 is available), defaults to all personae if omitted</param>
        /// <param name="onlyRil420">only return RIL420 based connecting times (hence no INDOOR_ROUTING or FALLBACK), defaults to false meaning the best available connecting time source will be returned (1. INDOOR_ROUTING, 2. RIL420, 3. FALLBACK)</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<ConnectingTimes> ConnectingTimesAsync(string evaNumber, StopPlaceGroupType? group, string fromPlatform, string fromSector, string toPlatform, string toSector, bool? calculateSectors, System.Collections.Generic.IEnumerable<PersonaType> personaTypes, bool? onlyRil420, System.Threading.CancellationToken cancellationToken);
    
        /// <param name="evaNumber">eva number of desired stop place [Haltestelle]</param>
        /// <param name="includeSectors">should sector information be included</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<Platforms> PlatformsAsync(string evaNumber, bool? includeSectors);
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <param name="evaNumber">eva number of desired stop place [Haltestelle]</param>
        /// <param name="includeSectors">should sector information be included</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<Platforms> PlatformsAsync(string evaNumber, bool? includeSectors, System.Threading.CancellationToken cancellationToken);
    
        /// <param name="evaNumber">eva number of desired stop place [Haltestelle]</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<OperationalPlatforms> PlatformsOperationalAsync(string evaNumber);
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <param name="evaNumber">eva number of desired stop place [Haltestelle]</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<OperationalPlatforms> PlatformsOperationalAsync(string evaNumber, System.Threading.CancellationToken cancellationToken);
    
        /// <param name="keyType">type of stop place keye
        /// - IFOPT (transmodel identifier for fixed objects, in germany dhid = Deutschlandweitee Halte ID)
        /// - EVA (eva number)
        /// - RL100 (rl100 / ds100)
        /// - EPA (epa uic number)
        /// - STADA (statitionsdatenbank number)
        /// - IBNR (interne bahnhofsnummer)</param>
        /// <param name="key">key to return stop places [Haltestellen] for</param>
        /// <param name="locales">languages to include, defaults to DE only
        /// - DE (German)
        /// - EN (English)
        /// - FR (French)
        /// - IT (Italian)</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<StopPlaces> ByKeyAsync(StopPlaceKeyType keyType, string key, System.Collections.Generic.IEnumerable<Locale> locales);
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <param name="keyType">type of stop place keye
        /// - IFOPT (transmodel identifier for fixed objects, in germany dhid = Deutschlandweitee Halte ID)
        /// - EVA (eva number)
        /// - RL100 (rl100 / ds100)
        /// - EPA (epa uic number)
        /// - STADA (statitionsdatenbank number)
        /// - IBNR (interne bahnhofsnummer)</param>
        /// <param name="key">key to return stop places [Haltestellen] for</param>
        /// <param name="locales">languages to include, defaults to DE only
        /// - DE (German)
        /// - EN (English)
        /// - FR (French)
        /// - IT (Italian)</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<StopPlaces> ByKeyAsync(StopPlaceKeyType keyType, string key, System.Collections.Generic.IEnumerable<Locale> locales, System.Threading.CancellationToken cancellationToken);
    
        /// <param name="longitude">geo position longitude</param>
        /// <param name="latitude">geo position latitude</param>
        /// <param name="time">time you want to know the whether for</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<Weather> WeatherAsync(double longitude, double latitude, System.DateTimeOffset time);
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <param name="longitude">geo position longitude</param>
        /// <param name="latitude">geo position latitude</param>
        /// <param name="time">time you want to know the whether for</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<Weather> WeatherAsync(double longitude, double latitude, System.DateTimeOffset time, System.Threading.CancellationToken cancellationToken);
    
        /// <param name="evaNumbers">list of eva numbers of stations [Bahnhoefe] to get board for</param>
        /// <param name="timeStart">start time for board as full qualified datetime (yyyy-MM-ddTHH:mm:ssZ), if omitted current time will be used</param>
        /// <param name="timeEnd">end time for board as full qualified datetime (yyyy-MM-ddTHH:mm:ssZ), if omitted current time plus 30 minutes will be used</param>
        /// <param name="includeStationGroup">should all stations of group the requested eva numbers belong to (for instance a request to 'FFM Hoch' would also return 'FFM tief') be included</param>
        /// <param name="filterTransports">filter for transport types that should be returned, if ommitted all types of transport are returned</param>
        /// <param name="maxViaStops">limits amount of via stops per transport (limitation doesn't apply to additional and canceled stops), if ommitted all via stops are returned, if zero no via stops are returned</param>
        /// <param name="maxTransportsPerType">limits amount of results per transport type, if ommitted no truncation is applied</param>
        /// <param name="sortBy">define sorting order, if omitted sorting is by TIME
        /// - TIME (Sorting based on best known time information ie real before preview before schedule)
        /// - TIME_SCHEDULE (Sorting based on schedule time)</param>
        /// <param name="positionLevel">reference position level for calculating walk durations from, if ommitted, no walk durations are calculated</param>
        /// <param name="positionLongitude">reference position longitude for calculating walk durations from, if ommitted, no walk durations are calculated</param>
        /// <param name="positionLatitude">reference position latitude for calculating walk durations from, if ommitted, no walk durations are calculated</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<BoardMultiDeparture> BoardDepartureMultimodalAsync(System.Collections.Generic.IEnumerable<string> evaNumbers, System.DateTimeOffset? timeStart, System.DateTimeOffset? timeEnd, bool? includeStationGroup, System.Collections.Generic.IEnumerable<TransportType> filterTransports, int? maxViaStops, int? maxTransportsPerType, SortKeyTime? sortBy, IndoorLevel? positionLevel, double? positionLongitude, double? positionLatitude);
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <param name="evaNumbers">list of eva numbers of stations [Bahnhoefe] to get board for</param>
        /// <param name="timeStart">start time for board as full qualified datetime (yyyy-MM-ddTHH:mm:ssZ), if omitted current time will be used</param>
        /// <param name="timeEnd">end time for board as full qualified datetime (yyyy-MM-ddTHH:mm:ssZ), if omitted current time plus 30 minutes will be used</param>
        /// <param name="includeStationGroup">should all stations of group the requested eva numbers belong to (for instance a request to 'FFM Hoch' would also return 'FFM tief') be included</param>
        /// <param name="filterTransports">filter for transport types that should be returned, if ommitted all types of transport are returned</param>
        /// <param name="maxViaStops">limits amount of via stops per transport (limitation doesn't apply to additional and canceled stops), if ommitted all via stops are returned, if zero no via stops are returned</param>
        /// <param name="maxTransportsPerType">limits amount of results per transport type, if ommitted no truncation is applied</param>
        /// <param name="sortBy">define sorting order, if omitted sorting is by TIME
        /// - TIME (Sorting based on best known time information ie real before preview before schedule)
        /// - TIME_SCHEDULE (Sorting based on schedule time)</param>
        /// <param name="positionLevel">reference position level for calculating walk durations from, if ommitted, no walk durations are calculated</param>
        /// <param name="positionLongitude">reference position longitude for calculating walk durations from, if ommitted, no walk durations are calculated</param>
        /// <param name="positionLatitude">reference position latitude for calculating walk durations from, if ommitted, no walk durations are calculated</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<BoardMultiDeparture> BoardDepartureMultimodalAsync(System.Collections.Generic.IEnumerable<string> evaNumbers, System.DateTimeOffset? timeStart, System.DateTimeOffset? timeEnd, bool? includeStationGroup, System.Collections.Generic.IEnumerable<TransportType> filterTransports, int? maxViaStops, int? maxTransportsPerType, SortKeyTime? sortBy, IndoorLevel? positionLevel, double? positionLongitude, double? positionLatitude, System.Threading.CancellationToken cancellationToken);
    
        /// <param name="evaNumbers">list of eva numbers of stations [Bahnhoefe] to get board for</param>
        /// <param name="timeStart">start time for board as full qualified datetime (yyyy-MM-ddTHH:mm:ssZ), if omitted current time will be used</param>
        /// <param name="timeEnd">end time for board as full qualified datetime (yyyy-MM-ddTHH:mm:ssZ), if omitted current time plus 30 minutes will be used</param>
        /// <param name="includeStationGroup">should all stations of group the requested eva numbers belong to (for instance a request to 'FFM Hoch' would also return 'FFM tief') be included</param>
        /// <param name="filterTransports">filter for transport types that should be returned, if ommitted all types of transport are returned</param>
        /// <param name="maxViaStops">limits amount of via stops per transport (limitation doesn't apply to additional and canceled stops), if ommitted all via stops are returned, if zero no via stops are returned</param>
        /// <param name="maxTransportsPerType">limits amount of results per transport type, if ommitted no truncation is applied</param>
        /// <param name="sortBy">define sorting order, if omitted sorting is by TIME
        /// - TIME (Sorting based on best known time information ie real before preview before schedule)
        /// - TIME_SCHEDULE (Sorting based on schedule time)</param>
        /// <param name="positionLevel">reference position level for calculating walk durations from, if ommitted, no walk durations are calculated</param>
        /// <param name="positionLongitude">reference position longitude for calculating walk durations from, if ommitted, no walk durations are calculated</param>
        /// <param name="positionLatitude">reference position latitude for calculating walk durations from, f ommitted, no walk durations are calculated</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<BoardMultiArrival> BoardArrivalMultimodalAsync(System.Collections.Generic.IEnumerable<string> evaNumbers, System.DateTimeOffset? timeStart, System.DateTimeOffset? timeEnd, bool? includeStationGroup, System.Collections.Generic.IEnumerable<TransportType> filterTransports, int? maxViaStops, int? maxTransportsPerType, SortKeyTime? sortBy, IndoorLevel? positionLevel, double? positionLongitude, double? positionLatitude);
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <param name="evaNumbers">list of eva numbers of stations [Bahnhoefe] to get board for</param>
        /// <param name="timeStart">start time for board as full qualified datetime (yyyy-MM-ddTHH:mm:ssZ), if omitted current time will be used</param>
        /// <param name="timeEnd">end time for board as full qualified datetime (yyyy-MM-ddTHH:mm:ssZ), if omitted current time plus 30 minutes will be used</param>
        /// <param name="includeStationGroup">should all stations of group the requested eva numbers belong to (for instance a request to 'FFM Hoch' would also return 'FFM tief') be included</param>
        /// <param name="filterTransports">filter for transport types that should be returned, if ommitted all types of transport are returned</param>
        /// <param name="maxViaStops">limits amount of via stops per transport (limitation doesn't apply to additional and canceled stops), if ommitted all via stops are returned, if zero no via stops are returned</param>
        /// <param name="maxTransportsPerType">limits amount of results per transport type, if ommitted no truncation is applied</param>
        /// <param name="sortBy">define sorting order, if omitted sorting is by TIME
        /// - TIME (Sorting based on best known time information ie real before preview before schedule)
        /// - TIME_SCHEDULE (Sorting based on schedule time)</param>
        /// <param name="positionLevel">reference position level for calculating walk durations from, if ommitted, no walk durations are calculated</param>
        /// <param name="positionLongitude">reference position longitude for calculating walk durations from, if ommitted, no walk durations are calculated</param>
        /// <param name="positionLatitude">reference position latitude for calculating walk durations from, f ommitted, no walk durations are calculated</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<BoardMultiArrival> BoardArrivalMultimodalAsync(System.Collections.Generic.IEnumerable<string> evaNumbers, System.DateTimeOffset? timeStart, System.DateTimeOffset? timeEnd, bool? includeStationGroup, System.Collections.Generic.IEnumerable<TransportType> filterTransports, int? maxViaStops, int? maxTransportsPerType, SortKeyTime? sortBy, IndoorLevel? positionLevel, double? positionLongitude, double? positionLatitude, System.Threading.CancellationToken cancellationToken);
    
        /// <param name="date">date (yyyy-MM-dd) of scheduled start of journey [Verkehrstag], if omitted defaults to today</param>
        /// <param name="number">number of transport [Fahrtnummer]</param>
        /// <param name="administrationID">administration [Verwaltung] id</param>
        /// <param name="originEvaNumber">scheduled origin station [Geplanter Starthalt]</param>
        /// <param name="destinationEvaNumber">scheduled destination station [Geplanter Zielhalt]</param>
        /// <param name="transports">transport types that should be returned, if ommitted all types of transport are returned</param>
        /// <param name="category">category of transport [Fahrtgattung]</param>
        /// <param name="line">line of transport [Linie]</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<JourneyMatches> FindAsync(System.DateTimeOffset? date, int number, string administrationID, string originEvaNumber, string destinationEvaNumber, System.Collections.Generic.IEnumerable<TransportType> transports, string category, string line);
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <param name="date">date (yyyy-MM-dd) of scheduled start of journey [Verkehrstag], if omitted defaults to today</param>
        /// <param name="number">number of transport [Fahrtnummer]</param>
        /// <param name="administrationID">administration [Verwaltung] id</param>
        /// <param name="originEvaNumber">scheduled origin station [Geplanter Starthalt]</param>
        /// <param name="destinationEvaNumber">scheduled destination station [Geplanter Zielhalt]</param>
        /// <param name="transports">transport types that should be returned, if ommitted all types of transport are returned</param>
        /// <param name="category">category of transport [Fahrtgattung]</param>
        /// <param name="line">line of transport [Linie]</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<JourneyMatches> FindAsync(System.DateTimeOffset? date, int number, string administrationID, string originEvaNumber, string destinationEvaNumber, System.Collections.Generic.IEnumerable<TransportType> transports, string category, string line, System.Threading.CancellationToken cancellationToken);
    
        /// <param name="date">date (yyyy-MM-dd) of scheduled start of journey [Verkehrstag]</param>
        /// <param name="category">category of transport [Fahrtgattung]</param>
        /// <param name="number">number of transport [Fahrtnummer]</param>
        /// <param name="evaNumber">departure station id [Haltestelle ID] for desired departure</param>
        /// <param name="timeSchedule">scheduled departure time [Geplante Abfahrtszeit] for desired departure as full qualified datetime (yyyy-MM-ddTHH:mm:ssZ)</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<DepartureMatches> FindDepartureAsync(System.DateTimeOffset date, string category, int number, string evaNumber, System.DateTimeOffset timeSchedule);
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <param name="date">date (yyyy-MM-dd) of scheduled start of journey [Verkehrstag]</param>
        /// <param name="category">category of transport [Fahrtgattung]</param>
        /// <param name="number">number of transport [Fahrtnummer]</param>
        /// <param name="evaNumber">departure station id [Haltestelle ID] for desired departure</param>
        /// <param name="timeSchedule">scheduled departure time [Geplante Abfahrtszeit] for desired departure as full qualified datetime (yyyy-MM-ddTHH:mm:ssZ)</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<DepartureMatches> FindDepartureAsync(System.DateTimeOffset date, string category, int number, string evaNumber, System.DateTimeOffset timeSchedule, System.Threading.CancellationToken cancellationToken);
    
        /// <param name="journeyID">id of journey [FahrtID]</param>
        /// <param name="includeCanceled">include canceled arrivals / departures</param>
        /// <param name="includeJourneyReferences">include journey references like relief [Entlastung], replace [Ersatz], continuation [Durchbindung], travelswith [Vereinigung / Fluegelung]</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<JourneySegmentBased> JourneySegmentbasedByIdAsync(string journeyID, bool? includeCanceled, bool? includeJourneyReferences);
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <param name="journeyID">id of journey [FahrtID]</param>
        /// <param name="includeCanceled">include canceled arrivals / departures</param>
        /// <param name="includeJourneyReferences">include journey references like relief [Entlastung], replace [Ersatz], continuation [Durchbindung], travelswith [Vereinigung / Fluegelung]</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<JourneySegmentBased> JourneySegmentbasedByIdAsync(string journeyID, bool? includeCanceled, bool? includeJourneyReferences, System.Threading.CancellationToken cancellationToken);
    
        /// <param name="journeyID">id of journey [FahrtID]</param>
        /// <param name="includeCanceled">include canceled arrivals / departures</param>
        /// <param name="includeJourneyReferences">include journey references like relief [Entlastung], replace [Ersatz], continuation [Durchbindung], travelswith [Vereinigung / Fluegelung]</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        [System.Obsolete]
        System.Threading.Tasks.Task<JourneyEventBased> JourneyEventbasedByIdAsync(string journeyID, bool? includeCanceled, bool? includeJourneyReferences);
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <param name="journeyID">id of journey [FahrtID]</param>
        /// <param name="includeCanceled">include canceled arrivals / departures</param>
        /// <param name="includeJourneyReferences">include journey references like relief [Entlastung], replace [Ersatz], continuation [Durchbindung], travelswith [Vereinigung / Fluegelung]</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        [System.Obsolete]
        System.Threading.Tasks.Task<JourneyEventBased> JourneyEventbasedByIdAsync(string journeyID, bool? includeCanceled, bool? includeJourneyReferences, System.Threading.CancellationToken cancellationToken);
    
        /// <param name="fromEvaNumber">eva number origin</param>
        /// <param name="fromLevel">indoor level origin (inside)</param>
        /// <param name="fromLongitude">geo position longitude origin (inside)</param>
        /// <param name="fromLatitude">geo position latitude origin (inside)</param>
        /// <param name="toLongitude">geo position longitude destination (outside)</param>
        /// <param name="toLatitude">geo position latitude destination (outside)</param>
        /// <param name="persona">persona type for routing (slow connections, no stairs etc.)</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<Indoor2OutdoorRouting> RoutingIndoor2OutdoorAsync(string fromEvaNumber, IndoorLevel fromLevel, double fromLongitude, double fromLatitude, double toLongitude, double toLatitude, PersonaType? persona);
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <param name="fromEvaNumber">eva number origin</param>
        /// <param name="fromLevel">indoor level origin (inside)</param>
        /// <param name="fromLongitude">geo position longitude origin (inside)</param>
        /// <param name="fromLatitude">geo position latitude origin (inside)</param>
        /// <param name="toLongitude">geo position longitude destination (outside)</param>
        /// <param name="toLatitude">geo position latitude destination (outside)</param>
        /// <param name="persona">persona type for routing (slow connections, no stairs etc.)</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<Indoor2OutdoorRouting> RoutingIndoor2OutdoorAsync(string fromEvaNumber, IndoorLevel fromLevel, double fromLongitude, double fromLatitude, double toLongitude, double toLatitude, PersonaType? persona, System.Threading.CancellationToken cancellationToken);
    
        /// <param name="fromEvaNumber">eva number origin</param>
        /// <param name="fromPlatform">platform origin</param>
        /// <param name="fromSector">sector origin, may be empty.</param>
        /// <param name="toEvaNumber">eva number origin</param>
        /// <param name="toPlatform">platform origin</param>
        /// <param name="toSector">sector origin, may be empty</param>
        /// <param name="persona">persona type for routing (slow connections, no stairs etc.)</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<IndoorRouting> RoutingIndoorByPlatformAsync(string fromEvaNumber, string fromPlatform, string fromSector, string toEvaNumber, string toPlatform, string toSector, PersonaType? persona);
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <param name="fromEvaNumber">eva number origin</param>
        /// <param name="fromPlatform">platform origin</param>
        /// <param name="fromSector">sector origin, may be empty.</param>
        /// <param name="toEvaNumber">eva number origin</param>
        /// <param name="toPlatform">platform origin</param>
        /// <param name="toSector">sector origin, may be empty</param>
        /// <param name="persona">persona type for routing (slow connections, no stairs etc.)</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<IndoorRouting> RoutingIndoorByPlatformAsync(string fromEvaNumber, string fromPlatform, string fromSector, string toEvaNumber, string toPlatform, string toSector, PersonaType? persona, System.Threading.CancellationToken cancellationToken);
    
        /// <param name="fromEvaNumber">eva number origin</param>
        /// <param name="fromLevel">indoor level origin</param>
        /// <param name="fromLongitude">geo position longitude origin</param>
        /// <param name="fromLatitude">geo position latitude origin</param>
        /// <param name="toEvaNumber">eva number destination</param>
        /// <param name="toLevel">indoor level destination</param>
        /// <param name="toLongitude">geo position longitude destination</param>
        /// <param name="toLatitude">geo position latitude destination</param>
        /// <param name="persona">persona type for routing (slow connections, no stairs etc.)</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<IndoorRouting> RoutingIndoorByPositionAsync(string fromEvaNumber, IndoorLevel fromLevel, double fromLongitude, double fromLatitude, string toEvaNumber, IndoorLevel toLevel, double toLongitude, double toLatitude, PersonaType? persona);
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <param name="fromEvaNumber">eva number origin</param>
        /// <param name="fromLevel">indoor level origin</param>
        /// <param name="fromLongitude">geo position longitude origin</param>
        /// <param name="fromLatitude">geo position latitude origin</param>
        /// <param name="toEvaNumber">eva number destination</param>
        /// <param name="toLevel">indoor level destination</param>
        /// <param name="toLongitude">geo position longitude destination</param>
        /// <param name="toLatitude">geo position latitude destination</param>
        /// <param name="persona">persona type for routing (slow connections, no stairs etc.)</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<IndoorRouting> RoutingIndoorByPositionAsync(string fromEvaNumber, IndoorLevel fromLevel, double fromLongitude, double fromLatitude, string toEvaNumber, IndoorLevel toLevel, double toLongitude, double toLatitude, PersonaType? persona, System.Threading.CancellationToken cancellationToken);
    
        /// <param name="timeStart">start time for routing as full qualified datetim, if omitted, current time will be used</param>
        /// <param name="fromLongitude">geo position longitude origin</param>
        /// <param name="fromLatitude">geo position latitude origin</param>
        /// <param name="toLongitude">geo position longitude destination</param>
        /// <param name="toLatitude">geo position latitude destination</param>
        /// <param name="persona">persona type for routing (slow connections, no stairs etc.)</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<MultimodalRouting> RoutingMultimodalAsync(System.DateTimeOffset? timeStart, double fromLongitude, double fromLatitude, double toLongitude, double toLatitude, PersonaType? persona);
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <param name="timeStart">start time for routing as full qualified datetim, if omitted, current time will be used</param>
        /// <param name="fromLongitude">geo position longitude origin</param>
        /// <param name="fromLatitude">geo position latitude origin</param>
        /// <param name="toLongitude">geo position longitude destination</param>
        /// <param name="toLatitude">geo position latitude destination</param>
        /// <param name="persona">persona type for routing (slow connections, no stairs etc.)</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<MultimodalRouting> RoutingMultimodalAsync(System.DateTimeOffset? timeStart, double fromLongitude, double fromLatitude, double toLongitude, double toLatitude, PersonaType? persona, System.Threading.CancellationToken cancellationToken);
    
        /// <param name="journeyID">id of journey [FahrtID]</param>
        /// <param name="arrivalID">id of arrival [AnkunftID]</param>
        /// <param name="timeSlot">time slot in minutes starting at arrivaltime of the requested arrivalID, in which the connections depart from the station (group) of the arrival, if omitted defaults to 30 minutes</param>
        /// <param name="includeStationGroup">should all stations of group the requested eva numbers belong to (for instance a request to 'FFM Hoch' would also return 'FFM tief') be included</param>
        /// <param name="onlyPossibleConnections">indicates whether only possible connections should be returned, if false also impossible connections (connect time too short) are returned</param>
        /// <param name="filterTransports">filter for transport types that should be returned, if ommitted all types of transport are returned</param>
        /// <param name="maxViaStops">limits amount of via stops per transport (limitation doesn't apply to additional and canceled stops), if ommitted all via stops are returned, if zero no via stops are returned</param>
        /// <param name="maxTransports">limits amount of results, if ommitted no truncation is applied</param>
        /// <param name="sortBy">define sorting order, if omitted sorting is by TIME
        /// - TIME (Sorting based on best known time information ie real before preview before schedule)
        /// - TIME_SCHEDULE (Sorting based on schedule time)</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<ConnectionArrival> ConnectionsArrivalAsync(string journeyID, string arrivalID, int? timeSlot, bool? includeStationGroup, bool? onlyPossibleConnections, System.Collections.Generic.IEnumerable<TransportType> filterTransports, int? maxViaStops, int? maxTransports, SortKeyTime? sortBy);
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <param name="journeyID">id of journey [FahrtID]</param>
        /// <param name="arrivalID">id of arrival [AnkunftID]</param>
        /// <param name="timeSlot">time slot in minutes starting at arrivaltime of the requested arrivalID, in which the connections depart from the station (group) of the arrival, if omitted defaults to 30 minutes</param>
        /// <param name="includeStationGroup">should all stations of group the requested eva numbers belong to (for instance a request to 'FFM Hoch' would also return 'FFM tief') be included</param>
        /// <param name="onlyPossibleConnections">indicates whether only possible connections should be returned, if false also impossible connections (connect time too short) are returned</param>
        /// <param name="filterTransports">filter for transport types that should be returned, if ommitted all types of transport are returned</param>
        /// <param name="maxViaStops">limits amount of via stops per transport (limitation doesn't apply to additional and canceled stops), if ommitted all via stops are returned, if zero no via stops are returned</param>
        /// <param name="maxTransports">limits amount of results, if ommitted no truncation is applied</param>
        /// <param name="sortBy">define sorting order, if omitted sorting is by TIME
        /// - TIME (Sorting based on best known time information ie real before preview before schedule)
        /// - TIME_SCHEDULE (Sorting based on schedule time)</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<ConnectionArrival> ConnectionsArrivalAsync(string journeyID, string arrivalID, int? timeSlot, bool? includeStationGroup, bool? onlyPossibleConnections, System.Collections.Generic.IEnumerable<TransportType> filterTransports, int? maxViaStops, int? maxTransports, SortKeyTime? sortBy, System.Threading.CancellationToken cancellationToken);
    
        /// <param name="journeyID">id of journey [FahrtID]</param>
        /// <param name="arrivalID">id of arrival of journey [AnkunftID]</param>
        /// <param name="journeyIDConnecting">id of connecting journey [FahrtID der anschliessenden Fahrt]</param>
        /// <param name="departureIDConnecting">id of departure stop of the connecting journey [AnkunftID der anschliessenden Fahrt]</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        [System.Obsolete]
        System.Threading.Tasks.Task<ConnectionJourneys> ConnectionsJourneysAsync(string journeyID, string arrivalID, string journeyIDConnecting, string departureIDConnecting);
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <param name="journeyID">id of journey [FahrtID]</param>
        /// <param name="arrivalID">id of arrival of journey [AnkunftID]</param>
        /// <param name="journeyIDConnecting">id of connecting journey [FahrtID der anschliessenden Fahrt]</param>
        /// <param name="departureIDConnecting">id of departure stop of the connecting journey [AnkunftID der anschliessenden Fahrt]</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        [System.Obsolete]
        System.Threading.Tasks.Task<ConnectionJourneys> ConnectionsJourneysAsync(string journeyID, string arrivalID, string journeyIDConnecting, string departureIDConnecting, System.Threading.CancellationToken cancellationToken);
    
        /// <param name="longitude">geo position longitude</param>
        /// <param name="latitude">geo position latitude</param>
        /// <param name="radius">radius in meters for returning mobilities around geo position</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<MobilitiesOnDemand> MobilitiesOnDemandByPositionAsync(double longitude, double latitude, int? radius);
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <param name="longitude">geo position longitude</param>
        /// <param name="latitude">geo position latitude</param>
        /// <param name="radius">radius in meters for returning mobilities around geo position</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<MobilitiesOnDemand> MobilitiesOnDemandByPositionAsync(double longitude, double latitude, int? radius, System.Threading.CancellationToken cancellationToken);
    
        /// <param name="longitude">geo position longitude</param>
        /// <param name="latitude">geo position latitude</param>
        /// <param name="radius">radius in meters for returning mobilities around geo position</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<MobilitiesIndividual> MobilitiesIndividualByPositionAsync(double longitude, double latitude, int? radius);
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <param name="longitude">geo position longitude</param>
        /// <param name="latitude">geo position latitude</param>
        /// <param name="radius">radius in meters for returning mobilities around geo position</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<MobilitiesIndividual> MobilitiesIndividualByPositionAsync(double longitude, double latitude, int? radius, System.Threading.CancellationToken cancellationToken);
    
        /// <param name="evaNumber">eva number of station</param>
        /// <param name="radius">radius in meters for returning mobilities around geo position</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<MobilitiesIndividual> MobilitiesIndividualByStationAsync(string evaNumber, int? radius);
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <param name="evaNumber">eva number of station</param>
        /// <param name="radius">radius in meters for returning mobilities around geo position</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<MobilitiesIndividual> MobilitiesIndividualByStationAsync(string evaNumber, int? radius, System.Threading.CancellationToken cancellationToken);
    
        /// <param name="evaNumber">eva number of station</param>
        /// <param name="radius">radius in meters for returning mobilities around geo position</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<MobilitiesOnDemand> MobilitiesOnDemandByStationAsync(string evaNumber, int? radius);
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <param name="evaNumber">eva number of station</param>
        /// <param name="radius">radius in meters for returning mobilities around geo position</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<MobilitiesOnDemand> MobilitiesOnDemandByStationAsync(string evaNumber, int? radius, System.Threading.CancellationToken cancellationToken);
    
        /// <param name="journeyID">id of journey [FahrtID]</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<TransportPosition> PositionAsync(string journeyID);
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <param name="journeyID">id of journey [FahrtID]</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<TransportPosition> PositionAsync(string journeyID, System.Threading.CancellationToken cancellationToken);
    
        /// <param name="macAddress">id of wifi access point [MAC Adresse]</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        [System.Obsolete]
        System.Threading.Tasks.Task<TransportMatchWifis> MatchingWifiAsync(string macAddress);
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <param name="macAddress">id of wifi access point [MAC Adresse]</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        [System.Obsolete]
        System.Threading.Tasks.Task<TransportMatchWifis> MatchingWifiAsync(string macAddress, System.Threading.CancellationToken cancellationToken);
    
        /// <param name="vehicleID">id for vehicle (for rail vehicles usually the UIC identification nunmber)</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<TransportMatchVehicleIDs> MatchingVehicleIDAsync(string vehicleID);
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <param name="vehicleID">id for vehicle (for rail vehicles usually the UIC identification nunmber)</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<TransportMatchVehicleIDs> MatchingVehicleIDAsync(string vehicleID, System.Threading.CancellationToken cancellationToken);
    
        /// <param name="longitude">geo reference position longitude</param>
        /// <param name="latitude">geo reference position latitude</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        [System.Obsolete]
        System.Threading.Tasks.Task<TransportMatchGeoPositions> MatchingPositionAsync(double longitude, double latitude);
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <param name="longitude">geo reference position longitude</param>
        /// <param name="latitude">geo reference position latitude</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        [System.Obsolete]
        System.Threading.Tasks.Task<TransportMatchGeoPositions> MatchingPositionAsync(double longitude, double latitude, System.Threading.CancellationToken cancellationToken);
    
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<VehicleSequenceAvailableAdministrations> VehicleSequenceAdministrationsAsync();
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<VehicleSequenceAvailableAdministrations> VehicleSequenceAdministrationsAsync(System.Threading.CancellationToken cancellationToken);
    
        /// <param name="journeyID">id of journey [FahrtID]</param>
        /// <param name="departureID">id of departure [AbfahrtID]</param>
        /// <param name="includePosition">include position at platform [Gleis, Bahnsteig, Plattform], if omitted or false no platform and no position information per vehicle will be returned</param>
        /// <param name="includeAmenities">include amenities [Ausstatungsmerkmale] like WC, WLAN, boarding aids etc. on a vehicle base, if omitted or false no amenities will be returned</param>
        /// <param name="includeOccupancy">include (detailed) occupancy [Auslastung] for vehicles at departure, if omitted or NONE no occupancy will be returned
        /// - NONE (return no occupancy)
        /// - OVERALL (return only overall occupancy on a first / economy class level)
        /// - DETAIL (return detailed occupancy information like free bike mounts , free seats, stance etc.)</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<VehicleSequenceDeparture> VehicleSequenceDepartureAsync(string journeyID, string departureID, bool? includePosition, bool? includeAmenities, OccupancyDetail? includeOccupancy);
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <param name="journeyID">id of journey [FahrtID]</param>
        /// <param name="departureID">id of departure [AbfahrtID]</param>
        /// <param name="includePosition">include position at platform [Gleis, Bahnsteig, Plattform], if omitted or false no platform and no position information per vehicle will be returned</param>
        /// <param name="includeAmenities">include amenities [Ausstatungsmerkmale] like WC, WLAN, boarding aids etc. on a vehicle base, if omitted or false no amenities will be returned</param>
        /// <param name="includeOccupancy">include (detailed) occupancy [Auslastung] for vehicles at departure, if omitted or NONE no occupancy will be returned
        /// - NONE (return no occupancy)
        /// - OVERALL (return only overall occupancy on a first / economy class level)
        /// - DETAIL (return detailed occupancy information like free bike mounts , free seats, stance etc.)</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<VehicleSequenceDeparture> VehicleSequenceDepartureAsync(string journeyID, string departureID, bool? includePosition, bool? includeAmenities, OccupancyDetail? includeOccupancy, System.Threading.CancellationToken cancellationToken);
    
        /// <param name="date">date (yyyy-mm-dd) of scheduled start of journey [Verkehrstag]</param>
        /// <param name="category">category of transport [Fahrtgattung]</param>
        /// <param name="number">number of transport [Fahrtnummer]</param>
        /// <param name="evaNumber">departure station id [Abfahrt] for desired departure</param>
        /// <param name="time">scheduled departure time [Geplante Abfahrtszeit] for desired departure as full qualified datetime (yyyy-MM-ddTHH:mm:ssZ)</param>
        /// <param name="includePosition">include position at platform [Gleis, Bahnsteig, Plattform], if omitted or false no platform and no position information per vehicle will be returned</param>
        /// <param name="includeAmenities">include amenities [Ausstatungsmerkmale] like WC, WLAN, boarding aids etc. on a vehicle base, if omitted or false no amenities will be returned</param>
        /// <param name="includeOccupancy">include (detailed) occupancy [Auslastung] for vehicles at departure, if omitted or NONE no occupancy will be returned
        /// - NONE (return no occupancy)
        /// - OVERALL (return only overall occupancy on a first / economy class level)
        /// - DETAIL (return detailed occupancy information like free bike mounts , free seats, stance etc.)</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<VehicleSequenceDeparture> VehicleSequenceDepartureUnmatchedAsync(System.DateTimeOffset date, string category, int number, string evaNumber, System.DateTimeOffset time, bool? includePosition, bool? includeAmenities, OccupancyDetail? includeOccupancy);
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <param name="date">date (yyyy-mm-dd) of scheduled start of journey [Verkehrstag]</param>
        /// <param name="category">category of transport [Fahrtgattung]</param>
        /// <param name="number">number of transport [Fahrtnummer]</param>
        /// <param name="evaNumber">departure station id [Abfahrt] for desired departure</param>
        /// <param name="time">scheduled departure time [Geplante Abfahrtszeit] for desired departure as full qualified datetime (yyyy-MM-ddTHH:mm:ssZ)</param>
        /// <param name="includePosition">include position at platform [Gleis, Bahnsteig, Plattform], if omitted or false no platform and no position information per vehicle will be returned</param>
        /// <param name="includeAmenities">include amenities [Ausstatungsmerkmale] like WC, WLAN, boarding aids etc. on a vehicle base, if omitted or false no amenities will be returned</param>
        /// <param name="includeOccupancy">include (detailed) occupancy [Auslastung] for vehicles at departure, if omitted or NONE no occupancy will be returned
        /// - NONE (return no occupancy)
        /// - OVERALL (return only overall occupancy on a first / economy class level)
        /// - DETAIL (return detailed occupancy information like free bike mounts , free seats, stance etc.)</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<VehicleSequenceDeparture> VehicleSequenceDepartureUnmatchedAsync(System.DateTimeOffset date, string category, int number, string evaNumber, System.DateTimeOffset time, bool? includePosition, bool? includeAmenities, OccupancyDetail? includeOccupancy, System.Threading.CancellationToken cancellationToken);
    
        /// <param name="query">query string to search addresses and stations for</param>
        /// <param name="maxResults">max results to return, leave empty in case no truncation is necessary; applies to addresses and stations individually.</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<Locations> LocationsAutoCompleteAsync(string query, int? maxResults);
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <param name="query">query string to search addresses and stations for</param>
        /// <param name="maxResults">max results to return, leave empty in case no truncation is necessary; applies to addresses and stations individually.</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<Locations> LocationsAutoCompleteAsync(string query, int? maxResults, System.Threading.CancellationToken cancellationToken);
    
        /// <param name="street">street name of address the position should be retrived for</param>
        /// <param name="houseNumber">housenumber of address the position should be retrived for</param>
        /// <param name="postalCode">postalcode of address the position should be retrived for</param>
        /// <param name="city">city of address the position should be retrived for</param>
        /// <param name="country">country of address the position should be retrived for</param>
        /// <param name="maxResults">max results to return, leave empty in case no truncation is necessary; applies to addresses and stations individually</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<Locations> LocationsByAddressAsync(string street, string houseNumber, string postalCode, string city, string country, int? maxResults);
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <param name="street">street name of address the position should be retrived for</param>
        /// <param name="houseNumber">housenumber of address the position should be retrived for</param>
        /// <param name="postalCode">postalcode of address the position should be retrived for</param>
        /// <param name="city">city of address the position should be retrived for</param>
        /// <param name="country">country of address the position should be retrived for</param>
        /// <param name="maxResults">max results to return, leave empty in case no truncation is necessary; applies to addresses and stations individually</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<Locations> LocationsByAddressAsync(string street, string houseNumber, string postalCode, string city, string country, int? maxResults, System.Threading.CancellationToken cancellationToken);
    
        /// <param name="longitude">heo position longitude</param>
        /// <param name="latitude">heo position latitude</param>
        /// <param name="radius">radius in meters for returning addresses around geo position</param>
        /// <param name="maxResults">max results to return, leave empty in case no truncation is necessary; applies to addresses and stations individually</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<Locations> LocationsByPositionAsync(double longitude, double latitude, int? radius, int? maxResults);
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <param name="longitude">heo position longitude</param>
        /// <param name="latitude">heo position latitude</param>
        /// <param name="radius">radius in meters for returning addresses around geo position</param>
        /// <param name="maxResults">max results to return, leave empty in case no truncation is necessary; applies to addresses and stations individually</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<Locations> LocationsByPositionAsync(double longitude, double latitude, int? radius, int? maxResults, System.Threading.CancellationToken cancellationToken);
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NSwag", "13.8.2.0 (NJsonSchema v10.2.1.0 (Newtonsoft.Json v12.0.0.2))")]
    public partial class InnoApiClient : IInnoApiClient
    {
        private System.Net.Http.HttpClient _httpClient;
        private System.Lazy<Newtonsoft.Json.JsonSerializerSettings> _settings;
    
        public InnoApiClient(System.Net.Http.HttpClient httpClient)
        {
            _httpClient = httpClient; 
            _settings = new System.Lazy<Newtonsoft.Json.JsonSerializerSettings>(CreateSerializerSettings);
        }
    
        private Newtonsoft.Json.JsonSerializerSettings CreateSerializerSettings()
        {
            var settings = new Newtonsoft.Json.JsonSerializerSettings();
            UpdateJsonSerializerSettings(settings);
            return settings;
        }
    
        protected Newtonsoft.Json.JsonSerializerSettings JsonSerializerSettings { get { return _settings.Value; } }
    
        partial void UpdateJsonSerializerSettings(Newtonsoft.Json.JsonSerializerSettings settings);
        partial void PrepareRequest(System.Net.Http.HttpClient client, System.Net.Http.HttpRequestMessage request, string url);
        partial void PrepareRequest(System.Net.Http.HttpClient client, System.Net.Http.HttpRequestMessage request, System.Text.StringBuilder urlBuilder);
        partial void ProcessResponse(System.Net.Http.HttpClient client, System.Net.Http.HttpResponseMessage response);
    
        /// <param name="clientID">Unique identifier of client.</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task<EventFetchResponse> FetchAsync(string clientID)
        {
            return FetchAsync(clientID, System.Threading.CancellationToken.None);
        }
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <param name="clientID">Unique identifier of client.</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task<EventFetchResponse> FetchAsync(string clientID, System.Threading.CancellationToken cancellationToken)
        {
            if (clientID == null)
                throw new System.ArgumentNullException("clientID");
    
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append("events/event/fetch?");
            urlBuilder_.Append(System.Uri.EscapeDataString("clientID") + "=").Append(System.Uri.EscapeDataString(ConvertToString(clientID, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            urlBuilder_.Length--;
    
            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));
    
                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);
    
                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }
    
                        ProcessResponse(client_, response_);
    
                        var status_ = (int)response_.StatusCode;
                        if (status_ == 500)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorResponse>(response_, headers_).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<ErrorResponse>("API Exception", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<EventFetchResponse>(response_, headers_).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }
    
        /// <param name="clientID">Unique identifier of client.</param>
        /// <param name="journeyID">ID of journey.</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task<EventJourneySubscribeResponse> JourneySubscribeAsync(string clientID, string journeyID)
        {
            return JourneySubscribeAsync(clientID, journeyID, System.Threading.CancellationToken.None);
        }
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <param name="clientID">Unique identifier of client.</param>
        /// <param name="journeyID">ID of journey.</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task<EventJourneySubscribeResponse> JourneySubscribeAsync(string clientID, string journeyID, System.Threading.CancellationToken cancellationToken)
        {
            if (clientID == null)
                throw new System.ArgumentNullException("clientID");
    
            if (journeyID == null)
                throw new System.ArgumentNullException("journeyID");
    
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append("events/event/journeychanged/subscribe?");
            urlBuilder_.Append(System.Uri.EscapeDataString("clientID") + "=").Append(System.Uri.EscapeDataString(ConvertToString(clientID, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            urlBuilder_.Append(System.Uri.EscapeDataString("journeyID") + "=").Append(System.Uri.EscapeDataString(ConvertToString(journeyID, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            urlBuilder_.Length--;
    
            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));
    
                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);
    
                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }
    
                        ProcessResponse(client_, response_);
    
                        var status_ = (int)response_.StatusCode;
                        if (status_ == 500)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorResponse>(response_, headers_).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<ErrorResponse>("API Exception", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<EventJourneySubscribeResponse>(response_, headers_).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }
    
        /// <param name="clientID">Unique identifier of client.</param>
        /// <param name="journeyID">ID of journey.</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task<EventJourneyUnsubscribeResponse> JourneyUnsubscribeAsync(string clientID, string journeyID)
        {
            return JourneyUnsubscribeAsync(clientID, journeyID, System.Threading.CancellationToken.None);
        }
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <param name="clientID">Unique identifier of client.</param>
        /// <param name="journeyID">ID of journey.</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task<EventJourneyUnsubscribeResponse> JourneyUnsubscribeAsync(string clientID, string journeyID, System.Threading.CancellationToken cancellationToken)
        {
            if (clientID == null)
                throw new System.ArgumentNullException("clientID");
    
            if (journeyID == null)
                throw new System.ArgumentNullException("journeyID");
    
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append("events/event/journeychanged/unsubscribe?");
            urlBuilder_.Append(System.Uri.EscapeDataString("clientID") + "=").Append(System.Uri.EscapeDataString(ConvertToString(clientID, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            urlBuilder_.Append(System.Uri.EscapeDataString("journeyID") + "=").Append(System.Uri.EscapeDataString(ConvertToString(journeyID, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            urlBuilder_.Length--;
    
            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));
    
                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);
    
                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }
    
                        ProcessResponse(client_, response_);
    
                        var status_ = (int)response_.StatusCode;
                        if (status_ == 500)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorResponse>(response_, headers_).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<ErrorResponse>("API Exception", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<EventJourneyUnsubscribeResponse>(response_, headers_).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }
    
        /// <param name="clientID">Unique identifier of client.</param>
        /// <param name="journeyID">ID of journey.</param>
        /// <param name="trainID">ID of train within journey.</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task<EventTrainPositionSubscribeResponse> TrainPositionSubscribeAsync(string clientID, string journeyID, string trainID)
        {
            return TrainPositionSubscribeAsync(clientID, journeyID, trainID, System.Threading.CancellationToken.None);
        }
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <param name="clientID">Unique identifier of client.</param>
        /// <param name="journeyID">ID of journey.</param>
        /// <param name="trainID">ID of train within journey.</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task<EventTrainPositionSubscribeResponse> TrainPositionSubscribeAsync(string clientID, string journeyID, string trainID, System.Threading.CancellationToken cancellationToken)
        {
            if (clientID == null)
                throw new System.ArgumentNullException("clientID");
    
            if (journeyID == null)
                throw new System.ArgumentNullException("journeyID");
    
            if (trainID == null)
                throw new System.ArgumentNullException("trainID");
    
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append("events/event/trainpositionchanged/subscribe?");
            urlBuilder_.Append(System.Uri.EscapeDataString("clientID") + "=").Append(System.Uri.EscapeDataString(ConvertToString(clientID, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            urlBuilder_.Append(System.Uri.EscapeDataString("journeyID") + "=").Append(System.Uri.EscapeDataString(ConvertToString(journeyID, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            urlBuilder_.Append(System.Uri.EscapeDataString("trainID") + "=").Append(System.Uri.EscapeDataString(ConvertToString(trainID, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            urlBuilder_.Length--;
    
            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));
    
                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);
    
                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }
    
                        ProcessResponse(client_, response_);
    
                        var status_ = (int)response_.StatusCode;
                        if (status_ == 500)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorResponse>(response_, headers_).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<ErrorResponse>("API Exception", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<EventTrainPositionSubscribeResponse>(response_, headers_).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }
    
        /// <param name="clientID">Unique identifier of client.</param>
        /// <param name="journeyID">ID of journey.</param>
        /// <param name="trainID">ID of train within journey.</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task<EventTrainPositionUnsubscribeResponse> TrainPositionUnsubscribeAsync(string clientID, string journeyID, string trainID)
        {
            return TrainPositionUnsubscribeAsync(clientID, journeyID, trainID, System.Threading.CancellationToken.None);
        }
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <param name="clientID">Unique identifier of client.</param>
        /// <param name="journeyID">ID of journey.</param>
        /// <param name="trainID">ID of train within journey.</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task<EventTrainPositionUnsubscribeResponse> TrainPositionUnsubscribeAsync(string clientID, string journeyID, string trainID, System.Threading.CancellationToken cancellationToken)
        {
            if (clientID == null)
                throw new System.ArgumentNullException("clientID");
    
            if (journeyID == null)
                throw new System.ArgumentNullException("journeyID");
    
            if (trainID == null)
                throw new System.ArgumentNullException("trainID");
    
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append("events/event/trainpositionchanged/unsubscribe?");
            urlBuilder_.Append(System.Uri.EscapeDataString("clientID") + "=").Append(System.Uri.EscapeDataString(ConvertToString(clientID, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            urlBuilder_.Append(System.Uri.EscapeDataString("journeyID") + "=").Append(System.Uri.EscapeDataString(ConvertToString(journeyID, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            urlBuilder_.Append(System.Uri.EscapeDataString("trainID") + "=").Append(System.Uri.EscapeDataString(ConvertToString(trainID, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            urlBuilder_.Length--;
    
            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));
    
                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);
    
                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }
    
                        ProcessResponse(client_, response_);
    
                        var status_ = (int)response_.StatusCode;
                        if (status_ == 500)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorResponse>(response_, headers_).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<ErrorResponse>("API Exception", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<EventTrainPositionUnsubscribeResponse>(response_, headers_).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }
    
        /// <param name="evaNumbers">list of eva numbers of stations [Bahnhoefe] to get board for</param>
        /// <param name="timeStart">start time for board as full qualified datetime, if omitted current time will be used</param>
        /// <param name="timeEnd">end time for board as full qualified datetime, if omitted current time plus 30 minutes will be used</param>
        /// <param name="includeStationGroup">should all stations of group the passed eva numbers belong to (for instance a request to 'FFM Hoch' would also return 'FFM tief') be included</param>
        /// <param name="filterTransports">filter for transport types that should be returned, if ommitted all types of transport are returned</param>
        /// <param name="maxViaStops">limits amount of via stops per transport (limitation doesn't apply to additional and canceled stops), if ommitted all via stops are returned, if zero no via stops are returned</param>
        /// <param name="maxTransportsPerType">limits amount of results per transport type, if ommitted no truncation is applied</param>
        /// <param name="sortBy">define sorting order, if omitted sorting is by TIME
        /// - TIME (Sorting based on best known time information ie real before preview before schedule)
        /// - TIME_SCHEDULE (Sorting based on schedule time)</param>
        /// <param name="innoSollfahrplan">inno: controls whether to include scheduled timetable [Sollfahrplan] or not</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task<BoardPublicArrival> BoardArrivalAsync(System.Collections.Generic.IEnumerable<string> evaNumbers, System.DateTimeOffset? timeStart, System.DateTimeOffset? timeEnd, bool? includeStationGroup, System.Collections.Generic.IEnumerable<TransportType> filterTransports, int? maxViaStops, int? maxTransportsPerType, SortKeyTime? sortBy, bool? innoSollfahrplan)
        {
            return BoardArrivalAsync(evaNumbers, timeStart, timeEnd, includeStationGroup, filterTransports, maxViaStops, maxTransportsPerType, sortBy, innoSollfahrplan, System.Threading.CancellationToken.None);
        }
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <param name="evaNumbers">list of eva numbers of stations [Bahnhoefe] to get board for</param>
        /// <param name="timeStart">start time for board as full qualified datetime, if omitted current time will be used</param>
        /// <param name="timeEnd">end time for board as full qualified datetime, if omitted current time plus 30 minutes will be used</param>
        /// <param name="includeStationGroup">should all stations of group the passed eva numbers belong to (for instance a request to 'FFM Hoch' would also return 'FFM tief') be included</param>
        /// <param name="filterTransports">filter for transport types that should be returned, if ommitted all types of transport are returned</param>
        /// <param name="maxViaStops">limits amount of via stops per transport (limitation doesn't apply to additional and canceled stops), if ommitted all via stops are returned, if zero no via stops are returned</param>
        /// <param name="maxTransportsPerType">limits amount of results per transport type, if ommitted no truncation is applied</param>
        /// <param name="sortBy">define sorting order, if omitted sorting is by TIME
        /// - TIME (Sorting based on best known time information ie real before preview before schedule)
        /// - TIME_SCHEDULE (Sorting based on schedule time)</param>
        /// <param name="innoSollfahrplan">inno: controls whether to include scheduled timetable [Sollfahrplan] or not</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task<BoardPublicArrival> BoardArrivalAsync(System.Collections.Generic.IEnumerable<string> evaNumbers, System.DateTimeOffset? timeStart, System.DateTimeOffset? timeEnd, bool? includeStationGroup, System.Collections.Generic.IEnumerable<TransportType> filterTransports, int? maxViaStops, int? maxTransportsPerType, SortKeyTime? sortBy, bool? innoSollfahrplan, System.Threading.CancellationToken cancellationToken)
        {
            if (evaNumbers == null)
                throw new System.ArgumentNullException("evaNumbers");
    
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append("boards/boards/public/arrival/{evaNumbers}?");
            urlBuilder_.Replace("{evaNumbers}", System.Uri.EscapeDataString(string.Join(",", System.Linq.Enumerable.Select(evaNumbers, s_ => ConvertToString(s_, System.Globalization.CultureInfo.InvariantCulture)))));
            if (timeStart != null) 
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("timeStart") + "=").Append(System.Uri.EscapeDataString(timeStart.Value.ToString("s", System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (timeEnd != null) 
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("timeEnd") + "=").Append(System.Uri.EscapeDataString(timeEnd.Value.ToString("s", System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (includeStationGroup != null) 
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("includeStationGroup") + "=").Append(System.Uri.EscapeDataString(ConvertToString(includeStationGroup, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (filterTransports != null) 
            {
                foreach (var item_ in filterTransports) { urlBuilder_.Append(System.Uri.EscapeDataString("filterTransports") + "=").Append((item_ == null) ? "" : System.Uri.EscapeDataString(ConvertToString(item_, System.Globalization.CultureInfo.InvariantCulture))).Append("&"); }
            }
            if (maxViaStops != null) 
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("maxViaStops") + "=").Append(System.Uri.EscapeDataString(ConvertToString(maxViaStops, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (maxTransportsPerType != null) 
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("maxTransportsPerType") + "=").Append(System.Uri.EscapeDataString(ConvertToString(maxTransportsPerType, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (sortBy != null) 
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("sortBy") + "=").Append(System.Uri.EscapeDataString(ConvertToString(sortBy, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (innoSollfahrplan != null) 
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("innoSollfahrplan") + "=").Append(System.Uri.EscapeDataString(ConvertToString(innoSollfahrplan, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            urlBuilder_.Length--;
    
            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/vnd.de.db.ris+json"));
    
                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);
    
                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }
    
                        ProcessResponse(client_, response_);
    
                        var status_ = (int)response_.StatusCode;
                        if (status_ == 500)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorResponse>(response_, headers_).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<ErrorResponse>("API Exception", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<BoardPublicArrival>(response_, headers_).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }
    
        /// <param name="evaNumbers">list of eva numbers of stations [Bahnhoefe] to get board for</param>
        /// <param name="timeStart">start time for board as full qualified datetime, if omitted current time will be used</param>
        /// <param name="timeEnd">end time for board as full qualified datetime, if omitted current time plus 30 minutes will be used</param>
        /// <param name="includeStationGroup">should all stations of group the passed eva numbers belong to (for instance a request to 'FFM Hoch' would also return 'FFM tief') be included</param>
        /// <param name="filterTransports">filter for transport types that should be returned, if ommitted all types of transport are returned</param>
        /// <param name="maxViaStops">limits amount of via stops per transport (limitation doesn't apply to additional and canceled stops), if ommitted all via stops are returned, if zero no via stops are returned</param>
        /// <param name="maxTransportsPerType">limits amount of results per transport type, if ommitted no truncation is applied</param>
        /// <param name="sortBy">define sorting order, if omitted sorting is by TIME
        /// - TIME (Sorting based on best known time information ie real before preview before schedule)
        /// - TIME_SCHEDULE (Sorting based on schedule time)</param>
        /// <param name="innoSollfahrplan">inno: controls whether to include scheduled timetable [Sollfahrplan] or not</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task<BoardPublicDeparture> BoardDepartureAsync(System.Collections.Generic.IEnumerable<string> evaNumbers, System.DateTimeOffset? timeStart, System.DateTimeOffset? timeEnd, bool? includeStationGroup, System.Collections.Generic.IEnumerable<TransportType> filterTransports, int? maxViaStops, int? maxTransportsPerType, SortKeyTime? sortBy, bool? innoSollfahrplan)
        {
            return BoardDepartureAsync(evaNumbers, timeStart, timeEnd, includeStationGroup, filterTransports, maxViaStops, maxTransportsPerType, sortBy, innoSollfahrplan, System.Threading.CancellationToken.None);
        }
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <param name="evaNumbers">list of eva numbers of stations [Bahnhoefe] to get board for</param>
        /// <param name="timeStart">start time for board as full qualified datetime, if omitted current time will be used</param>
        /// <param name="timeEnd">end time for board as full qualified datetime, if omitted current time plus 30 minutes will be used</param>
        /// <param name="includeStationGroup">should all stations of group the passed eva numbers belong to (for instance a request to 'FFM Hoch' would also return 'FFM tief') be included</param>
        /// <param name="filterTransports">filter for transport types that should be returned, if ommitted all types of transport are returned</param>
        /// <param name="maxViaStops">limits amount of via stops per transport (limitation doesn't apply to additional and canceled stops), if ommitted all via stops are returned, if zero no via stops are returned</param>
        /// <param name="maxTransportsPerType">limits amount of results per transport type, if ommitted no truncation is applied</param>
        /// <param name="sortBy">define sorting order, if omitted sorting is by TIME
        /// - TIME (Sorting based on best known time information ie real before preview before schedule)
        /// - TIME_SCHEDULE (Sorting based on schedule time)</param>
        /// <param name="innoSollfahrplan">inno: controls whether to include scheduled timetable [Sollfahrplan] or not</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task<BoardPublicDeparture> BoardDepartureAsync(System.Collections.Generic.IEnumerable<string> evaNumbers, System.DateTimeOffset? timeStart, System.DateTimeOffset? timeEnd, bool? includeStationGroup, System.Collections.Generic.IEnumerable<TransportType> filterTransports, int? maxViaStops, int? maxTransportsPerType, SortKeyTime? sortBy, bool? innoSollfahrplan, System.Threading.CancellationToken cancellationToken)
        {
            if (evaNumbers == null)
                throw new System.ArgumentNullException("evaNumbers");
    
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append("boards/boards/public/departure/{evaNumbers}?");
            urlBuilder_.Replace("{evaNumbers}", System.Uri.EscapeDataString(string.Join(",", System.Linq.Enumerable.Select(evaNumbers, s_ => ConvertToString(s_, System.Globalization.CultureInfo.InvariantCulture)))));
            if (timeStart != null) 
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("timeStart") + "=").Append(System.Uri.EscapeDataString(timeStart.Value.ToString("s", System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (timeEnd != null) 
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("timeEnd") + "=").Append(System.Uri.EscapeDataString(timeEnd.Value.ToString("s", System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (includeStationGroup != null) 
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("includeStationGroup") + "=").Append(System.Uri.EscapeDataString(ConvertToString(includeStationGroup, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (filterTransports != null) 
            {
                foreach (var item_ in filterTransports) { urlBuilder_.Append(System.Uri.EscapeDataString("filterTransports") + "=").Append((item_ == null) ? "" : System.Uri.EscapeDataString(ConvertToString(item_, System.Globalization.CultureInfo.InvariantCulture))).Append("&"); }
            }
            if (maxViaStops != null) 
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("maxViaStops") + "=").Append(System.Uri.EscapeDataString(ConvertToString(maxViaStops, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (maxTransportsPerType != null) 
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("maxTransportsPerType") + "=").Append(System.Uri.EscapeDataString(ConvertToString(maxTransportsPerType, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (sortBy != null) 
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("sortBy") + "=").Append(System.Uri.EscapeDataString(ConvertToString(sortBy, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (innoSollfahrplan != null) 
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("innoSollfahrplan") + "=").Append(System.Uri.EscapeDataString(ConvertToString(innoSollfahrplan, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            urlBuilder_.Length--;
    
            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/vnd.de.db.ris+json"));
    
                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);
    
                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }
    
                        ProcessResponse(client_, response_);
    
                        var status_ = (int)response_.StatusCode;
                        if (status_ == 500)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorResponse>(response_, headers_).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<ErrorResponse>("API Exception", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<BoardPublicDeparture>(response_, headers_).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }
    
        /// <param name="evaNumber">eva number to return stop place [Haltestelle] keys for</param>
        /// <param name="keyType">filter mapped keys by specific key type, if omitted all keys are returned</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task<StopPlaceKeys> KeysAsync(string evaNumber, StopPlaceKeyType? keyType)
        {
            return KeysAsync(evaNumber, keyType, System.Threading.CancellationToken.None);
        }
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <param name="evaNumber">eva number to return stop place [Haltestelle] keys for</param>
        /// <param name="keyType">filter mapped keys by specific key type, if omitted all keys are returned</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task<StopPlaceKeys> KeysAsync(string evaNumber, StopPlaceKeyType? keyType, System.Threading.CancellationToken cancellationToken)
        {
            if (evaNumber == null)
                throw new System.ArgumentNullException("evaNumber");
    
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append("stop-places/{evaNumber}/keys?");
            urlBuilder_.Replace("{evaNumber}", System.Uri.EscapeDataString(ConvertToString(evaNumber, System.Globalization.CultureInfo.InvariantCulture)));
            if (keyType != null) 
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("keyType") + "=").Append(System.Uri.EscapeDataString(ConvertToString(keyType, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            urlBuilder_.Length--;
    
            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/vnd.de.db.ris+json"));
    
                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);
    
                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }
    
                        ProcessResponse(client_, response_);
    
                        var status_ = (int)response_.StatusCode;
                        if (status_ == 500)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorResponse>(response_, headers_).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<ErrorResponse>("API Exception", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<StopPlaceKeys>(response_, headers_).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }
    
        /// <param name="evaNumber">eva number of desired stop place [Haltestelle]</param>
        /// <param name="platform">name of desired platform</param>
        /// <param name="includeSectors">should sector information be included</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task<Platform> PlatformAsync(string evaNumber, string platform, bool? includeSectors)
        {
            return PlatformAsync(evaNumber, platform, includeSectors, System.Threading.CancellationToken.None);
        }
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <param name="evaNumber">eva number of desired stop place [Haltestelle]</param>
        /// <param name="platform">name of desired platform</param>
        /// <param name="includeSectors">should sector information be included</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task<Platform> PlatformAsync(string evaNumber, string platform, bool? includeSectors, System.Threading.CancellationToken cancellationToken)
        {
            if (evaNumber == null)
                throw new System.ArgumentNullException("evaNumber");
    
            if (platform == null)
                throw new System.ArgumentNullException("platform");
    
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append("stop-places/{evaNumber}/platforms/{platform}?");
            urlBuilder_.Replace("{evaNumber}", System.Uri.EscapeDataString(ConvertToString(evaNumber, System.Globalization.CultureInfo.InvariantCulture)));
            urlBuilder_.Replace("{platform}", System.Uri.EscapeDataString(ConvertToString(platform, System.Globalization.CultureInfo.InvariantCulture)));
            if (includeSectors != null) 
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("includeSectors") + "=").Append(System.Uri.EscapeDataString(ConvertToString(includeSectors, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            urlBuilder_.Length--;
    
            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/vnd.de.db.ris+json"));
    
                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);
    
                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }
    
                        ProcessResponse(client_, response_);
    
                        var status_ = (int)response_.StatusCode;
                        if (status_ == 500)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorResponse>(response_, headers_).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<ErrorResponse>("API Exception", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<Platform>(response_, headers_).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }
    
        /// <param name="evaNumber">eva number to return stop place [Haltestelle] for</param>
        /// <param name="locales">languages to include, defaults to DE only
        /// - DE (German)
        /// - EN (English)
        /// - FR (French)
        /// - IT (Italian)</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task<StopPlace> ByEvaNumberAsync(string evaNumber, System.Collections.Generic.IEnumerable<Locale> locales)
        {
            return ByEvaNumberAsync(evaNumber, locales, System.Threading.CancellationToken.None);
        }
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <param name="evaNumber">eva number to return stop place [Haltestelle] for</param>
        /// <param name="locales">languages to include, defaults to DE only
        /// - DE (German)
        /// - EN (English)
        /// - FR (French)
        /// - IT (Italian)</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task<StopPlace> ByEvaNumberAsync(string evaNumber, System.Collections.Generic.IEnumerable<Locale> locales, System.Threading.CancellationToken cancellationToken)
        {
            if (evaNumber == null)
                throw new System.ArgumentNullException("evaNumber");
    
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append("stop-places/{evaNumber}?");
            urlBuilder_.Replace("{evaNumber}", System.Uri.EscapeDataString(ConvertToString(evaNumber, System.Globalization.CultureInfo.InvariantCulture)));
            if (locales != null) 
            {
                foreach (var item_ in locales) { urlBuilder_.Append(System.Uri.EscapeDataString("locales") + "=").Append((item_ == null) ? "" : System.Uri.EscapeDataString(ConvertToString(item_, System.Globalization.CultureInfo.InvariantCulture))).Append("&"); }
            }
            urlBuilder_.Length--;
    
            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/vnd.de.db.ris+json"));
    
                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);
    
                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }
    
                        ProcessResponse(client_, response_);
    
                        var status_ = (int)response_.StatusCode;
                        if (status_ == 500)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorResponse>(response_, headers_).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<ErrorResponse>("API Exception", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<StopPlace>(response_, headers_).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }
    
        /// <param name="query">query for stop place names [Haltestellenname] to search for, use * for wildcards if necessary</param>
        /// <param name="longitude">optional geo reference position longitude</param>
        /// <param name="latitude">optional geo reference position latitude</param>
        /// <param name="radius">optional radius in meters around geo reference position to search for stop places matching query</param>
        /// <param name="sortBy">sorting for search results, if omitted RELEVANCE will be used
        /// - RELEVANCE (stop places are sorted by relevance descending (main stations etc. first))
        /// - QUERY_MATCH (stop places are sorted by matching the provided query string descending aka Levensthein Distance)</param>
        /// <param name="onlyValid">indicates whether only valid stop places should be returned, defaults to true</param>
        /// <param name="locales">languages to include, defaults to DE only
        /// - DE (German)
        /// - EN (English)
        /// - FR (French)
        /// - IT (Italian)</param>
        /// <param name="limit">limit parameter in order to limit total amount of results, defaults to 25</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task<StopPlaceSearchResults> ByNameAsync(string query, double? longitude, double? latitude, int? radius, StopPlaceSortKey? sortBy, bool? onlyValid, System.Collections.Generic.IEnumerable<Locale> locales, int? limit)
        {
            return ByNameAsync(query, longitude, latitude, radius, sortBy, onlyValid, locales, limit, System.Threading.CancellationToken.None);
        }
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <param name="query">query for stop place names [Haltestellenname] to search for, use * for wildcards if necessary</param>
        /// <param name="longitude">optional geo reference position longitude</param>
        /// <param name="latitude">optional geo reference position latitude</param>
        /// <param name="radius">optional radius in meters around geo reference position to search for stop places matching query</param>
        /// <param name="sortBy">sorting for search results, if omitted RELEVANCE will be used
        /// - RELEVANCE (stop places are sorted by relevance descending (main stations etc. first))
        /// - QUERY_MATCH (stop places are sorted by matching the provided query string descending aka Levensthein Distance)</param>
        /// <param name="onlyValid">indicates whether only valid stop places should be returned, defaults to true</param>
        /// <param name="locales">languages to include, defaults to DE only
        /// - DE (German)
        /// - EN (English)
        /// - FR (French)
        /// - IT (Italian)</param>
        /// <param name="limit">limit parameter in order to limit total amount of results, defaults to 25</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task<StopPlaceSearchResults> ByNameAsync(string query, double? longitude, double? latitude, int? radius, StopPlaceSortKey? sortBy, bool? onlyValid, System.Collections.Generic.IEnumerable<Locale> locales, int? limit, System.Threading.CancellationToken cancellationToken)
        {
            if (query == null)
                throw new System.ArgumentNullException("query");
    
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append("stop-places/byname/{query}?");
            urlBuilder_.Replace("{query}", System.Uri.EscapeDataString(ConvertToString(query, System.Globalization.CultureInfo.InvariantCulture)));
            if (longitude != null) 
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("longitude") + "=").Append(System.Uri.EscapeDataString(ConvertToString(longitude, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (latitude != null) 
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("latitude") + "=").Append(System.Uri.EscapeDataString(ConvertToString(latitude, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (radius != null) 
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("radius") + "=").Append(System.Uri.EscapeDataString(ConvertToString(radius, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (sortBy != null) 
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("sortBy") + "=").Append(System.Uri.EscapeDataString(ConvertToString(sortBy, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (onlyValid != null) 
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("onlyValid") + "=").Append(System.Uri.EscapeDataString(ConvertToString(onlyValid, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (locales != null) 
            {
                foreach (var item_ in locales) { urlBuilder_.Append(System.Uri.EscapeDataString("locales") + "=").Append((item_ == null) ? "" : System.Uri.EscapeDataString(ConvertToString(item_, System.Globalization.CultureInfo.InvariantCulture))).Append("&"); }
            }
            if (limit != null) 
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("limit") + "=").Append(System.Uri.EscapeDataString(ConvertToString(limit, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            urlBuilder_.Length--;
    
            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/vnd.de.db.ris+json"));
    
                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);
    
                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }
    
                        ProcessResponse(client_, response_);
    
                        var status_ = (int)response_.StatusCode;
                        if (status_ == 500)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorResponse>(response_, headers_).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<ErrorResponse>("API Exception", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<StopPlaceSearchResults>(response_, headers_).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }
    
        /// <param name="longitude">geo position longitude</param>
        /// <param name="latitude">geo position latitude</param>
        /// <param name="radius">radius in meters around geo position</param>
        /// <param name="onlyValid">indicates whether only valid stop places should be returned, defaults to true</param>
        /// <param name="locales">languages to include, defaults to DE only
        /// - DE (German)
        /// - EN (English)
        /// - FR (French)
        /// - IT (Italian)</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task<StopPlaces> ByPositionAsync(double longitude, double latitude, int? radius, bool? onlyValid, System.Collections.Generic.IEnumerable<Locale> locales)
        {
            return ByPositionAsync(longitude, latitude, radius, onlyValid, locales, System.Threading.CancellationToken.None);
        }
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <param name="longitude">geo position longitude</param>
        /// <param name="latitude">geo position latitude</param>
        /// <param name="radius">radius in meters around geo position</param>
        /// <param name="onlyValid">indicates whether only valid stop places should be returned, defaults to true</param>
        /// <param name="locales">languages to include, defaults to DE only
        /// - DE (German)
        /// - EN (English)
        /// - FR (French)
        /// - IT (Italian)</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task<StopPlaces> ByPositionAsync(double longitude, double latitude, int? radius, bool? onlyValid, System.Collections.Generic.IEnumerable<Locale> locales, System.Threading.CancellationToken cancellationToken)
        {
            if (longitude == null)
                throw new System.ArgumentNullException("longitude");
    
            if (latitude == null)
                throw new System.ArgumentNullException("latitude");
    
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append("stop-places/bygeoposition/{longitude}/{latitude}?");
            urlBuilder_.Replace("{longitude}", System.Uri.EscapeDataString(ConvertToString(longitude, System.Globalization.CultureInfo.InvariantCulture)));
            urlBuilder_.Replace("{latitude}", System.Uri.EscapeDataString(ConvertToString(latitude, System.Globalization.CultureInfo.InvariantCulture)));
            if (radius != null) 
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("radius") + "=").Append(System.Uri.EscapeDataString(ConvertToString(radius, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (onlyValid != null) 
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("onlyValid") + "=").Append(System.Uri.EscapeDataString(ConvertToString(onlyValid, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (locales != null) 
            {
                foreach (var item_ in locales) { urlBuilder_.Append(System.Uri.EscapeDataString("locales") + "=").Append((item_ == null) ? "" : System.Uri.EscapeDataString(ConvertToString(item_, System.Globalization.CultureInfo.InvariantCulture))).Append("&"); }
            }
            urlBuilder_.Length--;
    
            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/vnd.de.db.ris+json"));
    
                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);
    
                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }
    
                        ProcessResponse(client_, response_);
    
                        var status_ = (int)response_.StatusCode;
                        if (status_ == 500)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorResponse>(response_, headers_).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<ErrorResponse>("API Exception", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<StopPlaces>(response_, headers_).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }
    
        /// <param name="evaNumber">eva number of desired stop place [Haltestelle]</param>
        /// <param name="group">stop place group [Station, Stadtgebiet, Umstiegsbereich] to consider connecting times for, defaults to STATION if omitted
        /// - STATION (group defined by station, for instance FFM = Hoch + Tief)</param>
        /// <param name="fromPlatform">platform to calculate times origin, if omitted all platforms are considered</param>
        /// <param name="fromSector">sector to calculate times origin, if omitted all sectors are considered</param>
        /// <param name="toPlatform">platform to calculate times destination, if omitted all platforms are considered</param>
        /// <param name="toSector">sector to calculate times destination, if omitted all sectors are considered</param>
        /// <param name="calculateSectors">should connecting times be calculated based on sector level, otherwise platform level</param>
        /// <param name="personaTypes">persona types that should be returned (if more than 1 is available), defaults to all personae if omitted</param>
        /// <param name="onlyRil420">only return RIL420 based connecting times (hence no INDOOR_ROUTING or FALLBACK), defaults to false meaning the best available connecting time source will be returned (1. INDOOR_ROUTING, 2. RIL420, 3. FALLBACK)</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task<ConnectingTimes> ConnectingTimesAsync(string evaNumber, StopPlaceGroupType? group, string fromPlatform, string fromSector, string toPlatform, string toSector, bool? calculateSectors, System.Collections.Generic.IEnumerable<PersonaType> personaTypes, bool? onlyRil420)
        {
            return ConnectingTimesAsync(evaNumber, group, fromPlatform, fromSector, toPlatform, toSector, calculateSectors, personaTypes, onlyRil420, System.Threading.CancellationToken.None);
        }
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <param name="evaNumber">eva number of desired stop place [Haltestelle]</param>
        /// <param name="group">stop place group [Station, Stadtgebiet, Umstiegsbereich] to consider connecting times for, defaults to STATION if omitted
        /// - STATION (group defined by station, for instance FFM = Hoch + Tief)</param>
        /// <param name="fromPlatform">platform to calculate times origin, if omitted all platforms are considered</param>
        /// <param name="fromSector">sector to calculate times origin, if omitted all sectors are considered</param>
        /// <param name="toPlatform">platform to calculate times destination, if omitted all platforms are considered</param>
        /// <param name="toSector">sector to calculate times destination, if omitted all sectors are considered</param>
        /// <param name="calculateSectors">should connecting times be calculated based on sector level, otherwise platform level</param>
        /// <param name="personaTypes">persona types that should be returned (if more than 1 is available), defaults to all personae if omitted</param>
        /// <param name="onlyRil420">only return RIL420 based connecting times (hence no INDOOR_ROUTING or FALLBACK), defaults to false meaning the best available connecting time source will be returned (1. INDOOR_ROUTING, 2. RIL420, 3. FALLBACK)</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task<ConnectingTimes> ConnectingTimesAsync(string evaNumber, StopPlaceGroupType? group, string fromPlatform, string fromSector, string toPlatform, string toSector, bool? calculateSectors, System.Collections.Generic.IEnumerable<PersonaType> personaTypes, bool? onlyRil420, System.Threading.CancellationToken cancellationToken)
        {
            if (evaNumber == null)
                throw new System.ArgumentNullException("evaNumber");
    
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append("stop-places/{evaNumber}/connecting-times?");
            urlBuilder_.Replace("{evaNumber}", System.Uri.EscapeDataString(ConvertToString(evaNumber, System.Globalization.CultureInfo.InvariantCulture)));
            if (group != null) 
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("group") + "=").Append(System.Uri.EscapeDataString(ConvertToString(group, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (fromPlatform != null) 
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("fromPlatform") + "=").Append(System.Uri.EscapeDataString(ConvertToString(fromPlatform, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (fromSector != null) 
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("fromSector") + "=").Append(System.Uri.EscapeDataString(ConvertToString(fromSector, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (toPlatform != null) 
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("toPlatform") + "=").Append(System.Uri.EscapeDataString(ConvertToString(toPlatform, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (toSector != null) 
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("toSector") + "=").Append(System.Uri.EscapeDataString(ConvertToString(toSector, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (calculateSectors != null) 
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("calculateSectors") + "=").Append(System.Uri.EscapeDataString(ConvertToString(calculateSectors, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (personaTypes != null) 
            {
                foreach (var item_ in personaTypes) { urlBuilder_.Append(System.Uri.EscapeDataString("personaTypes") + "=").Append((item_ == null) ? "" : System.Uri.EscapeDataString(ConvertToString(item_, System.Globalization.CultureInfo.InvariantCulture))).Append("&"); }
            }
            if (onlyRil420 != null) 
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("onlyRil420") + "=").Append(System.Uri.EscapeDataString(ConvertToString(onlyRil420, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            urlBuilder_.Length--;
    
            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/vnd.de.db.ris+json"));
    
                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);
    
                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }
    
                        ProcessResponse(client_, response_);
    
                        var status_ = (int)response_.StatusCode;
                        if (status_ == 500)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorResponse>(response_, headers_).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<ErrorResponse>("API Exception", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ConnectingTimes>(response_, headers_).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }
    
        /// <param name="evaNumber">eva number of desired stop place [Haltestelle]</param>
        /// <param name="includeSectors">should sector information be included</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task<Platforms> PlatformsAsync(string evaNumber, bool? includeSectors)
        {
            return PlatformsAsync(evaNumber, includeSectors, System.Threading.CancellationToken.None);
        }
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <param name="evaNumber">eva number of desired stop place [Haltestelle]</param>
        /// <param name="includeSectors">should sector information be included</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task<Platforms> PlatformsAsync(string evaNumber, bool? includeSectors, System.Threading.CancellationToken cancellationToken)
        {
            if (evaNumber == null)
                throw new System.ArgumentNullException("evaNumber");
    
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append("stop-places/{evaNumber}/platforms?");
            urlBuilder_.Replace("{evaNumber}", System.Uri.EscapeDataString(ConvertToString(evaNumber, System.Globalization.CultureInfo.InvariantCulture)));
            if (includeSectors != null) 
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("includeSectors") + "=").Append(System.Uri.EscapeDataString(ConvertToString(includeSectors, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            urlBuilder_.Length--;
    
            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/vnd.de.db.ris+json"));
    
                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);
    
                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }
    
                        ProcessResponse(client_, response_);
    
                        var status_ = (int)response_.StatusCode;
                        if (status_ == 500)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorResponse>(response_, headers_).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<ErrorResponse>("API Exception", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<Platforms>(response_, headers_).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }
    
        /// <param name="evaNumber">eva number of desired stop place [Haltestelle]</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task<OperationalPlatforms> PlatformsOperationalAsync(string evaNumber)
        {
            return PlatformsOperationalAsync(evaNumber, System.Threading.CancellationToken.None);
        }
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <param name="evaNumber">eva number of desired stop place [Haltestelle]</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task<OperationalPlatforms> PlatformsOperationalAsync(string evaNumber, System.Threading.CancellationToken cancellationToken)
        {
            if (evaNumber == null)
                throw new System.ArgumentNullException("evaNumber");
    
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append("stop-places/{evaNumber}/platforms/operational");
            urlBuilder_.Replace("{evaNumber}", System.Uri.EscapeDataString(ConvertToString(evaNumber, System.Globalization.CultureInfo.InvariantCulture)));
    
            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/vnd.de.db.ris+json"));
    
                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);
    
                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }
    
                        ProcessResponse(client_, response_);
    
                        var status_ = (int)response_.StatusCode;
                        if (status_ == 500)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorResponse>(response_, headers_).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<ErrorResponse>("API Exception", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<OperationalPlatforms>(response_, headers_).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }
    
        /// <param name="keyType">type of stop place keye
        /// - IFOPT (transmodel identifier for fixed objects, in germany dhid = Deutschlandweitee Halte ID)
        /// - EVA (eva number)
        /// - RL100 (rl100 / ds100)
        /// - EPA (epa uic number)
        /// - STADA (statitionsdatenbank number)
        /// - IBNR (interne bahnhofsnummer)</param>
        /// <param name="key">key to return stop places [Haltestellen] for</param>
        /// <param name="locales">languages to include, defaults to DE only
        /// - DE (German)
        /// - EN (English)
        /// - FR (French)
        /// - IT (Italian)</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task<StopPlaces> ByKeyAsync(StopPlaceKeyType keyType, string key, System.Collections.Generic.IEnumerable<Locale> locales)
        {
            return ByKeyAsync(keyType, key, locales, System.Threading.CancellationToken.None);
        }
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <param name="keyType">type of stop place keye
        /// - IFOPT (transmodel identifier for fixed objects, in germany dhid = Deutschlandweitee Halte ID)
        /// - EVA (eva number)
        /// - RL100 (rl100 / ds100)
        /// - EPA (epa uic number)
        /// - STADA (statitionsdatenbank number)
        /// - IBNR (interne bahnhofsnummer)</param>
        /// <param name="key">key to return stop places [Haltestellen] for</param>
        /// <param name="locales">languages to include, defaults to DE only
        /// - DE (German)
        /// - EN (English)
        /// - FR (French)
        /// - IT (Italian)</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task<StopPlaces> ByKeyAsync(StopPlaceKeyType keyType, string key, System.Collections.Generic.IEnumerable<Locale> locales, System.Threading.CancellationToken cancellationToken)
        {
            if (keyType == null)
                throw new System.ArgumentNullException("keyType");
    
            if (key == null)
                throw new System.ArgumentNullException("key");
    
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append("stop-places/bykey/{keyType}/{key}?");
            urlBuilder_.Replace("{keyType}", System.Uri.EscapeDataString(ConvertToString(keyType, System.Globalization.CultureInfo.InvariantCulture)));
            urlBuilder_.Replace("{key}", System.Uri.EscapeDataString(ConvertToString(key, System.Globalization.CultureInfo.InvariantCulture)));
            if (locales != null) 
            {
                foreach (var item_ in locales) { urlBuilder_.Append(System.Uri.EscapeDataString("locales") + "=").Append((item_ == null) ? "" : System.Uri.EscapeDataString(ConvertToString(item_, System.Globalization.CultureInfo.InvariantCulture))).Append("&"); }
            }
            urlBuilder_.Length--;
    
            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/vnd.de.db.ris+json"));
    
                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);
    
                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }
    
                        ProcessResponse(client_, response_);
    
                        var status_ = (int)response_.StatusCode;
                        if (status_ == 500)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorResponse>(response_, headers_).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<ErrorResponse>("API Exception", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<StopPlaces>(response_, headers_).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }
    
        /// <param name="longitude">geo position longitude</param>
        /// <param name="latitude">geo position latitude</param>
        /// <param name="time">time you want to know the whether for</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task<Weather> WeatherAsync(double longitude, double latitude, System.DateTimeOffset time)
        {
            return WeatherAsync(longitude, latitude, time, System.Threading.CancellationToken.None);
        }
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <param name="longitude">geo position longitude</param>
        /// <param name="latitude">geo position latitude</param>
        /// <param name="time">time you want to know the whether for</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task<Weather> WeatherAsync(double longitude, double latitude, System.DateTimeOffset time, System.Threading.CancellationToken cancellationToken)
        {
            if (longitude == null)
                throw new System.ArgumentNullException("longitude");
    
            if (latitude == null)
                throw new System.ArgumentNullException("latitude");
    
            if (time == null)
                throw new System.ArgumentNullException("time");
    
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append("misc/wheather/byposition?");
            urlBuilder_.Append(System.Uri.EscapeDataString("longitude") + "=").Append(System.Uri.EscapeDataString(ConvertToString(longitude, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            urlBuilder_.Append(System.Uri.EscapeDataString("latitude") + "=").Append(System.Uri.EscapeDataString(ConvertToString(latitude, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            urlBuilder_.Append(System.Uri.EscapeDataString("time") + "=").Append(System.Uri.EscapeDataString(time.ToString("s", System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            urlBuilder_.Length--;
    
            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/vnd.de.db.ris+json"));
    
                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);
    
                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }
    
                        ProcessResponse(client_, response_);
    
                        var status_ = (int)response_.StatusCode;
                        if (status_ == 500)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorResponse>(response_, headers_).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<ErrorResponse>("API Exception", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<Weather>(response_, headers_).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }
    
        /// <param name="evaNumbers">list of eva numbers of stations [Bahnhoefe] to get board for</param>
        /// <param name="timeStart">start time for board as full qualified datetime (yyyy-MM-ddTHH:mm:ssZ), if omitted current time will be used</param>
        /// <param name="timeEnd">end time for board as full qualified datetime (yyyy-MM-ddTHH:mm:ssZ), if omitted current time plus 30 minutes will be used</param>
        /// <param name="includeStationGroup">should all stations of group the requested eva numbers belong to (for instance a request to 'FFM Hoch' would also return 'FFM tief') be included</param>
        /// <param name="filterTransports">filter for transport types that should be returned, if ommitted all types of transport are returned</param>
        /// <param name="maxViaStops">limits amount of via stops per transport (limitation doesn't apply to additional and canceled stops), if ommitted all via stops are returned, if zero no via stops are returned</param>
        /// <param name="maxTransportsPerType">limits amount of results per transport type, if ommitted no truncation is applied</param>
        /// <param name="sortBy">define sorting order, if omitted sorting is by TIME
        /// - TIME (Sorting based on best known time information ie real before preview before schedule)
        /// - TIME_SCHEDULE (Sorting based on schedule time)</param>
        /// <param name="positionLevel">reference position level for calculating walk durations from, if ommitted, no walk durations are calculated</param>
        /// <param name="positionLongitude">reference position longitude for calculating walk durations from, if ommitted, no walk durations are calculated</param>
        /// <param name="positionLatitude">reference position latitude for calculating walk durations from, if ommitted, no walk durations are calculated</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task<BoardMultiDeparture> BoardDepartureMultimodalAsync(System.Collections.Generic.IEnumerable<string> evaNumbers, System.DateTimeOffset? timeStart, System.DateTimeOffset? timeEnd, bool? includeStationGroup, System.Collections.Generic.IEnumerable<TransportType> filterTransports, int? maxViaStops, int? maxTransportsPerType, SortKeyTime? sortBy, IndoorLevel? positionLevel, double? positionLongitude, double? positionLatitude)
        {
            return BoardDepartureMultimodalAsync(evaNumbers, timeStart, timeEnd, includeStationGroup, filterTransports, maxViaStops, maxTransportsPerType, sortBy, positionLevel, positionLongitude, positionLatitude, System.Threading.CancellationToken.None);
        }
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <param name="evaNumbers">list of eva numbers of stations [Bahnhoefe] to get board for</param>
        /// <param name="timeStart">start time for board as full qualified datetime (yyyy-MM-ddTHH:mm:ssZ), if omitted current time will be used</param>
        /// <param name="timeEnd">end time for board as full qualified datetime (yyyy-MM-ddTHH:mm:ssZ), if omitted current time plus 30 minutes will be used</param>
        /// <param name="includeStationGroup">should all stations of group the requested eva numbers belong to (for instance a request to 'FFM Hoch' would also return 'FFM tief') be included</param>
        /// <param name="filterTransports">filter for transport types that should be returned, if ommitted all types of transport are returned</param>
        /// <param name="maxViaStops">limits amount of via stops per transport (limitation doesn't apply to additional and canceled stops), if ommitted all via stops are returned, if zero no via stops are returned</param>
        /// <param name="maxTransportsPerType">limits amount of results per transport type, if ommitted no truncation is applied</param>
        /// <param name="sortBy">define sorting order, if omitted sorting is by TIME
        /// - TIME (Sorting based on best known time information ie real before preview before schedule)
        /// - TIME_SCHEDULE (Sorting based on schedule time)</param>
        /// <param name="positionLevel">reference position level for calculating walk durations from, if ommitted, no walk durations are calculated</param>
        /// <param name="positionLongitude">reference position longitude for calculating walk durations from, if ommitted, no walk durations are calculated</param>
        /// <param name="positionLatitude">reference position latitude for calculating walk durations from, if ommitted, no walk durations are calculated</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task<BoardMultiDeparture> BoardDepartureMultimodalAsync(System.Collections.Generic.IEnumerable<string> evaNumbers, System.DateTimeOffset? timeStart, System.DateTimeOffset? timeEnd, bool? includeStationGroup, System.Collections.Generic.IEnumerable<TransportType> filterTransports, int? maxViaStops, int? maxTransportsPerType, SortKeyTime? sortBy, IndoorLevel? positionLevel, double? positionLongitude, double? positionLatitude, System.Threading.CancellationToken cancellationToken)
        {
            if (evaNumbers == null)
                throw new System.ArgumentNullException("evaNumbers");
    
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append("boards/multimodal/departures/{evaNumbers}?");
            urlBuilder_.Replace("{evaNumbers}", System.Uri.EscapeDataString(string.Join(",", System.Linq.Enumerable.Select(evaNumbers, s_ => ConvertToString(s_, System.Globalization.CultureInfo.InvariantCulture)))));
            if (timeStart != null) 
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("timeStart") + "=").Append(System.Uri.EscapeDataString(timeStart.Value.ToString("s", System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (timeEnd != null) 
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("timeEnd") + "=").Append(System.Uri.EscapeDataString(timeEnd.Value.ToString("s", System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (includeStationGroup != null) 
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("includeStationGroup") + "=").Append(System.Uri.EscapeDataString(ConvertToString(includeStationGroup, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (filterTransports != null) 
            {
                foreach (var item_ in filterTransports) { urlBuilder_.Append(System.Uri.EscapeDataString("filterTransports") + "=").Append((item_ == null) ? "" : System.Uri.EscapeDataString(ConvertToString(item_, System.Globalization.CultureInfo.InvariantCulture))).Append("&"); }
            }
            if (maxViaStops != null) 
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("maxViaStops") + "=").Append(System.Uri.EscapeDataString(ConvertToString(maxViaStops, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (maxTransportsPerType != null) 
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("maxTransportsPerType") + "=").Append(System.Uri.EscapeDataString(ConvertToString(maxTransportsPerType, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (sortBy != null) 
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("sortBy") + "=").Append(System.Uri.EscapeDataString(ConvertToString(sortBy, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (positionLevel != null) 
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("positionLevel") + "=").Append(System.Uri.EscapeDataString(ConvertToString(positionLevel, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (positionLongitude != null) 
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("positionLongitude") + "=").Append(System.Uri.EscapeDataString(ConvertToString(positionLongitude, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (positionLatitude != null) 
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("positionLatitude") + "=").Append(System.Uri.EscapeDataString(ConvertToString(positionLatitude, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            urlBuilder_.Length--;
    
            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/vnd.de.db.ris+json"));
    
                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);
    
                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }
    
                        ProcessResponse(client_, response_);
    
                        var status_ = (int)response_.StatusCode;
                        if (status_ == 500)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorResponse>(response_, headers_).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<ErrorResponse>("API Exception", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<BoardMultiDeparture>(response_, headers_).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }
    
        /// <param name="evaNumbers">list of eva numbers of stations [Bahnhoefe] to get board for</param>
        /// <param name="timeStart">start time for board as full qualified datetime (yyyy-MM-ddTHH:mm:ssZ), if omitted current time will be used</param>
        /// <param name="timeEnd">end time for board as full qualified datetime (yyyy-MM-ddTHH:mm:ssZ), if omitted current time plus 30 minutes will be used</param>
        /// <param name="includeStationGroup">should all stations of group the requested eva numbers belong to (for instance a request to 'FFM Hoch' would also return 'FFM tief') be included</param>
        /// <param name="filterTransports">filter for transport types that should be returned, if ommitted all types of transport are returned</param>
        /// <param name="maxViaStops">limits amount of via stops per transport (limitation doesn't apply to additional and canceled stops), if ommitted all via stops are returned, if zero no via stops are returned</param>
        /// <param name="maxTransportsPerType">limits amount of results per transport type, if ommitted no truncation is applied</param>
        /// <param name="sortBy">define sorting order, if omitted sorting is by TIME
        /// - TIME (Sorting based on best known time information ie real before preview before schedule)
        /// - TIME_SCHEDULE (Sorting based on schedule time)</param>
        /// <param name="positionLevel">reference position level for calculating walk durations from, if ommitted, no walk durations are calculated</param>
        /// <param name="positionLongitude">reference position longitude for calculating walk durations from, if ommitted, no walk durations are calculated</param>
        /// <param name="positionLatitude">reference position latitude for calculating walk durations from, f ommitted, no walk durations are calculated</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task<BoardMultiArrival> BoardArrivalMultimodalAsync(System.Collections.Generic.IEnumerable<string> evaNumbers, System.DateTimeOffset? timeStart, System.DateTimeOffset? timeEnd, bool? includeStationGroup, System.Collections.Generic.IEnumerable<TransportType> filterTransports, int? maxViaStops, int? maxTransportsPerType, SortKeyTime? sortBy, IndoorLevel? positionLevel, double? positionLongitude, double? positionLatitude)
        {
            return BoardArrivalMultimodalAsync(evaNumbers, timeStart, timeEnd, includeStationGroup, filterTransports, maxViaStops, maxTransportsPerType, sortBy, positionLevel, positionLongitude, positionLatitude, System.Threading.CancellationToken.None);
        }
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <param name="evaNumbers">list of eva numbers of stations [Bahnhoefe] to get board for</param>
        /// <param name="timeStart">start time for board as full qualified datetime (yyyy-MM-ddTHH:mm:ssZ), if omitted current time will be used</param>
        /// <param name="timeEnd">end time for board as full qualified datetime (yyyy-MM-ddTHH:mm:ssZ), if omitted current time plus 30 minutes will be used</param>
        /// <param name="includeStationGroup">should all stations of group the requested eva numbers belong to (for instance a request to 'FFM Hoch' would also return 'FFM tief') be included</param>
        /// <param name="filterTransports">filter for transport types that should be returned, if ommitted all types of transport are returned</param>
        /// <param name="maxViaStops">limits amount of via stops per transport (limitation doesn't apply to additional and canceled stops), if ommitted all via stops are returned, if zero no via stops are returned</param>
        /// <param name="maxTransportsPerType">limits amount of results per transport type, if ommitted no truncation is applied</param>
        /// <param name="sortBy">define sorting order, if omitted sorting is by TIME
        /// - TIME (Sorting based on best known time information ie real before preview before schedule)
        /// - TIME_SCHEDULE (Sorting based on schedule time)</param>
        /// <param name="positionLevel">reference position level for calculating walk durations from, if ommitted, no walk durations are calculated</param>
        /// <param name="positionLongitude">reference position longitude for calculating walk durations from, if ommitted, no walk durations are calculated</param>
        /// <param name="positionLatitude">reference position latitude for calculating walk durations from, f ommitted, no walk durations are calculated</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task<BoardMultiArrival> BoardArrivalMultimodalAsync(System.Collections.Generic.IEnumerable<string> evaNumbers, System.DateTimeOffset? timeStart, System.DateTimeOffset? timeEnd, bool? includeStationGroup, System.Collections.Generic.IEnumerable<TransportType> filterTransports, int? maxViaStops, int? maxTransportsPerType, SortKeyTime? sortBy, IndoorLevel? positionLevel, double? positionLongitude, double? positionLatitude, System.Threading.CancellationToken cancellationToken)
        {
            if (evaNumbers == null)
                throw new System.ArgumentNullException("evaNumbers");
    
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append("boards/multimodal/arrivals/{evaNumbers}?");
            urlBuilder_.Replace("{evaNumbers}", System.Uri.EscapeDataString(string.Join(",", System.Linq.Enumerable.Select(evaNumbers, s_ => ConvertToString(s_, System.Globalization.CultureInfo.InvariantCulture)))));
            if (timeStart != null) 
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("timeStart") + "=").Append(System.Uri.EscapeDataString(timeStart.Value.ToString("s", System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (timeEnd != null) 
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("timeEnd") + "=").Append(System.Uri.EscapeDataString(timeEnd.Value.ToString("s", System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (includeStationGroup != null) 
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("includeStationGroup") + "=").Append(System.Uri.EscapeDataString(ConvertToString(includeStationGroup, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (filterTransports != null) 
            {
                foreach (var item_ in filterTransports) { urlBuilder_.Append(System.Uri.EscapeDataString("filterTransports") + "=").Append((item_ == null) ? "" : System.Uri.EscapeDataString(ConvertToString(item_, System.Globalization.CultureInfo.InvariantCulture))).Append("&"); }
            }
            if (maxViaStops != null) 
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("maxViaStops") + "=").Append(System.Uri.EscapeDataString(ConvertToString(maxViaStops, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (maxTransportsPerType != null) 
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("maxTransportsPerType") + "=").Append(System.Uri.EscapeDataString(ConvertToString(maxTransportsPerType, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (sortBy != null) 
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("sortBy") + "=").Append(System.Uri.EscapeDataString(ConvertToString(sortBy, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (positionLevel != null) 
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("positionLevel") + "=").Append(System.Uri.EscapeDataString(ConvertToString(positionLevel, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (positionLongitude != null) 
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("positionLongitude") + "=").Append(System.Uri.EscapeDataString(ConvertToString(positionLongitude, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (positionLatitude != null) 
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("positionLatitude") + "=").Append(System.Uri.EscapeDataString(ConvertToString(positionLatitude, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            urlBuilder_.Length--;
    
            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/vnd.de.db.ris+json"));
    
                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);
    
                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }
    
                        ProcessResponse(client_, response_);
    
                        var status_ = (int)response_.StatusCode;
                        if (status_ == 500)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorResponse>(response_, headers_).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<ErrorResponse>("API Exception", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<BoardMultiArrival>(response_, headers_).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }
    
        /// <param name="date">date (yyyy-MM-dd) of scheduled start of journey [Verkehrstag], if omitted defaults to today</param>
        /// <param name="number">number of transport [Fahrtnummer]</param>
        /// <param name="administrationID">administration [Verwaltung] id</param>
        /// <param name="originEvaNumber">scheduled origin station [Geplanter Starthalt]</param>
        /// <param name="destinationEvaNumber">scheduled destination station [Geplanter Zielhalt]</param>
        /// <param name="transports">transport types that should be returned, if ommitted all types of transport are returned</param>
        /// <param name="category">category of transport [Fahrtgattung]</param>
        /// <param name="line">line of transport [Linie]</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task<JourneyMatches> FindAsync(System.DateTimeOffset? date, int number, string administrationID, string originEvaNumber, string destinationEvaNumber, System.Collections.Generic.IEnumerable<TransportType> transports, string category, string line)
        {
            return FindAsync(date, number, administrationID, originEvaNumber, destinationEvaNumber, transports, category, line, System.Threading.CancellationToken.None);
        }
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <param name="date">date (yyyy-MM-dd) of scheduled start of journey [Verkehrstag], if omitted defaults to today</param>
        /// <param name="number">number of transport [Fahrtnummer]</param>
        /// <param name="administrationID">administration [Verwaltung] id</param>
        /// <param name="originEvaNumber">scheduled origin station [Geplanter Starthalt]</param>
        /// <param name="destinationEvaNumber">scheduled destination station [Geplanter Zielhalt]</param>
        /// <param name="transports">transport types that should be returned, if ommitted all types of transport are returned</param>
        /// <param name="category">category of transport [Fahrtgattung]</param>
        /// <param name="line">line of transport [Linie]</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task<JourneyMatches> FindAsync(System.DateTimeOffset? date, int number, string administrationID, string originEvaNumber, string destinationEvaNumber, System.Collections.Generic.IEnumerable<TransportType> transports, string category, string line, System.Threading.CancellationToken cancellationToken)
        {
            if (number == null)
                throw new System.ArgumentNullException("number");
    
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append("journeys/byrelation?");
            if (date != null) 
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("date") + "=").Append(System.Uri.EscapeDataString(date.Value.ToString("yyyy-MM-dd", System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            urlBuilder_.Append(System.Uri.EscapeDataString("number") + "=").Append(System.Uri.EscapeDataString(ConvertToString(number, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            if (administrationID != null) 
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("administrationID") + "=").Append(System.Uri.EscapeDataString(ConvertToString(administrationID, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (originEvaNumber != null) 
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("originEvaNumber") + "=").Append(System.Uri.EscapeDataString(ConvertToString(originEvaNumber, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (destinationEvaNumber != null) 
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("destinationEvaNumber") + "=").Append(System.Uri.EscapeDataString(ConvertToString(destinationEvaNumber, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (transports != null) 
            {
                foreach (var item_ in transports) { urlBuilder_.Append(System.Uri.EscapeDataString("transports") + "=").Append((item_ == null) ? "" : System.Uri.EscapeDataString(ConvertToString(item_, System.Globalization.CultureInfo.InvariantCulture))).Append("&"); }
            }
            if (category != null) 
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("category") + "=").Append(System.Uri.EscapeDataString(ConvertToString(category, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (line != null) 
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("line") + "=").Append(System.Uri.EscapeDataString(ConvertToString(line, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            urlBuilder_.Length--;
    
            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/vnd.de.db.ris+json"));
    
                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);
    
                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }
    
                        ProcessResponse(client_, response_);
    
                        var status_ = (int)response_.StatusCode;
                        if (status_ == 500)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorResponse>(response_, headers_).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<ErrorResponse>("API Exception", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<JourneyMatches>(response_, headers_).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }
    
        /// <param name="date">date (yyyy-MM-dd) of scheduled start of journey [Verkehrstag]</param>
        /// <param name="category">category of transport [Fahrtgattung]</param>
        /// <param name="number">number of transport [Fahrtnummer]</param>
        /// <param name="evaNumber">departure station id [Haltestelle ID] for desired departure</param>
        /// <param name="timeSchedule">scheduled departure time [Geplante Abfahrtszeit] for desired departure as full qualified datetime (yyyy-MM-ddTHH:mm:ssZ)</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task<DepartureMatches> FindDepartureAsync(System.DateTimeOffset date, string category, int number, string evaNumber, System.DateTimeOffset timeSchedule)
        {
            return FindDepartureAsync(date, category, number, evaNumber, timeSchedule, System.Threading.CancellationToken.None);
        }
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <param name="date">date (yyyy-MM-dd) of scheduled start of journey [Verkehrstag]</param>
        /// <param name="category">category of transport [Fahrtgattung]</param>
        /// <param name="number">number of transport [Fahrtnummer]</param>
        /// <param name="evaNumber">departure station id [Haltestelle ID] for desired departure</param>
        /// <param name="timeSchedule">scheduled departure time [Geplante Abfahrtszeit] for desired departure as full qualified datetime (yyyy-MM-ddTHH:mm:ssZ)</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task<DepartureMatches> FindDepartureAsync(System.DateTimeOffset date, string category, int number, string evaNumber, System.DateTimeOffset timeSchedule, System.Threading.CancellationToken cancellationToken)
        {
            if (date == null)
                throw new System.ArgumentNullException("date");
    
            if (category == null)
                throw new System.ArgumentNullException("category");
    
            if (number == null)
                throw new System.ArgumentNullException("number");
    
            if (evaNumber == null)
                throw new System.ArgumentNullException("evaNumber");
    
            if (timeSchedule == null)
                throw new System.ArgumentNullException("timeSchedule");
    
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append("journeys/departures/byrelation?");
            urlBuilder_.Append(System.Uri.EscapeDataString("date") + "=").Append(System.Uri.EscapeDataString(date.ToString("yyyy-MM-dd", System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            urlBuilder_.Append(System.Uri.EscapeDataString("category") + "=").Append(System.Uri.EscapeDataString(ConvertToString(category, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            urlBuilder_.Append(System.Uri.EscapeDataString("number") + "=").Append(System.Uri.EscapeDataString(ConvertToString(number, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            urlBuilder_.Append(System.Uri.EscapeDataString("evaNumber") + "=").Append(System.Uri.EscapeDataString(ConvertToString(evaNumber, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            urlBuilder_.Append(System.Uri.EscapeDataString("timeSchedule") + "=").Append(System.Uri.EscapeDataString(timeSchedule.ToString("s", System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            urlBuilder_.Length--;
    
            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/vnd.de.db.ris+json"));
    
                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);
    
                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }
    
                        ProcessResponse(client_, response_);
    
                        var status_ = (int)response_.StatusCode;
                        if (status_ == 500)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorResponse>(response_, headers_).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<ErrorResponse>("API Exception", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<DepartureMatches>(response_, headers_).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }
    
        /// <param name="journeyID">id of journey [FahrtID]</param>
        /// <param name="includeCanceled">include canceled arrivals / departures</param>
        /// <param name="includeJourneyReferences">include journey references like relief [Entlastung], replace [Ersatz], continuation [Durchbindung], travelswith [Vereinigung / Fluegelung]</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task<JourneySegmentBased> JourneySegmentbasedByIdAsync(string journeyID, bool? includeCanceled, bool? includeJourneyReferences)
        {
            return JourneySegmentbasedByIdAsync(journeyID, includeCanceled, includeJourneyReferences, System.Threading.CancellationToken.None);
        }
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <param name="journeyID">id of journey [FahrtID]</param>
        /// <param name="includeCanceled">include canceled arrivals / departures</param>
        /// <param name="includeJourneyReferences">include journey references like relief [Entlastung], replace [Ersatz], continuation [Durchbindung], travelswith [Vereinigung / Fluegelung]</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task<JourneySegmentBased> JourneySegmentbasedByIdAsync(string journeyID, bool? includeCanceled, bool? includeJourneyReferences, System.Threading.CancellationToken cancellationToken)
        {
            if (journeyID == null)
                throw new System.ArgumentNullException("journeyID");
    
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append("journeys/segmentbased/{journeyID}?");
            urlBuilder_.Replace("{journeyID}", System.Uri.EscapeDataString(ConvertToString(journeyID, System.Globalization.CultureInfo.InvariantCulture)));
            if (includeCanceled != null) 
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("includeCanceled") + "=").Append(System.Uri.EscapeDataString(ConvertToString(includeCanceled, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (includeJourneyReferences != null) 
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("includeJourneyReferences") + "=").Append(System.Uri.EscapeDataString(ConvertToString(includeJourneyReferences, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            urlBuilder_.Length--;
    
            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/vnd.de.db.ris+json"));
    
                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);
    
                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }
    
                        ProcessResponse(client_, response_);
    
                        var status_ = (int)response_.StatusCode;
                        if (status_ == 500)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorResponse>(response_, headers_).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<ErrorResponse>("API Exception", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<JourneySegmentBased>(response_, headers_).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }
    
        /// <param name="journeyID">id of journey [FahrtID]</param>
        /// <param name="includeCanceled">include canceled arrivals / departures</param>
        /// <param name="includeJourneyReferences">include journey references like relief [Entlastung], replace [Ersatz], continuation [Durchbindung], travelswith [Vereinigung / Fluegelung]</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        [System.Obsolete]
        public System.Threading.Tasks.Task<JourneyEventBased> JourneyEventbasedByIdAsync(string journeyID, bool? includeCanceled, bool? includeJourneyReferences)
        {
            return JourneyEventbasedByIdAsync(journeyID, includeCanceled, includeJourneyReferences, System.Threading.CancellationToken.None);
        }
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <param name="journeyID">id of journey [FahrtID]</param>
        /// <param name="includeCanceled">include canceled arrivals / departures</param>
        /// <param name="includeJourneyReferences">include journey references like relief [Entlastung], replace [Ersatz], continuation [Durchbindung], travelswith [Vereinigung / Fluegelung]</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        [System.Obsolete]
        public async System.Threading.Tasks.Task<JourneyEventBased> JourneyEventbasedByIdAsync(string journeyID, bool? includeCanceled, bool? includeJourneyReferences, System.Threading.CancellationToken cancellationToken)
        {
            if (journeyID == null)
                throw new System.ArgumentNullException("journeyID");
    
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append("journeys/eventbased/{journeyID}?");
            urlBuilder_.Replace("{journeyID}", System.Uri.EscapeDataString(ConvertToString(journeyID, System.Globalization.CultureInfo.InvariantCulture)));
            if (includeCanceled != null) 
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("includeCanceled") + "=").Append(System.Uri.EscapeDataString(ConvertToString(includeCanceled, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (includeJourneyReferences != null) 
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("includeJourneyReferences") + "=").Append(System.Uri.EscapeDataString(ConvertToString(includeJourneyReferences, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            urlBuilder_.Length--;
    
            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/vnd.de.db.ris+json"));
    
                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);
    
                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }
    
                        ProcessResponse(client_, response_);
    
                        var status_ = (int)response_.StatusCode;
                        if (status_ == 500)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorResponse>(response_, headers_).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<ErrorResponse>("API Exception", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<JourneyEventBased>(response_, headers_).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }
    
        /// <param name="fromEvaNumber">eva number origin</param>
        /// <param name="fromLevel">indoor level origin (inside)</param>
        /// <param name="fromLongitude">geo position longitude origin (inside)</param>
        /// <param name="fromLatitude">geo position latitude origin (inside)</param>
        /// <param name="toLongitude">geo position longitude destination (outside)</param>
        /// <param name="toLatitude">geo position latitude destination (outside)</param>
        /// <param name="persona">persona type for routing (slow connections, no stairs etc.)</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task<Indoor2OutdoorRouting> RoutingIndoor2OutdoorAsync(string fromEvaNumber, IndoorLevel fromLevel, double fromLongitude, double fromLatitude, double toLongitude, double toLatitude, PersonaType? persona)
        {
            return RoutingIndoor2OutdoorAsync(fromEvaNumber, fromLevel, fromLongitude, fromLatitude, toLongitude, toLatitude, persona, System.Threading.CancellationToken.None);
        }
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <param name="fromEvaNumber">eva number origin</param>
        /// <param name="fromLevel">indoor level origin (inside)</param>
        /// <param name="fromLongitude">geo position longitude origin (inside)</param>
        /// <param name="fromLatitude">geo position latitude origin (inside)</param>
        /// <param name="toLongitude">geo position longitude destination (outside)</param>
        /// <param name="toLatitude">geo position latitude destination (outside)</param>
        /// <param name="persona">persona type for routing (slow connections, no stairs etc.)</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task<Indoor2OutdoorRouting> RoutingIndoor2OutdoorAsync(string fromEvaNumber, IndoorLevel fromLevel, double fromLongitude, double fromLatitude, double toLongitude, double toLatitude, PersonaType? persona, System.Threading.CancellationToken cancellationToken)
        {
            if (fromEvaNumber == null)
                throw new System.ArgumentNullException("fromEvaNumber");
    
            if (fromLevel == null)
                throw new System.ArgumentNullException("fromLevel");
    
            if (fromLongitude == null)
                throw new System.ArgumentNullException("fromLongitude");
    
            if (fromLatitude == null)
                throw new System.ArgumentNullException("fromLatitude");
    
            if (toLongitude == null)
                throw new System.ArgumentNullException("toLongitude");
    
            if (toLatitude == null)
                throw new System.ArgumentNullException("toLatitude");
    
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append("routings/indoor2outdoor/byposition?");
            urlBuilder_.Append(System.Uri.EscapeDataString("fromEvaNumber") + "=").Append(System.Uri.EscapeDataString(ConvertToString(fromEvaNumber, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            urlBuilder_.Append(System.Uri.EscapeDataString("fromLevel") + "=").Append(System.Uri.EscapeDataString(ConvertToString(fromLevel, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            urlBuilder_.Append(System.Uri.EscapeDataString("fromLongitude") + "=").Append(System.Uri.EscapeDataString(ConvertToString(fromLongitude, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            urlBuilder_.Append(System.Uri.EscapeDataString("fromLatitude") + "=").Append(System.Uri.EscapeDataString(ConvertToString(fromLatitude, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            urlBuilder_.Append(System.Uri.EscapeDataString("toLongitude") + "=").Append(System.Uri.EscapeDataString(ConvertToString(toLongitude, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            urlBuilder_.Append(System.Uri.EscapeDataString("toLatitude") + "=").Append(System.Uri.EscapeDataString(ConvertToString(toLatitude, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            if (persona != null) 
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("persona") + "=").Append(System.Uri.EscapeDataString(ConvertToString(persona, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            urlBuilder_.Length--;
    
            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/vnd.de.db.ris+json"));
    
                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);
    
                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }
    
                        ProcessResponse(client_, response_);
    
                        var status_ = (int)response_.StatusCode;
                        if (status_ == 500)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorResponse>(response_, headers_).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<ErrorResponse>("API Exception", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<Indoor2OutdoorRouting>(response_, headers_).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }
    
        /// <param name="fromEvaNumber">eva number origin</param>
        /// <param name="fromPlatform">platform origin</param>
        /// <param name="fromSector">sector origin, may be empty.</param>
        /// <param name="toEvaNumber">eva number origin</param>
        /// <param name="toPlatform">platform origin</param>
        /// <param name="toSector">sector origin, may be empty</param>
        /// <param name="persona">persona type for routing (slow connections, no stairs etc.)</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task<IndoorRouting> RoutingIndoorByPlatformAsync(string fromEvaNumber, string fromPlatform, string fromSector, string toEvaNumber, string toPlatform, string toSector, PersonaType? persona)
        {
            return RoutingIndoorByPlatformAsync(fromEvaNumber, fromPlatform, fromSector, toEvaNumber, toPlatform, toSector, persona, System.Threading.CancellationToken.None);
        }
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <param name="fromEvaNumber">eva number origin</param>
        /// <param name="fromPlatform">platform origin</param>
        /// <param name="fromSector">sector origin, may be empty.</param>
        /// <param name="toEvaNumber">eva number origin</param>
        /// <param name="toPlatform">platform origin</param>
        /// <param name="toSector">sector origin, may be empty</param>
        /// <param name="persona">persona type for routing (slow connections, no stairs etc.)</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task<IndoorRouting> RoutingIndoorByPlatformAsync(string fromEvaNumber, string fromPlatform, string fromSector, string toEvaNumber, string toPlatform, string toSector, PersonaType? persona, System.Threading.CancellationToken cancellationToken)
        {
            if (fromEvaNumber == null)
                throw new System.ArgumentNullException("fromEvaNumber");
    
            if (fromPlatform == null)
                throw new System.ArgumentNullException("fromPlatform");
    
            if (toEvaNumber == null)
                throw new System.ArgumentNullException("toEvaNumber");
    
            if (toPlatform == null)
                throw new System.ArgumentNullException("toPlatform");
    
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append("routings/indoor/byplatform?");
            urlBuilder_.Append(System.Uri.EscapeDataString("fromEvaNumber") + "=").Append(System.Uri.EscapeDataString(ConvertToString(fromEvaNumber, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            urlBuilder_.Append(System.Uri.EscapeDataString("fromPlatform") + "=").Append(System.Uri.EscapeDataString(ConvertToString(fromPlatform, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            if (fromSector != null) 
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("fromSector") + "=").Append(System.Uri.EscapeDataString(ConvertToString(fromSector, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            urlBuilder_.Append(System.Uri.EscapeDataString("toEvaNumber") + "=").Append(System.Uri.EscapeDataString(ConvertToString(toEvaNumber, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            urlBuilder_.Append(System.Uri.EscapeDataString("toPlatform") + "=").Append(System.Uri.EscapeDataString(ConvertToString(toPlatform, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            if (toSector != null) 
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("toSector") + "=").Append(System.Uri.EscapeDataString(ConvertToString(toSector, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (persona != null) 
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("persona") + "=").Append(System.Uri.EscapeDataString(ConvertToString(persona, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            urlBuilder_.Length--;
    
            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/vnd.de.db.ris+json"));
    
                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);
    
                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }
    
                        ProcessResponse(client_, response_);
    
                        var status_ = (int)response_.StatusCode;
                        if (status_ == 500)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorResponse>(response_, headers_).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<ErrorResponse>("API Exception", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<IndoorRouting>(response_, headers_).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }
    
        /// <param name="fromEvaNumber">eva number origin</param>
        /// <param name="fromLevel">indoor level origin</param>
        /// <param name="fromLongitude">geo position longitude origin</param>
        /// <param name="fromLatitude">geo position latitude origin</param>
        /// <param name="toEvaNumber">eva number destination</param>
        /// <param name="toLevel">indoor level destination</param>
        /// <param name="toLongitude">geo position longitude destination</param>
        /// <param name="toLatitude">geo position latitude destination</param>
        /// <param name="persona">persona type for routing (slow connections, no stairs etc.)</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task<IndoorRouting> RoutingIndoorByPositionAsync(string fromEvaNumber, IndoorLevel fromLevel, double fromLongitude, double fromLatitude, string toEvaNumber, IndoorLevel toLevel, double toLongitude, double toLatitude, PersonaType? persona)
        {
            return RoutingIndoorByPositionAsync(fromEvaNumber, fromLevel, fromLongitude, fromLatitude, toEvaNumber, toLevel, toLongitude, toLatitude, persona, System.Threading.CancellationToken.None);
        }
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <param name="fromEvaNumber">eva number origin</param>
        /// <param name="fromLevel">indoor level origin</param>
        /// <param name="fromLongitude">geo position longitude origin</param>
        /// <param name="fromLatitude">geo position latitude origin</param>
        /// <param name="toEvaNumber">eva number destination</param>
        /// <param name="toLevel">indoor level destination</param>
        /// <param name="toLongitude">geo position longitude destination</param>
        /// <param name="toLatitude">geo position latitude destination</param>
        /// <param name="persona">persona type for routing (slow connections, no stairs etc.)</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task<IndoorRouting> RoutingIndoorByPositionAsync(string fromEvaNumber, IndoorLevel fromLevel, double fromLongitude, double fromLatitude, string toEvaNumber, IndoorLevel toLevel, double toLongitude, double toLatitude, PersonaType? persona, System.Threading.CancellationToken cancellationToken)
        {
            if (fromEvaNumber == null)
                throw new System.ArgumentNullException("fromEvaNumber");
    
            if (fromLevel == null)
                throw new System.ArgumentNullException("fromLevel");
    
            if (fromLongitude == null)
                throw new System.ArgumentNullException("fromLongitude");
    
            if (fromLatitude == null)
                throw new System.ArgumentNullException("fromLatitude");
    
            if (toEvaNumber == null)
                throw new System.ArgumentNullException("toEvaNumber");
    
            if (toLevel == null)
                throw new System.ArgumentNullException("toLevel");
    
            if (toLongitude == null)
                throw new System.ArgumentNullException("toLongitude");
    
            if (toLatitude == null)
                throw new System.ArgumentNullException("toLatitude");
    
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append("routings/indoor/byposition?");
            urlBuilder_.Append(System.Uri.EscapeDataString("fromEvaNumber") + "=").Append(System.Uri.EscapeDataString(ConvertToString(fromEvaNumber, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            urlBuilder_.Append(System.Uri.EscapeDataString("fromLevel") + "=").Append(System.Uri.EscapeDataString(ConvertToString(fromLevel, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            urlBuilder_.Append(System.Uri.EscapeDataString("fromLongitude") + "=").Append(System.Uri.EscapeDataString(ConvertToString(fromLongitude, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            urlBuilder_.Append(System.Uri.EscapeDataString("fromLatitude") + "=").Append(System.Uri.EscapeDataString(ConvertToString(fromLatitude, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            urlBuilder_.Append(System.Uri.EscapeDataString("toEvaNumber") + "=").Append(System.Uri.EscapeDataString(ConvertToString(toEvaNumber, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            urlBuilder_.Append(System.Uri.EscapeDataString("toLevel") + "=").Append(System.Uri.EscapeDataString(ConvertToString(toLevel, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            urlBuilder_.Append(System.Uri.EscapeDataString("toLongitude") + "=").Append(System.Uri.EscapeDataString(ConvertToString(toLongitude, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            urlBuilder_.Append(System.Uri.EscapeDataString("toLatitude") + "=").Append(System.Uri.EscapeDataString(ConvertToString(toLatitude, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            if (persona != null) 
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("persona") + "=").Append(System.Uri.EscapeDataString(ConvertToString(persona, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            urlBuilder_.Length--;
    
            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/vnd.de.db.ris+json"));
    
                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);
    
                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }
    
                        ProcessResponse(client_, response_);
    
                        var status_ = (int)response_.StatusCode;
                        if (status_ == 500)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorResponse>(response_, headers_).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<ErrorResponse>("API Exception", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<IndoorRouting>(response_, headers_).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }
    
        /// <param name="timeStart">start time for routing as full qualified datetim, if omitted, current time will be used</param>
        /// <param name="fromLongitude">geo position longitude origin</param>
        /// <param name="fromLatitude">geo position latitude origin</param>
        /// <param name="toLongitude">geo position longitude destination</param>
        /// <param name="toLatitude">geo position latitude destination</param>
        /// <param name="persona">persona type for routing (slow connections, no stairs etc.)</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task<MultimodalRouting> RoutingMultimodalAsync(System.DateTimeOffset? timeStart, double fromLongitude, double fromLatitude, double toLongitude, double toLatitude, PersonaType? persona)
        {
            return RoutingMultimodalAsync(timeStart, fromLongitude, fromLatitude, toLongitude, toLatitude, persona, System.Threading.CancellationToken.None);
        }
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <param name="timeStart">start time for routing as full qualified datetim, if omitted, current time will be used</param>
        /// <param name="fromLongitude">geo position longitude origin</param>
        /// <param name="fromLatitude">geo position latitude origin</param>
        /// <param name="toLongitude">geo position longitude destination</param>
        /// <param name="toLatitude">geo position latitude destination</param>
        /// <param name="persona">persona type for routing (slow connections, no stairs etc.)</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task<MultimodalRouting> RoutingMultimodalAsync(System.DateTimeOffset? timeStart, double fromLongitude, double fromLatitude, double toLongitude, double toLatitude, PersonaType? persona, System.Threading.CancellationToken cancellationToken)
        {
            if (fromLongitude == null)
                throw new System.ArgumentNullException("fromLongitude");
    
            if (fromLatitude == null)
                throw new System.ArgumentNullException("fromLatitude");
    
            if (toLongitude == null)
                throw new System.ArgumentNullException("toLongitude");
    
            if (toLatitude == null)
                throw new System.ArgumentNullException("toLatitude");
    
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append("routings/multimodal?");
            if (timeStart != null) 
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("timeStart") + "=").Append(System.Uri.EscapeDataString(timeStart.Value.ToString("yyyy-MM-dd", System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            urlBuilder_.Append(System.Uri.EscapeDataString("fromLongitude") + "=").Append(System.Uri.EscapeDataString(ConvertToString(fromLongitude, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            urlBuilder_.Append(System.Uri.EscapeDataString("fromLatitude") + "=").Append(System.Uri.EscapeDataString(ConvertToString(fromLatitude, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            urlBuilder_.Append(System.Uri.EscapeDataString("toLongitude") + "=").Append(System.Uri.EscapeDataString(ConvertToString(toLongitude, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            urlBuilder_.Append(System.Uri.EscapeDataString("toLatitude") + "=").Append(System.Uri.EscapeDataString(ConvertToString(toLatitude, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            if (persona != null) 
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("persona") + "=").Append(System.Uri.EscapeDataString(ConvertToString(persona, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            urlBuilder_.Length--;
    
            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/vnd.de.db.ris+json"));
    
                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);
    
                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }
    
                        ProcessResponse(client_, response_);
    
                        var status_ = (int)response_.StatusCode;
                        if (status_ == 500)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorResponse>(response_, headers_).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<ErrorResponse>("API Exception", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<MultimodalRouting>(response_, headers_).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }
    
        /// <param name="journeyID">id of journey [FahrtID]</param>
        /// <param name="arrivalID">id of arrival [AnkunftID]</param>
        /// <param name="timeSlot">time slot in minutes starting at arrivaltime of the requested arrivalID, in which the connections depart from the station (group) of the arrival, if omitted defaults to 30 minutes</param>
        /// <param name="includeStationGroup">should all stations of group the requested eva numbers belong to (for instance a request to 'FFM Hoch' would also return 'FFM tief') be included</param>
        /// <param name="onlyPossibleConnections">indicates whether only possible connections should be returned, if false also impossible connections (connect time too short) are returned</param>
        /// <param name="filterTransports">filter for transport types that should be returned, if ommitted all types of transport are returned</param>
        /// <param name="maxViaStops">limits amount of via stops per transport (limitation doesn't apply to additional and canceled stops), if ommitted all via stops are returned, if zero no via stops are returned</param>
        /// <param name="maxTransports">limits amount of results, if ommitted no truncation is applied</param>
        /// <param name="sortBy">define sorting order, if omitted sorting is by TIME
        /// - TIME (Sorting based on best known time information ie real before preview before schedule)
        /// - TIME_SCHEDULE (Sorting based on schedule time)</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task<ConnectionArrival> ConnectionsArrivalAsync(string journeyID, string arrivalID, int? timeSlot, bool? includeStationGroup, bool? onlyPossibleConnections, System.Collections.Generic.IEnumerable<TransportType> filterTransports, int? maxViaStops, int? maxTransports, SortKeyTime? sortBy)
        {
            return ConnectionsArrivalAsync(journeyID, arrivalID, timeSlot, includeStationGroup, onlyPossibleConnections, filterTransports, maxViaStops, maxTransports, sortBy, System.Threading.CancellationToken.None);
        }
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <param name="journeyID">id of journey [FahrtID]</param>
        /// <param name="arrivalID">id of arrival [AnkunftID]</param>
        /// <param name="timeSlot">time slot in minutes starting at arrivaltime of the requested arrivalID, in which the connections depart from the station (group) of the arrival, if omitted defaults to 30 minutes</param>
        /// <param name="includeStationGroup">should all stations of group the requested eva numbers belong to (for instance a request to 'FFM Hoch' would also return 'FFM tief') be included</param>
        /// <param name="onlyPossibleConnections">indicates whether only possible connections should be returned, if false also impossible connections (connect time too short) are returned</param>
        /// <param name="filterTransports">filter for transport types that should be returned, if ommitted all types of transport are returned</param>
        /// <param name="maxViaStops">limits amount of via stops per transport (limitation doesn't apply to additional and canceled stops), if ommitted all via stops are returned, if zero no via stops are returned</param>
        /// <param name="maxTransports">limits amount of results, if ommitted no truncation is applied</param>
        /// <param name="sortBy">define sorting order, if omitted sorting is by TIME
        /// - TIME (Sorting based on best known time information ie real before preview before schedule)
        /// - TIME_SCHEDULE (Sorting based on schedule time)</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task<ConnectionArrival> ConnectionsArrivalAsync(string journeyID, string arrivalID, int? timeSlot, bool? includeStationGroup, bool? onlyPossibleConnections, System.Collections.Generic.IEnumerable<TransportType> filterTransports, int? maxViaStops, int? maxTransports, SortKeyTime? sortBy, System.Threading.CancellationToken cancellationToken)
        {
            if (journeyID == null)
                throw new System.ArgumentNullException("journeyID");
    
            if (arrivalID == null)
                throw new System.ArgumentNullException("arrivalID");
    
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append("connections/byarrival/{journeyID}/{arrivalID}?");
            urlBuilder_.Replace("{journeyID}", System.Uri.EscapeDataString(ConvertToString(journeyID, System.Globalization.CultureInfo.InvariantCulture)));
            urlBuilder_.Replace("{arrivalID}", System.Uri.EscapeDataString(ConvertToString(arrivalID, System.Globalization.CultureInfo.InvariantCulture)));
            if (timeSlot != null) 
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("timeSlot") + "=").Append(System.Uri.EscapeDataString(ConvertToString(timeSlot, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (includeStationGroup != null) 
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("includeStationGroup") + "=").Append(System.Uri.EscapeDataString(ConvertToString(includeStationGroup, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (onlyPossibleConnections != null) 
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("onlyPossibleConnections") + "=").Append(System.Uri.EscapeDataString(ConvertToString(onlyPossibleConnections, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (filterTransports != null) 
            {
                foreach (var item_ in filterTransports) { urlBuilder_.Append(System.Uri.EscapeDataString("filterTransports") + "=").Append((item_ == null) ? "" : System.Uri.EscapeDataString(ConvertToString(item_, System.Globalization.CultureInfo.InvariantCulture))).Append("&"); }
            }
            if (maxViaStops != null) 
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("maxViaStops") + "=").Append(System.Uri.EscapeDataString(ConvertToString(maxViaStops, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (maxTransports != null) 
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("maxTransports") + "=").Append(System.Uri.EscapeDataString(ConvertToString(maxTransports, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (sortBy != null) 
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("sortBy") + "=").Append(System.Uri.EscapeDataString(ConvertToString(sortBy, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            urlBuilder_.Length--;
    
            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/vnd.de.db.ris+json"));
    
                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);
    
                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }
    
                        ProcessResponse(client_, response_);
    
                        var status_ = (int)response_.StatusCode;
                        if (status_ == 500)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorResponse>(response_, headers_).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<ErrorResponse>("API Exception", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ConnectionArrival>(response_, headers_).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }
    
        /// <param name="journeyID">id of journey [FahrtID]</param>
        /// <param name="arrivalID">id of arrival of journey [AnkunftID]</param>
        /// <param name="journeyIDConnecting">id of connecting journey [FahrtID der anschliessenden Fahrt]</param>
        /// <param name="departureIDConnecting">id of departure stop of the connecting journey [AnkunftID der anschliessenden Fahrt]</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        [System.Obsolete]
        public System.Threading.Tasks.Task<ConnectionJourneys> ConnectionsJourneysAsync(string journeyID, string arrivalID, string journeyIDConnecting, string departureIDConnecting)
        {
            return ConnectionsJourneysAsync(journeyID, arrivalID, journeyIDConnecting, departureIDConnecting, System.Threading.CancellationToken.None);
        }
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <param name="journeyID">id of journey [FahrtID]</param>
        /// <param name="arrivalID">id of arrival of journey [AnkunftID]</param>
        /// <param name="journeyIDConnecting">id of connecting journey [FahrtID der anschliessenden Fahrt]</param>
        /// <param name="departureIDConnecting">id of departure stop of the connecting journey [AnkunftID der anschliessenden Fahrt]</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        [System.Obsolete]
        public async System.Threading.Tasks.Task<ConnectionJourneys> ConnectionsJourneysAsync(string journeyID, string arrivalID, string journeyIDConnecting, string departureIDConnecting, System.Threading.CancellationToken cancellationToken)
        {
            if (journeyID == null)
                throw new System.ArgumentNullException("journeyID");
    
            if (arrivalID == null)
                throw new System.ArgumentNullException("arrivalID");
    
            if (journeyIDConnecting == null)
                throw new System.ArgumentNullException("journeyIDConnecting");
    
            if (departureIDConnecting == null)
                throw new System.ArgumentNullException("departureIDConnecting");
    
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append("connections/byjourneys({journeyID}/{arrivalID}/{journeyIDConnecting}/{departureIDConnecting}");
            urlBuilder_.Replace("{journeyID}", System.Uri.EscapeDataString(ConvertToString(journeyID, System.Globalization.CultureInfo.InvariantCulture)));
            urlBuilder_.Replace("{arrivalID}", System.Uri.EscapeDataString(ConvertToString(arrivalID, System.Globalization.CultureInfo.InvariantCulture)));
            urlBuilder_.Replace("{journeyIDConnecting}", System.Uri.EscapeDataString(ConvertToString(journeyIDConnecting, System.Globalization.CultureInfo.InvariantCulture)));
            urlBuilder_.Replace("{departureIDConnecting}", System.Uri.EscapeDataString(ConvertToString(departureIDConnecting, System.Globalization.CultureInfo.InvariantCulture)));
    
            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/vnd.de.db.ris+json"));
    
                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);
    
                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }
    
                        ProcessResponse(client_, response_);
    
                        var status_ = (int)response_.StatusCode;
                        if (status_ == 500)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorResponse>(response_, headers_).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<ErrorResponse>("API Exception", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ConnectionJourneys>(response_, headers_).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }
    
        /// <param name="longitude">geo position longitude</param>
        /// <param name="latitude">geo position latitude</param>
        /// <param name="radius">radius in meters for returning mobilities around geo position</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task<MobilitiesOnDemand> MobilitiesOnDemandByPositionAsync(double longitude, double latitude, int? radius)
        {
            return MobilitiesOnDemandByPositionAsync(longitude, latitude, radius, System.Threading.CancellationToken.None);
        }
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <param name="longitude">geo position longitude</param>
        /// <param name="latitude">geo position latitude</param>
        /// <param name="radius">radius in meters for returning mobilities around geo position</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task<MobilitiesOnDemand> MobilitiesOnDemandByPositionAsync(double longitude, double latitude, int? radius, System.Threading.CancellationToken cancellationToken)
        {
            if (longitude == null)
                throw new System.ArgumentNullException("longitude");
    
            if (latitude == null)
                throw new System.ArgumentNullException("latitude");
    
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append("mobilities/ondemand/bygeoposition?");
            urlBuilder_.Append(System.Uri.EscapeDataString("longitude") + "=").Append(System.Uri.EscapeDataString(ConvertToString(longitude, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            urlBuilder_.Append(System.Uri.EscapeDataString("latitude") + "=").Append(System.Uri.EscapeDataString(ConvertToString(latitude, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            if (radius != null) 
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("radius") + "=").Append(System.Uri.EscapeDataString(ConvertToString(radius, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            urlBuilder_.Length--;
    
            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/vnd.de.db.ris+json"));
    
                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);
    
                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }
    
                        ProcessResponse(client_, response_);
    
                        var status_ = (int)response_.StatusCode;
                        if (status_ == 500)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorResponse>(response_, headers_).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<ErrorResponse>("API Exception", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<MobilitiesOnDemand>(response_, headers_).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }
    
        /// <param name="longitude">geo position longitude</param>
        /// <param name="latitude">geo position latitude</param>
        /// <param name="radius">radius in meters for returning mobilities around geo position</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task<MobilitiesIndividual> MobilitiesIndividualByPositionAsync(double longitude, double latitude, int? radius)
        {
            return MobilitiesIndividualByPositionAsync(longitude, latitude, radius, System.Threading.CancellationToken.None);
        }
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <param name="longitude">geo position longitude</param>
        /// <param name="latitude">geo position latitude</param>
        /// <param name="radius">radius in meters for returning mobilities around geo position</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task<MobilitiesIndividual> MobilitiesIndividualByPositionAsync(double longitude, double latitude, int? radius, System.Threading.CancellationToken cancellationToken)
        {
            if (longitude == null)
                throw new System.ArgumentNullException("longitude");
    
            if (latitude == null)
                throw new System.ArgumentNullException("latitude");
    
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append("mobilities/individual/bygeoposition?");
            urlBuilder_.Append(System.Uri.EscapeDataString("longitude") + "=").Append(System.Uri.EscapeDataString(ConvertToString(longitude, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            urlBuilder_.Append(System.Uri.EscapeDataString("latitude") + "=").Append(System.Uri.EscapeDataString(ConvertToString(latitude, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            if (radius != null) 
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("radius") + "=").Append(System.Uri.EscapeDataString(ConvertToString(radius, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            urlBuilder_.Length--;
    
            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/vnd.de.db.ris+json"));
    
                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);
    
                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }
    
                        ProcessResponse(client_, response_);
    
                        var status_ = (int)response_.StatusCode;
                        if (status_ == 500)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorResponse>(response_, headers_).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<ErrorResponse>("API Exception", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<MobilitiesIndividual>(response_, headers_).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }
    
        /// <param name="evaNumber">eva number of station</param>
        /// <param name="radius">radius in meters for returning mobilities around geo position</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task<MobilitiesIndividual> MobilitiesIndividualByStationAsync(string evaNumber, int? radius)
        {
            return MobilitiesIndividualByStationAsync(evaNumber, radius, System.Threading.CancellationToken.None);
        }
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <param name="evaNumber">eva number of station</param>
        /// <param name="radius">radius in meters for returning mobilities around geo position</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task<MobilitiesIndividual> MobilitiesIndividualByStationAsync(string evaNumber, int? radius, System.Threading.CancellationToken cancellationToken)
        {
            if (evaNumber == null)
                throw new System.ArgumentNullException("evaNumber");
    
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append("mobilities/individual/bystation?");
            urlBuilder_.Append(System.Uri.EscapeDataString("evaNumber") + "=").Append(System.Uri.EscapeDataString(ConvertToString(evaNumber, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            if (radius != null) 
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("radius") + "=").Append(System.Uri.EscapeDataString(ConvertToString(radius, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            urlBuilder_.Length--;
    
            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/vnd.de.db.ris+json"));
    
                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);
    
                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }
    
                        ProcessResponse(client_, response_);
    
                        var status_ = (int)response_.StatusCode;
                        if (status_ == 500)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorResponse>(response_, headers_).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<ErrorResponse>("API Exception", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<MobilitiesIndividual>(response_, headers_).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }
    
        /// <param name="evaNumber">eva number of station</param>
        /// <param name="radius">radius in meters for returning mobilities around geo position</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task<MobilitiesOnDemand> MobilitiesOnDemandByStationAsync(string evaNumber, int? radius)
        {
            return MobilitiesOnDemandByStationAsync(evaNumber, radius, System.Threading.CancellationToken.None);
        }
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <param name="evaNumber">eva number of station</param>
        /// <param name="radius">radius in meters for returning mobilities around geo position</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task<MobilitiesOnDemand> MobilitiesOnDemandByStationAsync(string evaNumber, int? radius, System.Threading.CancellationToken cancellationToken)
        {
            if (evaNumber == null)
                throw new System.ArgumentNullException("evaNumber");
    
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append("mobilities/ondemand/bystation?");
            urlBuilder_.Append(System.Uri.EscapeDataString("evaNumber") + "=").Append(System.Uri.EscapeDataString(ConvertToString(evaNumber, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            if (radius != null) 
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("radius") + "=").Append(System.Uri.EscapeDataString(ConvertToString(radius, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            urlBuilder_.Length--;
    
            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/vnd.de.db.ris+json"));
    
                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);
    
                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }
    
                        ProcessResponse(client_, response_);
    
                        var status_ = (int)response_.StatusCode;
                        if (status_ == 500)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorResponse>(response_, headers_).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<ErrorResponse>("API Exception", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<MobilitiesOnDemand>(response_, headers_).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }
    
        /// <param name="journeyID">id of journey [FahrtID]</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task<TransportPosition> PositionAsync(string journeyID)
        {
            return PositionAsync(journeyID, System.Threading.CancellationToken.None);
        }
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <param name="journeyID">id of journey [FahrtID]</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task<TransportPosition> PositionAsync(string journeyID, System.Threading.CancellationToken cancellationToken)
        {
            if (journeyID == null)
                throw new System.ArgumentNullException("journeyID");
    
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append("transports/geopositions/{journeyID}");
            urlBuilder_.Replace("{journeyID}", System.Uri.EscapeDataString(ConvertToString(journeyID, System.Globalization.CultureInfo.InvariantCulture)));
    
            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/vnd.de.db.ris+json"));
    
                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);
    
                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }
    
                        ProcessResponse(client_, response_);
    
                        var status_ = (int)response_.StatusCode;
                        if (status_ == 500)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorResponse>(response_, headers_).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<ErrorResponse>("API Exception", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<TransportPosition>(response_, headers_).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }
    
        /// <param name="macAddress">id of wifi access point [MAC Adresse]</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        [System.Obsolete]
        public System.Threading.Tasks.Task<TransportMatchWifis> MatchingWifiAsync(string macAddress)
        {
            return MatchingWifiAsync(macAddress, System.Threading.CancellationToken.None);
        }
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <param name="macAddress">id of wifi access point [MAC Adresse]</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        [System.Obsolete]
        public async System.Threading.Tasks.Task<TransportMatchWifis> MatchingWifiAsync(string macAddress, System.Threading.CancellationToken cancellationToken)
        {
            if (macAddress == null)
                throw new System.ArgumentNullException("macAddress");
    
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append("transports/bywifiaccesspoint/{macAddress}");
            urlBuilder_.Replace("{macAddress}", System.Uri.EscapeDataString(ConvertToString(macAddress, System.Globalization.CultureInfo.InvariantCulture)));
    
            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/vnd.de.db.ris+json"));
    
                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);
    
                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }
    
                        ProcessResponse(client_, response_);
    
                        var status_ = (int)response_.StatusCode;
                        if (status_ == 500)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorResponse>(response_, headers_).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<ErrorResponse>("API Exception", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<TransportMatchWifis>(response_, headers_).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }
    
        /// <param name="vehicleID">id for vehicle (for rail vehicles usually the UIC identification nunmber)</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task<TransportMatchVehicleIDs> MatchingVehicleIDAsync(string vehicleID)
        {
            return MatchingVehicleIDAsync(vehicleID, System.Threading.CancellationToken.None);
        }
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <param name="vehicleID">id for vehicle (for rail vehicles usually the UIC identification nunmber)</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task<TransportMatchVehicleIDs> MatchingVehicleIDAsync(string vehicleID, System.Threading.CancellationToken cancellationToken)
        {
            if (vehicleID == null)
                throw new System.ArgumentNullException("vehicleID");
    
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append("transports/byvehicleid/{vehicleID}");
            urlBuilder_.Replace("{vehicleID}", System.Uri.EscapeDataString(ConvertToString(vehicleID, System.Globalization.CultureInfo.InvariantCulture)));
    
            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/vnd.de.db.ris+json"));
    
                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);
    
                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }
    
                        ProcessResponse(client_, response_);
    
                        var status_ = (int)response_.StatusCode;
                        if (status_ == 500)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorResponse>(response_, headers_).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<ErrorResponse>("API Exception", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<TransportMatchVehicleIDs>(response_, headers_).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }
    
        /// <param name="longitude">geo reference position longitude</param>
        /// <param name="latitude">geo reference position latitude</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        [System.Obsolete]
        public System.Threading.Tasks.Task<TransportMatchGeoPositions> MatchingPositionAsync(double longitude, double latitude)
        {
            return MatchingPositionAsync(longitude, latitude, System.Threading.CancellationToken.None);
        }
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <param name="longitude">geo reference position longitude</param>
        /// <param name="latitude">geo reference position latitude</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        [System.Obsolete]
        public async System.Threading.Tasks.Task<TransportMatchGeoPositions> MatchingPositionAsync(double longitude, double latitude, System.Threading.CancellationToken cancellationToken)
        {
            if (longitude == null)
                throw new System.ArgumentNullException("longitude");
    
            if (latitude == null)
                throw new System.ArgumentNullException("latitude");
    
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append("transports/bygeoposition/{longitude}/{latitude}");
            urlBuilder_.Replace("{longitude}", System.Uri.EscapeDataString(ConvertToString(longitude, System.Globalization.CultureInfo.InvariantCulture)));
            urlBuilder_.Replace("{latitude}", System.Uri.EscapeDataString(ConvertToString(latitude, System.Globalization.CultureInfo.InvariantCulture)));
    
            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/vnd.de.db.ris+json"));
    
                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);
    
                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }
    
                        ProcessResponse(client_, response_);
    
                        var status_ = (int)response_.StatusCode;
                        if (status_ == 500)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorResponse>(response_, headers_).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<ErrorResponse>("API Exception", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<TransportMatchGeoPositions>(response_, headers_).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }
    
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task<VehicleSequenceAvailableAdministrations> VehicleSequenceAdministrationsAsync()
        {
            return VehicleSequenceAdministrationsAsync(System.Threading.CancellationToken.None);
        }
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task<VehicleSequenceAvailableAdministrations> VehicleSequenceAdministrationsAsync(System.Threading.CancellationToken cancellationToken)
        {
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append("transports/vehiclesequences/administrations");
    
            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/vnd.de.db.ris+json"));
    
                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);
    
                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }
    
                        ProcessResponse(client_, response_);
    
                        var status_ = (int)response_.StatusCode;
                        if (status_ == 500)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorResponse>(response_, headers_).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<ErrorResponse>("API Exception", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<VehicleSequenceAvailableAdministrations>(response_, headers_).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }
    
        /// <param name="journeyID">id of journey [FahrtID]</param>
        /// <param name="departureID">id of departure [AbfahrtID]</param>
        /// <param name="includePosition">include position at platform [Gleis, Bahnsteig, Plattform], if omitted or false no platform and no position information per vehicle will be returned</param>
        /// <param name="includeAmenities">include amenities [Ausstatungsmerkmale] like WC, WLAN, boarding aids etc. on a vehicle base, if omitted or false no amenities will be returned</param>
        /// <param name="includeOccupancy">include (detailed) occupancy [Auslastung] for vehicles at departure, if omitted or NONE no occupancy will be returned
        /// - NONE (return no occupancy)
        /// - OVERALL (return only overall occupancy on a first / economy class level)
        /// - DETAIL (return detailed occupancy information like free bike mounts , free seats, stance etc.)</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task<VehicleSequenceDeparture> VehicleSequenceDepartureAsync(string journeyID, string departureID, bool? includePosition, bool? includeAmenities, OccupancyDetail? includeOccupancy)
        {
            return VehicleSequenceDepartureAsync(journeyID, departureID, includePosition, includeAmenities, includeOccupancy, System.Threading.CancellationToken.None);
        }
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <param name="journeyID">id of journey [FahrtID]</param>
        /// <param name="departureID">id of departure [AbfahrtID]</param>
        /// <param name="includePosition">include position at platform [Gleis, Bahnsteig, Plattform], if omitted or false no platform and no position information per vehicle will be returned</param>
        /// <param name="includeAmenities">include amenities [Ausstatungsmerkmale] like WC, WLAN, boarding aids etc. on a vehicle base, if omitted or false no amenities will be returned</param>
        /// <param name="includeOccupancy">include (detailed) occupancy [Auslastung] for vehicles at departure, if omitted or NONE no occupancy will be returned
        /// - NONE (return no occupancy)
        /// - OVERALL (return only overall occupancy on a first / economy class level)
        /// - DETAIL (return detailed occupancy information like free bike mounts , free seats, stance etc.)</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task<VehicleSequenceDeparture> VehicleSequenceDepartureAsync(string journeyID, string departureID, bool? includePosition, bool? includeAmenities, OccupancyDetail? includeOccupancy, System.Threading.CancellationToken cancellationToken)
        {
            if (journeyID == null)
                throw new System.ArgumentNullException("journeyID");
    
            if (departureID == null)
                throw new System.ArgumentNullException("departureID");
    
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append("transports/vehiclesequences/bydeparture/{journeyID}/{departureID}?");
            urlBuilder_.Replace("{journeyID}", System.Uri.EscapeDataString(ConvertToString(journeyID, System.Globalization.CultureInfo.InvariantCulture)));
            urlBuilder_.Replace("{departureID}", System.Uri.EscapeDataString(ConvertToString(departureID, System.Globalization.CultureInfo.InvariantCulture)));
            if (includePosition != null) 
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("includePosition") + "=").Append(System.Uri.EscapeDataString(ConvertToString(includePosition, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (includeAmenities != null) 
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("includeAmenities") + "=").Append(System.Uri.EscapeDataString(ConvertToString(includeAmenities, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (includeOccupancy != null) 
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("includeOccupancy") + "=").Append(System.Uri.EscapeDataString(ConvertToString(includeOccupancy, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            urlBuilder_.Length--;
    
            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/vnd.de.db.ris+json"));
    
                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);
    
                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }
    
                        ProcessResponse(client_, response_);
    
                        var status_ = (int)response_.StatusCode;
                        if (status_ == 500)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorResponse>(response_, headers_).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<ErrorResponse>("API Exception", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<VehicleSequenceDeparture>(response_, headers_).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }
    
        /// <param name="date">date (yyyy-mm-dd) of scheduled start of journey [Verkehrstag]</param>
        /// <param name="category">category of transport [Fahrtgattung]</param>
        /// <param name="number">number of transport [Fahrtnummer]</param>
        /// <param name="evaNumber">departure station id [Abfahrt] for desired departure</param>
        /// <param name="time">scheduled departure time [Geplante Abfahrtszeit] for desired departure as full qualified datetime (yyyy-MM-ddTHH:mm:ssZ)</param>
        /// <param name="includePosition">include position at platform [Gleis, Bahnsteig, Plattform], if omitted or false no platform and no position information per vehicle will be returned</param>
        /// <param name="includeAmenities">include amenities [Ausstatungsmerkmale] like WC, WLAN, boarding aids etc. on a vehicle base, if omitted or false no amenities will be returned</param>
        /// <param name="includeOccupancy">include (detailed) occupancy [Auslastung] for vehicles at departure, if omitted or NONE no occupancy will be returned
        /// - NONE (return no occupancy)
        /// - OVERALL (return only overall occupancy on a first / economy class level)
        /// - DETAIL (return detailed occupancy information like free bike mounts , free seats, stance etc.)</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task<VehicleSequenceDeparture> VehicleSequenceDepartureUnmatchedAsync(System.DateTimeOffset date, string category, int number, string evaNumber, System.DateTimeOffset time, bool? includePosition, bool? includeAmenities, OccupancyDetail? includeOccupancy)
        {
            return VehicleSequenceDepartureUnmatchedAsync(date, category, number, evaNumber, time, includePosition, includeAmenities, includeOccupancy, System.Threading.CancellationToken.None);
        }
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <param name="date">date (yyyy-mm-dd) of scheduled start of journey [Verkehrstag]</param>
        /// <param name="category">category of transport [Fahrtgattung]</param>
        /// <param name="number">number of transport [Fahrtnummer]</param>
        /// <param name="evaNumber">departure station id [Abfahrt] for desired departure</param>
        /// <param name="time">scheduled departure time [Geplante Abfahrtszeit] for desired departure as full qualified datetime (yyyy-MM-ddTHH:mm:ssZ)</param>
        /// <param name="includePosition">include position at platform [Gleis, Bahnsteig, Plattform], if omitted or false no platform and no position information per vehicle will be returned</param>
        /// <param name="includeAmenities">include amenities [Ausstatungsmerkmale] like WC, WLAN, boarding aids etc. on a vehicle base, if omitted or false no amenities will be returned</param>
        /// <param name="includeOccupancy">include (detailed) occupancy [Auslastung] for vehicles at departure, if omitted or NONE no occupancy will be returned
        /// - NONE (return no occupancy)
        /// - OVERALL (return only overall occupancy on a first / economy class level)
        /// - DETAIL (return detailed occupancy information like free bike mounts , free seats, stance etc.)</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task<VehicleSequenceDeparture> VehicleSequenceDepartureUnmatchedAsync(System.DateTimeOffset date, string category, int number, string evaNumber, System.DateTimeOffset time, bool? includePosition, bool? includeAmenities, OccupancyDetail? includeOccupancy, System.Threading.CancellationToken cancellationToken)
        {
            if (date == null)
                throw new System.ArgumentNullException("date");
    
            if (category == null)
                throw new System.ArgumentNullException("category");
    
            if (number == null)
                throw new System.ArgumentNullException("number");
    
            if (evaNumber == null)
                throw new System.ArgumentNullException("evaNumber");
    
            if (time == null)
                throw new System.ArgumentNullException("time");
    
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append("transports/vehiclesequences/bydeparture?");
            urlBuilder_.Append(System.Uri.EscapeDataString("date") + "=").Append(System.Uri.EscapeDataString(date.ToString("yyyy-MM-dd", System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            urlBuilder_.Append(System.Uri.EscapeDataString("category") + "=").Append(System.Uri.EscapeDataString(ConvertToString(category, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            urlBuilder_.Append(System.Uri.EscapeDataString("number") + "=").Append(System.Uri.EscapeDataString(ConvertToString(number, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            urlBuilder_.Append(System.Uri.EscapeDataString("evaNumber") + "=").Append(System.Uri.EscapeDataString(ConvertToString(evaNumber, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            urlBuilder_.Append(System.Uri.EscapeDataString("time") + "=").Append(System.Uri.EscapeDataString(time.ToString("s", System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            if (includePosition != null) 
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("includePosition") + "=").Append(System.Uri.EscapeDataString(ConvertToString(includePosition, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (includeAmenities != null) 
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("includeAmenities") + "=").Append(System.Uri.EscapeDataString(ConvertToString(includeAmenities, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (includeOccupancy != null) 
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("includeOccupancy") + "=").Append(System.Uri.EscapeDataString(ConvertToString(includeOccupancy, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            urlBuilder_.Length--;
    
            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/vnd.de.db.ris+json"));
    
                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);
    
                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }
    
                        ProcessResponse(client_, response_);
    
                        var status_ = (int)response_.StatusCode;
                        if (status_ == 500)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorResponse>(response_, headers_).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<ErrorResponse>("API Exception", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<VehicleSequenceDeparture>(response_, headers_).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }
    
        /// <param name="query">query string to search addresses and stations for</param>
        /// <param name="maxResults">max results to return, leave empty in case no truncation is necessary; applies to addresses and stations individually.</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task<Locations> LocationsAutoCompleteAsync(string query, int? maxResults)
        {
            return LocationsAutoCompleteAsync(query, maxResults, System.Threading.CancellationToken.None);
        }
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <param name="query">query string to search addresses and stations for</param>
        /// <param name="maxResults">max results to return, leave empty in case no truncation is necessary; applies to addresses and stations individually.</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task<Locations> LocationsAutoCompleteAsync(string query, int? maxResults, System.Threading.CancellationToken cancellationToken)
        {
            if (query == null)
                throw new System.ArgumentNullException("query");
    
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append("locations/byname?");
            urlBuilder_.Append(System.Uri.EscapeDataString("query") + "=").Append(System.Uri.EscapeDataString(ConvertToString(query, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            if (maxResults != null) 
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("maxResults") + "=").Append(System.Uri.EscapeDataString(ConvertToString(maxResults, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            urlBuilder_.Length--;
    
            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/vnd.de.db.ris+json"));
    
                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);
    
                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }
    
                        ProcessResponse(client_, response_);
    
                        var status_ = (int)response_.StatusCode;
                        if (status_ == 500)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorResponse>(response_, headers_).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<ErrorResponse>("API Exception", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<Locations>(response_, headers_).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }
    
        /// <param name="street">street name of address the position should be retrived for</param>
        /// <param name="houseNumber">housenumber of address the position should be retrived for</param>
        /// <param name="postalCode">postalcode of address the position should be retrived for</param>
        /// <param name="city">city of address the position should be retrived for</param>
        /// <param name="country">country of address the position should be retrived for</param>
        /// <param name="maxResults">max results to return, leave empty in case no truncation is necessary; applies to addresses and stations individually</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task<Locations> LocationsByAddressAsync(string street, string houseNumber, string postalCode, string city, string country, int? maxResults)
        {
            return LocationsByAddressAsync(street, houseNumber, postalCode, city, country, maxResults, System.Threading.CancellationToken.None);
        }
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <param name="street">street name of address the position should be retrived for</param>
        /// <param name="houseNumber">housenumber of address the position should be retrived for</param>
        /// <param name="postalCode">postalcode of address the position should be retrived for</param>
        /// <param name="city">city of address the position should be retrived for</param>
        /// <param name="country">country of address the position should be retrived for</param>
        /// <param name="maxResults">max results to return, leave empty in case no truncation is necessary; applies to addresses and stations individually</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task<Locations> LocationsByAddressAsync(string street, string houseNumber, string postalCode, string city, string country, int? maxResults, System.Threading.CancellationToken cancellationToken)
        {
            if (street == null)
                throw new System.ArgumentNullException("street");
    
            if (houseNumber == null)
                throw new System.ArgumentNullException("houseNumber");
    
            if (postalCode == null)
                throw new System.ArgumentNullException("postalCode");
    
            if (city == null)
                throw new System.ArgumentNullException("city");
    
            if (country == null)
                throw new System.ArgumentNullException("country");
    
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append("locations/byaddress?");
            urlBuilder_.Append(System.Uri.EscapeDataString("street") + "=").Append(System.Uri.EscapeDataString(ConvertToString(street, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            urlBuilder_.Append(System.Uri.EscapeDataString("houseNumber") + "=").Append(System.Uri.EscapeDataString(ConvertToString(houseNumber, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            urlBuilder_.Append(System.Uri.EscapeDataString("postalCode") + "=").Append(System.Uri.EscapeDataString(ConvertToString(postalCode, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            urlBuilder_.Append(System.Uri.EscapeDataString("city") + "=").Append(System.Uri.EscapeDataString(ConvertToString(city, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            urlBuilder_.Append(System.Uri.EscapeDataString("country") + "=").Append(System.Uri.EscapeDataString(ConvertToString(country, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            if (maxResults != null) 
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("maxResults") + "=").Append(System.Uri.EscapeDataString(ConvertToString(maxResults, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            urlBuilder_.Length--;
    
            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/vnd.de.db.ris+json"));
    
                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);
    
                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }
    
                        ProcessResponse(client_, response_);
    
                        var status_ = (int)response_.StatusCode;
                        if (status_ == 500)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorResponse>(response_, headers_).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<ErrorResponse>("API Exception", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<Locations>(response_, headers_).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }
    
        /// <param name="longitude">heo position longitude</param>
        /// <param name="latitude">heo position latitude</param>
        /// <param name="radius">radius in meters for returning addresses around geo position</param>
        /// <param name="maxResults">max results to return, leave empty in case no truncation is necessary; applies to addresses and stations individually</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task<Locations> LocationsByPositionAsync(double longitude, double latitude, int? radius, int? maxResults)
        {
            return LocationsByPositionAsync(longitude, latitude, radius, maxResults, System.Threading.CancellationToken.None);
        }
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <param name="longitude">heo position longitude</param>
        /// <param name="latitude">heo position latitude</param>
        /// <param name="radius">radius in meters for returning addresses around geo position</param>
        /// <param name="maxResults">max results to return, leave empty in case no truncation is necessary; applies to addresses and stations individually</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task<Locations> LocationsByPositionAsync(double longitude, double latitude, int? radius, int? maxResults, System.Threading.CancellationToken cancellationToken)
        {
            if (longitude == null)
                throw new System.ArgumentNullException("longitude");
    
            if (latitude == null)
                throw new System.ArgumentNullException("latitude");
    
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append("locations/bygeoposition?");
            urlBuilder_.Append(System.Uri.EscapeDataString("longitude") + "=").Append(System.Uri.EscapeDataString(ConvertToString(longitude, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            urlBuilder_.Append(System.Uri.EscapeDataString("latitude") + "=").Append(System.Uri.EscapeDataString(ConvertToString(latitude, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            if (radius != null) 
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("radius") + "=").Append(System.Uri.EscapeDataString(ConvertToString(radius, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (maxResults != null) 
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("maxResults") + "=").Append(System.Uri.EscapeDataString(ConvertToString(maxResults, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            urlBuilder_.Length--;
    
            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/vnd.de.db.ris+json"));
    
                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);
    
                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }
    
                        ProcessResponse(client_, response_);
    
                        var status_ = (int)response_.StatusCode;
                        if (status_ == 500)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorResponse>(response_, headers_).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<ErrorResponse>("API Exception", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<Locations>(response_, headers_).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }
    
        protected struct ObjectResponseResult<T>
        {
            public ObjectResponseResult(T responseObject, string responseText)
            {
                this.Object = responseObject;
                this.Text = responseText;
            }
    
            public T Object { get; }
    
            public string Text { get; }
        }
    
        public bool ReadResponseAsString { get; set; }
        
        protected virtual async System.Threading.Tasks.Task<ObjectResponseResult<T>> ReadObjectResponseAsync<T>(System.Net.Http.HttpResponseMessage response, System.Collections.Generic.IReadOnlyDictionary<string, System.Collections.Generic.IEnumerable<string>> headers)
        {
            if (response == null || response.Content == null)
            {
                return new ObjectResponseResult<T>(default(T), string.Empty);
            }
        
            if (ReadResponseAsString)
            {
                var responseText = await response.Content.ReadAsStringAsync().ConfigureAwait(false);
                try
                {
                    var typedBody = Newtonsoft.Json.JsonConvert.DeserializeObject<T>(responseText, JsonSerializerSettings);
                    return new ObjectResponseResult<T>(typedBody, responseText);
                }
                catch (Newtonsoft.Json.JsonException exception)
                {
                    var message = "Could not deserialize the response body string as " + typeof(T).FullName + ".";
                    throw new ApiException(message, (int)response.StatusCode, responseText, headers, exception);
                }
            }
            else
            {
                try
                {
                    using (var responseStream = await response.Content.ReadAsStreamAsync().ConfigureAwait(false))
                    using (var streamReader = new System.IO.StreamReader(responseStream))
                    using (var jsonTextReader = new Newtonsoft.Json.JsonTextReader(streamReader))
                    {
                        var serializer = Newtonsoft.Json.JsonSerializer.Create(JsonSerializerSettings);
                        var typedBody = serializer.Deserialize<T>(jsonTextReader);
                        return new ObjectResponseResult<T>(typedBody, string.Empty);
                    }
                }
                catch (Newtonsoft.Json.JsonException exception)
                {
                    var message = "Could not deserialize the response body stream as " + typeof(T).FullName + ".";
                    throw new ApiException(message, (int)response.StatusCode, string.Empty, headers, exception);
                }
            }
        }
    
        private string ConvertToString(object value, System.Globalization.CultureInfo cultureInfo)
        {
            if (value == null)
            {
                return null;
            }
        
            if (value is System.Enum)
            {
                var name = System.Enum.GetName(value.GetType(), value);
                if (name != null)
                {
                    var field = System.Reflection.IntrospectionExtensions.GetTypeInfo(value.GetType()).GetDeclaredField(name);
                    if (field != null)
                    {
                        var attribute = System.Reflection.CustomAttributeExtensions.GetCustomAttribute(field, typeof(System.Runtime.Serialization.EnumMemberAttribute)) 
                            as System.Runtime.Serialization.EnumMemberAttribute;
                        if (attribute != null)
                        {
                            return attribute.Value != null ? attribute.Value : name;
                        }
                    }
        
                    return System.Convert.ToString(System.Convert.ChangeType(value, System.Enum.GetUnderlyingType(value.GetType()), cultureInfo));
                }
            }
            else if (value is bool) 
            {
                return System.Convert.ToString((bool)value, cultureInfo).ToLowerInvariant();
            }
            else if (value is byte[])
            {
                return System.Convert.ToBase64String((byte[]) value);
            }
            else if (value.GetType().IsArray)
            {
                var array = System.Linq.Enumerable.OfType<object>((System.Array) value);
                return string.Join(",", System.Linq.Enumerable.Select(array, o => ConvertToString(o, cultureInfo)));
            }
        
            var result = System.Convert.ToString(value, cultureInfo);
            return (result is null) ? string.Empty : result;
        }
    }

    /// <summary>Detailed error information on field level.</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.2.1.0 (Newtonsoft.Json v12.0.0.2)")]
    public partial class ErrorDetail 
    {
        /// <summary>Unique code that identifies error.</summary>
        [Newtonsoft.Json.JsonProperty("errorCode", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int ErrorCode { get; set; }
    
        /// <summary>Common description of error.</summary>
        [Newtonsoft.Json.JsonProperty("title", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Title { get; set; }
    
        /// <summary>Name of field / element that raised the error.</summary>
        [Newtonsoft.Json.JsonProperty("field", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Field { get; set; }
    
        /// <summary>Detailed information for error.</summary>
        [Newtonsoft.Json.JsonProperty("detail", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Detail { get; set; }
    
        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();
    
        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }
    
    
    }
    
    /// <summary>API error object conforming to RFC7807.</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.2.1.0 (Newtonsoft.Json v12.0.0.2)")]
    public partial class ErrorResponse 
    {
        /// <summary>Unique code that identifies error.</summary>
        [Newtonsoft.Json.JsonProperty("errorCode", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int ErrorCode { get; set; }
    
        /// <summary>Common description of error.</summary>
        [Newtonsoft.Json.JsonProperty("title", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Title { get; set; }
    
        /// <summary>Detailed information for error.</summary>
        [Newtonsoft.Json.JsonProperty("detail", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Detail { get; set; }
    
        /// <summary>Http status for error origin.</summary>
        [Newtonsoft.Json.JsonProperty("status", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int Status { get; set; }
    
        /// <summary>Unique identifier for instance that raised the error.</summary>
        [Newtonsoft.Json.JsonProperty("instanceId", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string InstanceId { get; set; }
    
        /// <summary>List of detailed errors in case multiple errors have lead to the surrounding error.</summary>
        [Newtonsoft.Json.JsonProperty("errors", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<ErrorDetail> Errors { get; set; }
    
        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();
    
        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }
    
    
    }
    
    /// <summary>Base class that all events have to extend.</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.2.1.0 (Newtonsoft.Json v12.0.0.2)")]
    public partial class BaseEvent 
    {
        /// <summary>Information on origin of event.</summary>
        [Newtonsoft.Json.JsonProperty("metaCreatedBy", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string MetaCreatedBy { get; set; }
    
        /// <summary>Date the event has been fired.</summary>
        [Newtonsoft.Json.JsonProperty("metaTimestamp", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.DateTimeOffset MetaTimestamp { get; set; }
    
        /// <summary>Name of event.</summary>
        [Newtonsoft.Json.JsonProperty("metaName", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string MetaName { get; set; }
    
        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();
    
        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }
    
    
    }
    
    /// <summary>Response containing all collected events for client.</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.2.1.0 (Newtonsoft.Json v12.0.0.2)")]
    public partial class EventFetchResponse 
    {
        /// <summary>List of fired events since last fetch.</summary>
        [Newtonsoft.Json.JsonProperty("events", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<BaseEvent> Events { get; set; }
    
        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();
    
        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }
    
    
    }
    
    /// <summary>Response for journey subscription</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.2.1.0 (Newtonsoft.Json v12.0.0.2)")]
    public partial class EventJourneySubscribeResponse 
    {
        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();
    
        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }
    
    
    }
    
    /// <summary>Respose for journey unsubscribe.</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.2.1.0 (Newtonsoft.Json v12.0.0.2)")]
    public partial class EventJourneyUnsubscribeResponse 
    {
        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();
    
        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }
    
    
    }
    
    /// <summary>Response for train position event subscribe.</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.2.1.0 (Newtonsoft.Json v12.0.0.2)")]
    public partial class EventTrainPositionSubscribeResponse 
    {
        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();
    
        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }
    
    
    }
    
    /// <summary>Response for train position event unsubscribe.</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.2.1.0 (Newtonsoft.Json v12.0.0.2)")]
    public partial class EventTrainPositionUnsubscribeResponse 
    {
        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();
    
        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }
    
    
    }
    
    /// <summary>Type of transport.
    /// - HIGH_SPEED_TRAIN (High speed train [Hochgeschwindigkeitszug] like ICE or TGV etc.)
    /// - INTERCITY_TRAIN (Inter city train [Intercityzug])
    /// - INTER_REGIONAL_TRAIN (Inter regional train [Interregiozug])
    /// - REGIONAL_TRAIN (Regional train [Regionalzug])
    /// - CITY_TRAIN (City train [S-Bahn])
    /// - SUBWAY (Subway [U-Bahn])
    /// - TRAM (Tram [Strassenbahn])
    /// - BUS (Bus [Bus])
    /// - FERRY (Ferry [Faehre])
    /// - FLIGHT (Flight [Flugzeug])
    /// - CAR (Car [Auto])
    /// - TAXI (Taxi)
    /// - SHUTTLE (Shuttle [Ruftaxi])
    /// - BIKE ((E-)Bike [Fahrrad])
    /// - SCOOTER ((E-)Scooter [Roller])
    /// - WALK (Walk ([Laufen])
    /// - UNKNOWN (Unknown)</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.2.1.0 (Newtonsoft.Json v12.0.0.2)")]
    public enum TransportType
    {
        [System.Runtime.Serialization.EnumMember(Value = @"HIGH_SPEED_TRAIN")]
        HIGH_SPEED_TRAIN = 0,
    
        [System.Runtime.Serialization.EnumMember(Value = @"INTERCITY_TRAIN")]
        INTERCITY_TRAIN = 1,
    
        [System.Runtime.Serialization.EnumMember(Value = @"INTER_REGIONAL_TRAIN")]
        INTER_REGIONAL_TRAIN = 2,
    
        [System.Runtime.Serialization.EnumMember(Value = @"REGIONAL_TRAIN")]
        REGIONAL_TRAIN = 3,
    
        [System.Runtime.Serialization.EnumMember(Value = @"CITY_TRAIN")]
        CITY_TRAIN = 4,
    
        [System.Runtime.Serialization.EnumMember(Value = @"SUBWAY")]
        SUBWAY = 5,
    
        [System.Runtime.Serialization.EnumMember(Value = @"TRAM")]
        TRAM = 6,
    
        [System.Runtime.Serialization.EnumMember(Value = @"BUS")]
        BUS = 7,
    
        [System.Runtime.Serialization.EnumMember(Value = @"FERRY")]
        FERRY = 8,
    
        [System.Runtime.Serialization.EnumMember(Value = @"FLIGHT")]
        FLIGHT = 9,
    
        [System.Runtime.Serialization.EnumMember(Value = @"CAR")]
        CAR = 10,
    
        [System.Runtime.Serialization.EnumMember(Value = @"TAXI")]
        TAXI = 11,
    
        [System.Runtime.Serialization.EnumMember(Value = @"SHUTTLE")]
        SHUTTLE = 12,
    
        [System.Runtime.Serialization.EnumMember(Value = @"BIKE")]
        BIKE = 13,
    
        [System.Runtime.Serialization.EnumMember(Value = @"SCOOTER")]
        SCOOTER = 14,
    
        [System.Runtime.Serialization.EnumMember(Value = @"WALK")]
        WALK = 15,
    
        [System.Runtime.Serialization.EnumMember(Value = @"UNKNOWN")]
        UNKNOWN = 16,
    
    }
    
    /// <summary>Sort keys for time based sorting.
    /// - TIME (Sorting based on best known time information ie real before preview before schedule)
    /// - TIME_SCHEDULE (Sorting based on schedule time)</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.2.1.0 (Newtonsoft.Json v12.0.0.2)")]
    public enum SortKeyTime
    {
        [System.Runtime.Serialization.EnumMember(Value = @"TIME")]
        TIME = 0,
    
        [System.Runtime.Serialization.EnumMember(Value = @"TIME_SCHEDULE")]
        TIME_SCHEDULE = 1,
    
    }
    
    /// <summary>Information on the operator [Betreiber] and the administration [Verwaltung] of the journey.</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.2.1.0 (Newtonsoft.Json v12.0.0.2)")]
    public partial class Administration 
    {
        /// <summary>Unique id of the administration [Verwaltung].</summary>
        [Newtonsoft.Json.JsonProperty("administrationID", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string AdministrationID { get; set; }
    
        /// <summary>Unique code of the operator [Betreiber].</summary>
        [Newtonsoft.Json.JsonProperty("operatorCode", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string OperatorCode { get; set; }
    
        /// <summary>Name of the operator [Betreiber].</summary>
        [Newtonsoft.Json.JsonProperty("operatorName", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string OperatorName { get; set; }
    
        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();
    
        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }
    
    
    }
    
    /// <summary>Arrival board [Ankunftstafel] for public transports [Oeffentliche Verkehre] ie trains, buses, trams, subways etc.</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.2.1.0 (Newtonsoft.Json v12.0.0.2)")]
    public partial class BoardPublicArrival 
    {
        /// <summary>List of available arrivals [Ankuenfte].</summary>
        [Newtonsoft.Json.JsonProperty("arrivals", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public System.Collections.Generic.ICollection<StopArrival> Arrivals { get; set; } = new System.Collections.ObjectModel.Collection<StopArrival>();
    
        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();
    
        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }
    
    
    }
    
    /// <summary>Message for customers and or employees, depends on type.</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.2.1.0 (Newtonsoft.Json v12.0.0.2)")]
    public partial class Message 
    {
        /// <summary>Unique code of message may be empty for type = 'CUSTOMER_TEXT'.</summary>
        [Newtonsoft.Json.JsonProperty("code", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Code { get; set; }
    
        [Newtonsoft.Json.JsonProperty("type", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public MessageType Type { get; set; }
    
        /// <summary>Freetext of message.</summary>
        [Newtonsoft.Json.JsonProperty("text", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Text { get; set; }
    
        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();
    
        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }
    
    
    }
    
    /// <summary>Classification of message.
    /// - CUSTOMER_TEXT (?)
    /// - QUALITY_VARIATION (?)
    /// - CUSTOMER_REASON (?)</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.2.1.0 (Newtonsoft.Json v12.0.0.2)")]
    public enum MessageType
    {
        [System.Runtime.Serialization.EnumMember(Value = @"CUSTOMER_TEXT")]
        CUSTOMER_TEXT = 0,
    
        [System.Runtime.Serialization.EnumMember(Value = @"QUALITY_VARIATION")]
        QUALITY_VARIATION = 1,
    
        [System.Runtime.Serialization.EnumMember(Value = @"CUSTOMER_REASON")]
        CUSTOMER_REASON = 2,
    
    }
    
    /// <summary>Comprehensive station [Bahnhof] information.</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.2.1.0 (Newtonsoft.Json v12.0.0.2)")]
    public partial class StationShort 
    {
        /// <summary>Eva number of station.</summary>
        [Newtonsoft.Json.JsonProperty("evaNumber", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string EvaNumber { get; set; }
    
        /// <summary>Name for station in fixed language.</summary>
        [Newtonsoft.Json.JsonProperty("name", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Name { get; set; }
    
        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();
    
        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }
    
    
    }
    
    /// <summary>Arrival [Ankunft] information within arrival boards.</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.2.1.0 (Newtonsoft.Json v12.0.0.2)")]
    public partial class StopArrival 
    {
        [Newtonsoft.Json.JsonProperty("station", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public StationShort Station { get; set; } = new StationShort();
    
        /// <summary>ID of journey [FahrtID].</summary>
        [Newtonsoft.Json.JsonProperty("journeyID", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string JourneyID { get; set; }
    
        /// <summary>Scheduled time [Abfahrtszeit Soll] of stop as fully qualified date (for instance '2019-08-19T12:56:14+02:00' or '2019-08-19T10:56:14Z').</summary>
        [Newtonsoft.Json.JsonProperty("timeSchedule", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.DateTimeOffset TimeSchedule { get; set; }
    
        [Newtonsoft.Json.JsonProperty("timeType", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public TimeType TimeType { get; set; }
    
        /// <summary>Best known time information of stop as fully qualified date (for instance '2019-08-19T12:56:14+02:00' or '2019-08-19T10:56:14Z').</summary>
        [Newtonsoft.Json.JsonProperty("time", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public System.DateTimeOffset Time { get; set; }
    
        /// <summary>Scheduled platform [Gleis, Bahnsteig, Plattform] the transport departs at.</summary>
        [Newtonsoft.Json.JsonProperty("platformSchedule", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string PlatformSchedule { get; set; }
    
        /// <summary>Actual platform [Gleis, Bahnsteig, Plattform] the transport departs at.</summary>
        [Newtonsoft.Json.JsonProperty("platform", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Platform { get; set; }
    
        [Newtonsoft.Json.JsonProperty("administration", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public Administration Administration { get; set; } = new Administration();
    
        /// <summary>List of available messages to display for this departure.</summary>
        [Newtonsoft.Json.JsonProperty("messages", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<Message> Messages { get; set; }
    
        /// <summary>ID of arrival [AnkunftID].</summary>
        [Newtonsoft.Json.JsonProperty("arrivalID", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string ArrivalID { get; set; }
    
        [Newtonsoft.Json.JsonProperty("transport", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public TransportPublicOriginVia Transport { get; set; } = new TransportPublicOriginVia();
    
        /// <summary>Indicates whether the arrival has been canceled [Haltausfall].</summary>
        [Newtonsoft.Json.JsonProperty("canceled", Required = Newtonsoft.Json.Required.Always)]
        public bool Canceled { get; set; }
    
        /// <summary>Indicates whether this arrival is additional [Zusatzhalt], meaning not be part of the regular schedule.</summary>
        [Newtonsoft.Json.JsonProperty("additional", Required = Newtonsoft.Json.Required.Always)]
        public bool Additional { get; set; }
    
        /// <summary>List of transports this journey reliefs for [Entlastungszug].</summary>
        [Newtonsoft.Json.JsonProperty("reliefFor", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<TransportPublicReferenceOrigin> ReliefFor { get; set; }
    
        /// <summary>List of transports this journey is reliefed by [Entlastungszug].</summary>
        [Newtonsoft.Json.JsonProperty("reliefBy", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<TransportPublicReferenceOrigin> ReliefBy { get; set; }
    
        /// <summary>List of transports this journey replaces [Ersatzzug].</summary>
        [Newtonsoft.Json.JsonProperty("replacementFor", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<TransportPublicReferenceOrigin> ReplacementFor { get; set; }
    
        /// <summary>List of transports this journey is replaced by [Ersatzzug].</summary>
        [Newtonsoft.Json.JsonProperty("replacedBy", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<TransportPublicReferenceOrigin> ReplacedBy { get; set; }
    
        [Newtonsoft.Json.JsonProperty("continuationFor", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public TransportPublicReferenceOrigin ContinuationFor { get; set; }
    
        /// <summary>List of journeys this journey travels with [Vereinigt Mit].</summary>
        [Newtonsoft.Json.JsonProperty("travelsWith", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<TransportPublicReferenceOrigin> TravelsWith { get; set; }
    
        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();
    
        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }
    
    
    }
    
    /// <summary>Stop at a particular station [Bahnhof] for arrival / departure boards.</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.2.1.0 (Newtonsoft.Json v12.0.0.2)")]
    public partial class StopAtStation 
    {
        /// <summary>Eva number of station.</summary>
        [Newtonsoft.Json.JsonProperty("evaNumber", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string EvaNumber { get; set; }
    
        /// <summary>Name for station in fixed language.</summary>
        [Newtonsoft.Json.JsonProperty("name", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Name { get; set; }
    
        /// <summary>Indicates whether the stop ie departure / arrival has been canceled [Haltausfall].</summary>
        [Newtonsoft.Json.JsonProperty("canceled", Required = Newtonsoft.Json.Required.Always)]
        public bool Canceled { get; set; }
    
        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();
    
        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }
    
    
    }
    
    /// <summary>Stop at a particular station [Bahnhof] for arrival / departure boards with display priority [Anzeigeprioritaet].</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.2.1.0 (Newtonsoft.Json v12.0.0.2)")]
    public partial class StopAtStationPrio 
    {
        /// <summary>Eva number of station.</summary>
        [Newtonsoft.Json.JsonProperty("evaNumber", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string EvaNumber { get; set; }
    
        /// <summary>Name for station in fixed language.</summary>
        [Newtonsoft.Json.JsonProperty("name", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Name { get; set; }
    
        /// <summary>Indicates whether the stop ie departure / arrival has been canceled [Haltausfall].</summary>
        [Newtonsoft.Json.JsonProperty("canceled", Required = Newtonsoft.Json.Required.Always)]
        public bool Canceled { get; set; }
    
        /// <summary>Indicates whether this departure is additional [Zusatzhalt], meaning not be part of the regular schedule.</summary>
        [Newtonsoft.Json.JsonProperty("additional", Required = Newtonsoft.Json.Required.Always)]
        public bool Additional { get; set; }
    
        /// <summary>Display priority for station within via list.</summary>
        [Newtonsoft.Json.JsonProperty("displayPriority", Required = Newtonsoft.Json.Required.Always)]
        public int DisplayPriority { get; set; }
    
        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();
    
        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }
    
    
    }
    
    /// <summary>Specifies whether 'time' is based on schedule or preview.
    /// - SCHEDULE (Time source is schedule)
    /// - PREVIEW (Time source is preview / forecast)
    /// - REAL (Time source is real)</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.2.1.0 (Newtonsoft.Json v12.0.0.2)")]
    public enum TimeType
    {
        [System.Runtime.Serialization.EnumMember(Value = @"SCHEDULE")]
        SCHEDULE = 0,
    
        [System.Runtime.Serialization.EnumMember(Value = @"PREVIEW")]
        PREVIEW = 1,
    
        [System.Runtime.Serialization.EnumMember(Value = @"REAL")]
        REAL = 2,
    
    }
    
    /// <summary>Public transport [Oeffentlicher Transport] with origin [Herkunft] and via [Via-Halte].</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.2.1.0 (Newtonsoft.Json v12.0.0.2)")]
    public partial class TransportPublicOriginVia 
    {
        [Newtonsoft.Json.JsonProperty("type", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public TransportType Type { get; set; }
    
        /// <summary>Code of the transport [Fahrtgattung].</summary>
        [Newtonsoft.Json.JsonProperty("category", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Category { get; set; }
    
        /// <summary>Number of the transport [Fahrtnummer].</summary>
        [Newtonsoft.Json.JsonProperty("number", Required = Newtonsoft.Json.Required.Always)]
        public int Number { get; set; }
    
        /// <summary>Line of the transport [Linie].</summary>
        [Newtonsoft.Json.JsonProperty("line", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Line { get; set; }
    
        /// <summary>Marketing - or product name of the transport, for instance 'Sprinter' or 'Schwarzwaldexpress' etc. [Marketing Name / Produkt Name].</summary>
        [Newtonsoft.Json.JsonProperty("label", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Label { get; set; }
    
        [Newtonsoft.Json.JsonProperty("origin", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public StopAtStation Origin { get; set; } = new StopAtStation();
    
        /// <summary>List of past stations the transport stoped at.</summary>
        [Newtonsoft.Json.JsonProperty("via", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public System.Collections.Generic.ICollection<StopAtStationPrio> Via { get; set; } = new System.Collections.ObjectModel.Collection<StopAtStationPrio>();
    
        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();
    
        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }
    
    
    }
    
    /// <summary>Public transport reference [Oeffentliche Transport Referenz / Fahrtreferenz] with origin [Herkunft] and journey id [FahrtID].</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.2.1.0 (Newtonsoft.Json v12.0.0.2)")]
    public partial class TransportPublicReferenceOrigin 
    {
        [Newtonsoft.Json.JsonProperty("type", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public TransportType Type { get; set; }
    
        /// <summary>Code of the transport [Fahrtgattung].</summary>
        [Newtonsoft.Json.JsonProperty("category", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Category { get; set; }
    
        /// <summary>Number of the transport [Fahrtnummer].</summary>
        [Newtonsoft.Json.JsonProperty("number", Required = Newtonsoft.Json.Required.Always)]
        public int Number { get; set; }
    
        /// <summary>Line of the transport [Linie].</summary>
        [Newtonsoft.Json.JsonProperty("line", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Line { get; set; }
    
        /// <summary>Marketing - or product name of the transport, for instance 'Sprinter' or 'Schwarzwaldexpress' etc. [Marketing Name / Produkt Name].</summary>
        [Newtonsoft.Json.JsonProperty("label", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Label { get; set; }
    
        [Newtonsoft.Json.JsonProperty("origin", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public StationShort Origin { get; set; } = new StationShort();
    
        /// <summary>ID of the journey [FahrtID].</summary>
        [Newtonsoft.Json.JsonProperty("journeyID", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string JourneyID { get; set; }
    
        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();
    
        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }
    
    
    }
    
    /// <summary>Departure board [Abfahrtstafel] for public transports [Oeffentliche Verkehre] ie trains, buses, trams, subways etc..</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.2.1.0 (Newtonsoft.Json v12.0.0.2)")]
    public partial class BoardPublicDeparture 
    {
        /// <summary>List of available departures [Abfahrten].</summary>
        [Newtonsoft.Json.JsonProperty("departures", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public System.Collections.Generic.ICollection<StopDeparture> Departures { get; set; } = new System.Collections.ObjectModel.Collection<StopDeparture>();
    
        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();
    
        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }
    
    
    }
    
    /// <summary>Departure [Abfahrt] information within departure boards.</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.2.1.0 (Newtonsoft.Json v12.0.0.2)")]
    public partial class StopDeparture 
    {
        [Newtonsoft.Json.JsonProperty("station", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public StationShort Station { get; set; } = new StationShort();
    
        /// <summary>ID of journey [FahrtID].</summary>
        [Newtonsoft.Json.JsonProperty("journeyID", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string JourneyID { get; set; }
    
        /// <summary>Scheduled time [Abfahrtszeit Soll] of stop as fully qualified date (for instance '2019-08-19T12:56:14+02:00' or '2019-08-19T10:56:14Z').</summary>
        [Newtonsoft.Json.JsonProperty("timeSchedule", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.DateTimeOffset TimeSchedule { get; set; }
    
        [Newtonsoft.Json.JsonProperty("timeType", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public TimeType TimeType { get; set; }
    
        /// <summary>Best known time information of stop as fully qualified date (for instance '2019-08-19T12:56:14+02:00' or '2019-08-19T10:56:14Z').</summary>
        [Newtonsoft.Json.JsonProperty("time", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public System.DateTimeOffset Time { get; set; }
    
        /// <summary>Scheduled platform [Gleis, Bahnsteig, Plattform] the transport departs at.</summary>
        [Newtonsoft.Json.JsonProperty("platformSchedule", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string PlatformSchedule { get; set; }
    
        /// <summary>Actual platform [Gleis, Bahnsteig, Plattform] the transport departs at.</summary>
        [Newtonsoft.Json.JsonProperty("platform", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Platform { get; set; }
    
        [Newtonsoft.Json.JsonProperty("administration", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public Administration Administration { get; set; } = new Administration();
    
        /// <summary>List of available messages to display for this departure.</summary>
        [Newtonsoft.Json.JsonProperty("messages", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<Message> Messages { get; set; }
    
        /// <summary>ID of departure [AbfahrtID].</summary>
        [Newtonsoft.Json.JsonProperty("departureID", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string DepartureID { get; set; }
    
        [Newtonsoft.Json.JsonProperty("transport", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public TransportPublicDestinationVia Transport { get; set; } = new TransportPublicDestinationVia();
    
        /// <summary>Indicates whether the departure has been canceled [Haltausfall].</summary>
        [Newtonsoft.Json.JsonProperty("canceled", Required = Newtonsoft.Json.Required.Always)]
        public bool Canceled { get; set; }
    
        /// <summary>Indicates whether this departure is additional [Zusatzhalt], meaning not be part of the regular schedule.</summary>
        [Newtonsoft.Json.JsonProperty("additional", Required = Newtonsoft.Json.Required.Always)]
        public bool Additional { get; set; }
    
        /// <summary>List of transports this journey reliefs for [Entlastungszug].</summary>
        [Newtonsoft.Json.JsonProperty("reliefFor", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<TransportPublicReferenceDestination> ReliefFor { get; set; }
    
        /// <summary>List of transports this journey is reliefed by [Entlastungszug].</summary>
        [Newtonsoft.Json.JsonProperty("reliefBy", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<TransportPublicReferenceDestination> ReliefBy { get; set; }
    
        /// <summary>List of transports this journey replaces [Ersatzzug].</summary>
        [Newtonsoft.Json.JsonProperty("replacementFor", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<TransportPublicReferenceDestination> ReplacementFor { get; set; }
    
        /// <summary>List of transports this journey is replaced by [Ersatzzug].</summary>
        [Newtonsoft.Json.JsonProperty("replacedBy", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<TransportPublicReferenceDestination> ReplacedBy { get; set; }
    
        [Newtonsoft.Json.JsonProperty("continuationBy", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public TransportPublicReferenceDestination ContinuationBy { get; set; }
    
        /// <summary>List of journeys this journey travels with [Vereinigt Mit].</summary>
        [Newtonsoft.Json.JsonProperty("travelsWith", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<TransportPublicReferenceDestination> TravelsWith { get; set; }
    
        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();
    
        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }
    
    
    }
    
    /// <summary>Public transport [Oeffentlicher Transport] with destination [Ziel] and via [Via-Halte].</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.2.1.0 (Newtonsoft.Json v12.0.0.2)")]
    public partial class TransportPublicDestinationVia 
    {
        [Newtonsoft.Json.JsonProperty("type", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public TransportType Type { get; set; }
    
        /// <summary>Code of the transport [Fahrtgattung].</summary>
        [Newtonsoft.Json.JsonProperty("category", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Category { get; set; }
    
        /// <summary>Number of the transport [Fahrtnummer].</summary>
        [Newtonsoft.Json.JsonProperty("number", Required = Newtonsoft.Json.Required.Always)]
        public int Number { get; set; }
    
        /// <summary>Line of the transport [Linie].</summary>
        [Newtonsoft.Json.JsonProperty("line", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Line { get; set; }
    
        /// <summary>Marketing - or product name of the transport, for instance 'Sprinter' or 'Schwarzwaldexpress' etc. [Marketing Name / Produkt Name].</summary>
        [Newtonsoft.Json.JsonProperty("label", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Label { get; set; }
    
        [Newtonsoft.Json.JsonProperty("destination", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public StopAtStation Destination { get; set; } = new StopAtStation();
    
        /// <summary>List of remaining stations the transport stops at [ViaHalt].</summary>
        [Newtonsoft.Json.JsonProperty("via", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public System.Collections.Generic.ICollection<StopAtStationPrio> Via { get; set; } = new System.Collections.ObjectModel.Collection<StopAtStationPrio>();
    
        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();
    
        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }
    
    
    }
    
    /// <summary>Public transport reference [Fahrtreferenz] containing journey id [FahrtID] and scheduled destination [Zielhalt].</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.2.1.0 (Newtonsoft.Json v12.0.0.2)")]
    public partial class TransportPublicReferenceDestination 
    {
        [Newtonsoft.Json.JsonProperty("type", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public TransportType Type { get; set; }
    
        /// <summary>Code of the transport [Fahrtgattung].</summary>
        [Newtonsoft.Json.JsonProperty("category", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Category { get; set; }
    
        /// <summary>Number of the transport [Fahrtnummer].</summary>
        [Newtonsoft.Json.JsonProperty("number", Required = Newtonsoft.Json.Required.Always)]
        public int Number { get; set; }
    
        /// <summary>Line of the transport [Linie].</summary>
        [Newtonsoft.Json.JsonProperty("line", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Line { get; set; }
    
        /// <summary>Marketing - or product name of the transport, for instance 'Sprinter' or 'Schwarzwaldexpress' etc. [Marketing Name / Produkt Name].</summary>
        [Newtonsoft.Json.JsonProperty("label", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Label { get; set; }
    
        [Newtonsoft.Json.JsonProperty("destination", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public StationShort Destination { get; set; } = new StationShort();
    
        /// <summary>ID of the journey [FahrtID].</summary>
        [Newtonsoft.Json.JsonProperty("journeyID", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string JourneyID { get; set; }
    
        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();
    
        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }
    
    
    }
    
    /// <summary>Enumerates all identifiers a stop-place [Haltestelle] can be mapped into or mapped from.
    /// - IFOPT (transmodel identifier for fixed objects, in germany dhid = Deutschlandweitere Halte ID)
    /// - EVA (eva number)
    /// - RL100 (rl100 / ds100)
    /// - EPA (epa uic number)
    /// - STADA (statitionsdatenbank number)
    /// - IBNR (interne bahnhofsnummer)</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.2.1.0 (Newtonsoft.Json v12.0.0.2)")]
    public enum StopPlaceKeyType
    {
        [System.Runtime.Serialization.EnumMember(Value = @"IFOPT")]
        IFOPT = 0,
    
        [System.Runtime.Serialization.EnumMember(Value = @"EVA")]
        EVA = 1,
    
        [System.Runtime.Serialization.EnumMember(Value = @"RL100")]
        RL100 = 2,
    
        [System.Runtime.Serialization.EnumMember(Value = @"EPA")]
        EPA = 3,
    
        [System.Runtime.Serialization.EnumMember(Value = @"STADA")]
        STADA = 4,
    
        [System.Runtime.Serialization.EnumMember(Value = @"IBNR")]
        IBNR = 5,
    
    }
    
    /// <summary>Key mapping for a stop place [Haltestelle].</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.2.1.0 (Newtonsoft.Json v12.0.0.2)")]
    public partial class StopPlaceKey 
    {
        [Newtonsoft.Json.JsonProperty("type", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public StopPlaceKeyType Type { get; set; }
    
        /// <summary>Key value.</summary>
        [Newtonsoft.Json.JsonProperty("key", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Key { get; set; }
    
        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();
    
        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }
    
    
    }
    
    /// <summary>Different key mappings a stop place [Haltestelle] may have.</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.2.1.0 (Newtonsoft.Json v12.0.0.2)")]
    public partial class StopPlaceKeys 
    {
        /// <summary>Eva number of stop place.</summary>
        [Newtonsoft.Json.JsonProperty("evaNumber", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string EvaNumber { get; set; }
    
        /// <summary>List of stop place keys.</summary>
        [Newtonsoft.Json.JsonProperty("keys", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public System.Collections.Generic.ICollection<StopPlaceKey> Keys { get; set; } = new System.Collections.ObjectModel.Collection<StopPlaceKey>();
    
        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();
    
        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }
    
    
    }
    
    /// <summary>Platform [Gleis, Bahnsteig, Plattform] information. All ranges and positions of objects are given in meter in local coordinates, e.g. as a distance to a fixed point somewhere on the platform and differentiating between the two possible directions by a plus- and a minus-sign.</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.2.1.0 (Newtonsoft.Json v12.0.0.2)")]
    public partial class Platform 
    {
        /// <summary>Name of the platform.</summary>
        [Newtonsoft.Json.JsonProperty("name", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Name { get; set; }
    
        /// <summary>Start of the usable part of the platform given in meter in local coordinates. This value may differ from zero and may be positive as well as negative.</summary>
        [Newtonsoft.Json.JsonProperty("start", Required = Newtonsoft.Json.Required.Always)]
        public double Start { get; set; }
    
        /// <summary>End of the usable part of the platform given in meter in local coordinates.</summary>
        [Newtonsoft.Json.JsonProperty("end", Required = Newtonsoft.Json.Required.Always)]
        public double End { get; set; }
    
        /// <summary>Identifier of physical platform [Bahnsteig] this platform / subplatform belongs to. (platform '12' and platform '13' may belong to the same physcial platform '12/13')</summary>
        [Newtonsoft.Json.JsonProperty("physicalPlatform", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string PhysicalPlatform { get; set; }
    
        /// <summary>Name of parent platform in case this is a subplatform [Teilgleis].</summary>
        [Newtonsoft.Json.JsonProperty("parentPlatform", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ParentPlatform { get; set; }
    
        /// <summary>List of sectors [Sektoren] that belong to the platform.</summary>
        [Newtonsoft.Json.JsonProperty("sectors", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<Sector> Sectors { get; set; }
    
        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();
    
        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }
    
    
    }
    
    /// <summary>Platform [Gleis, Bahnsteig, Plattform] sector [Gleisabschnitt, Steigabschnitt] information.</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.2.1.0 (Newtonsoft.Json v12.0.0.2)")]
    public partial class Sector 
    {
        /// <summary>Name of the sector [Sektor / Mast etc.].</summary>
        [Newtonsoft.Json.JsonProperty("name", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Name { get; set; }
    
        /// <summary>Start of the sector given in meters in local coordinates.</summary>
        [Newtonsoft.Json.JsonProperty("start", Required = Newtonsoft.Json.Required.Always)]
        public double Start { get; set; }
    
        /// <summary>End of the sector given in meters in local coordinates.</summary>
        [Newtonsoft.Json.JsonProperty("end", Required = Newtonsoft.Json.Required.Always)]
        public double End { get; set; }
    
        /// <summary>Position of the cube [Sektorwuerfel] given in meters in local coordinates.</summary>
        [Newtonsoft.Json.JsonProperty("cubePosition", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double CubePosition { get; set; }
    
        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();
    
        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }
    
    
    }
    
    /// <summary>Locale to use, defaults to DE.
    /// - DE (German)
    /// - EN (English)
    /// - FR (French)
    /// - IT (Italian)</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.2.1.0 (Newtonsoft.Json v12.0.0.2)")]
    public enum Locale
    {
        [System.Runtime.Serialization.EnumMember(Value = @"DE")]
        DE = 0,
    
        [System.Runtime.Serialization.EnumMember(Value = @"EN")]
        EN = 1,
    
        [System.Runtime.Serialization.EnumMember(Value = @"FR")]
        FR = 2,
    
        [System.Runtime.Serialization.EnumMember(Value = @"IT")]
        IT = 3,
    
    }
    
    /// <summary>2D Coordinate within geo reference system.</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.2.1.0 (Newtonsoft.Json v12.0.0.2)")]
    public partial class Coordinate2D 
    {
        /// <summary>Longitude position in reference system.</summary>
        [Newtonsoft.Json.JsonProperty("longitude", Required = Newtonsoft.Json.Required.Always)]
        public double Longitude { get; set; }
    
        /// <summary>Latitude position in reference system.</summary>
        [Newtonsoft.Json.JsonProperty("latitude", Required = Newtonsoft.Json.Required.Always)]
        public double Latitude { get; set; }
    
        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();
    
        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }
    
    
    }
    
    /// <summary>Base information for a stop place [Haltestelle].</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.2.1.0 (Newtonsoft.Json v12.0.0.2)")]
    public partial class StopPlace 
    {
        /// <summary>Eva number of stop place.</summary>
        [Newtonsoft.Json.JsonProperty("evaNumber", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string EvaNumber { get; set; }
    
        /// <summary>ID of station [Bahnhof] the stop place belongs to [usually the STADA code for S&amp;S], may be empty when stop place is not part of a station.</summary>
        [Newtonsoft.Json.JsonProperty("stationID", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string StationID { get; set; }
    
        /// <summary>Language dependent names for stop place.</summary>
        [Newtonsoft.Json.JsonProperty("names", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public System.Collections.Generic.IDictionary<string, StopPlaceName> Names { get; set; } = new System.Collections.Generic.Dictionary<string, StopPlaceName>();
    
        /// <summary>Language dependent name for metropolis [Metropole].</summary>
        [Newtonsoft.Json.JsonProperty("metropolis", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.IDictionary<string, string> Metropolis { get; set; }
    
        /// <summary>Available transport types [Verkehrsarten] at stop place.</summary>
        [Newtonsoft.Json.JsonProperty("availableTransports", Required = Newtonsoft.Json.Required.Always, ItemConverterType = typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        [System.ComponentModel.DataAnnotations.Required]
        public System.Collections.Generic.ICollection<TransportType> AvailableTransports { get; set; } = new System.Collections.ObjectModel.Collection<TransportType>();
    
        /// <summary>Country [Staat / Land] the stop place belongs to as ISO 3166-1 alpha-3 code [germany = DEU for instance].</summary>
        [Newtonsoft.Json.JsonProperty("countryCode", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string CountryCode { get; set; }
    
        /// <summary>Date the stop place is valid from.</summary>
        [Newtonsoft.Json.JsonProperty("validFrom", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public System.DateTimeOffset ValidFrom { get; set; }
    
        /// <summary>Date the stop place is valid to.</summary>
        [Newtonsoft.Json.JsonProperty("validTo", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.DateTimeOffset ValidTo { get; set; }
    
        [Newtonsoft.Json.JsonProperty("position", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Coordinate2D Position { get; set; }
    
        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();
    
        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }
    
    
    }
    
    /// <summary>Name information for stop place [Haltestelle].</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.2.1.0 (Newtonsoft.Json v12.0.0.2)")]
    public partial class StopPlaceName 
    {
        /// <summary>Full long name for stop place.</summary>
        [Newtonsoft.Json.JsonProperty("nameLong", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string NameLong { get; set; }
    
        /// <summary>Short name for stop place.</summary>
        [Newtonsoft.Json.JsonProperty("nameShort", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string NameShort { get; set; }
    
        /// <summary>Name that is applicable for local areas, for instance 'Berlin Zoologischer Garten' may become 'B Zoologischer Garten'.</summary>
        [Newtonsoft.Json.JsonProperty("nameLocal", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string NameLocal { get; set; }
    
        /// <summary>Name speech information for stop place [Haltestelle].</summary>
        [Newtonsoft.Json.JsonProperty("speech", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Speech { get; set; }
    
        /// <summary>Symbol information [UTF-8] for stop place [Haltestelle].</summary>
        [Newtonsoft.Json.JsonProperty("symbol", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Symbol { get; set; }
    
        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();
    
        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }
    
    
    }
    
    /// <summary>Different sorting keys for stop place queries.
    /// - RELEVANCE (stop places are sorted by relevance descending (central stations etc. first))
    /// - QUERY_MATCH (stop places are sorted by matching the provided query descending)</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.2.1.0 (Newtonsoft.Json v12.0.0.2)")]
    public enum StopPlaceSortKey
    {
        [System.Runtime.Serialization.EnumMember(Value = @"RELEVANCE")]
        RELEVANCE = 0,
    
        [System.Runtime.Serialization.EnumMember(Value = @"QUERY_MATCH")]
        QUERY_MATCH = 1,
    
    }
    
    /// <summary>Search result information for a stop place [Haltestelle].</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.2.1.0 (Newtonsoft.Json v12.0.0.2)")]
    public partial class StopPlaceSearchResult 
    {
        /// <summary>Eva number of stop place.</summary>
        [Newtonsoft.Json.JsonProperty("evaNumber", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string EvaNumber { get; set; }
    
        /// <summary>Language dependent names for stop place.</summary>
        [Newtonsoft.Json.JsonProperty("names", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public System.Collections.Generic.IDictionary<string, StopPlaceName> Names { get; set; } = new System.Collections.Generic.Dictionary<string, StopPlaceName>();
    
        /// <summary>Available transport types [Verkehrsarten] at stop place.</summary>
        [Newtonsoft.Json.JsonProperty("availableTransports", Required = Newtonsoft.Json.Required.Always, ItemConverterType = typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        [System.ComponentModel.DataAnnotations.Required]
        public System.Collections.Generic.ICollection<TransportType> AvailableTransports { get; set; } = new System.Collections.ObjectModel.Collection<TransportType>();
    
        [Newtonsoft.Json.JsonProperty("position", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Coordinate2D Position { get; set; }
    
        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();
    
        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }
    
    
    }
    
    /// <summary>Stop place [Haltestelle] search result.</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.2.1.0 (Newtonsoft.Json v12.0.0.2)")]
    public partial class StopPlaceSearchResults 
    {
        [Newtonsoft.Json.JsonProperty("stopPlaces", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<StopPlaceSearchResult> StopPlaces { get; set; }
    
        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();
    
        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }
    
    
    }
    
    /// <summary>Stop place [Haltestelle] result.</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.2.1.0 (Newtonsoft.Json v12.0.0.2)")]
    public partial class StopPlaces 
    {
        [Newtonsoft.Json.JsonProperty("stopPlaces", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<StopPlace> StopPlaces1 { get; set; }
    
        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();
    
        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }
    
    
    }
    
    /// <summary>Possible groups [Station] a set of stop places [Haltestellen] may belong to.
    /// - STATION (group defined by station, for instance FFM = Hoch + Tief)</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.2.1.0 (Newtonsoft.Json v12.0.0.2)")]
    public enum StopPlaceGroupType
    {
        [System.Runtime.Serialization.EnumMember(Value = @"STATION")]
        STATION = 0,
    
    }
    
    /// <summary>Specifies different personae.
    /// - HANDICAPPED (Handicaped [MER] slow traveller, not able to use stairs and escalators)
    /// - OCCASIONAL_TRAVELLER (Occasional traveller [Gelegenheits-Reisender / Standard-Reisender] having mean walking speed. This is the default traveller.)
    /// - FREQUENT_TRAVELLER (Frequent traveller [Pendler] having higher speed than occasional traveller.)</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.2.1.0 (Newtonsoft.Json v12.0.0.2)")]
    public enum PersonaType
    {
        [System.Runtime.Serialization.EnumMember(Value = @"HANDICAPPED")]
        HANDICAPPED = 0,
    
        [System.Runtime.Serialization.EnumMember(Value = @"OCCASIONAL_TRAVELLER")]
        OCCASIONAL_TRAVELLER = 1,
    
        [System.Runtime.Serialization.EnumMember(Value = @"FREQUENT_TRAVELLER")]
        FREQUENT_TRAVELLER = 2,
    
    }
    
    /// <summary>Connecting time [Umstiegszeit] from a particular stop place [Haltestelle], platform [Gleis, Bahnsteig, Plattform] and optional sector [Gleisabschnitt, Steigabschnitt] to a particular station, platform and optional sector.</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.2.1.0 (Newtonsoft.Json v12.0.0.2)")]
    public partial class ConnectingTime 
    {
        /// <summary>Eva number of stop place [Haltestelle] to connect from.</summary>
        [Newtonsoft.Json.JsonProperty("fromEvaNumber", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string FromEvaNumber { get; set; }
    
        /// <summary>Platform [Gleis, Bahnsteig, Plattform] of stop place to connect from.</summary>
        [Newtonsoft.Json.JsonProperty("fromPlatform", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string FromPlatform { get; set; }
    
        /// <summary>Sector [Gleisabschnitt, Steigabschnitt] of stop place to connect from.</summary>
        [Newtonsoft.Json.JsonProperty("fromSector", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string FromSector { get; set; }
    
        /// <summary>Eva number stop place to connect to.</summary>
        [Newtonsoft.Json.JsonProperty("toEvaNumber", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string ToEvaNumber { get; set; }
    
        /// <summary>Platform [Gleis, Bahnsteig, Plattform] of stop place [Haltestelle] to connect to.</summary>
        [Newtonsoft.Json.JsonProperty("toPlatform", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string ToPlatform { get; set; }
    
        /// <summary>Sector [Gleisabschnitt, Steigabschnitt] of stop place [Haltestelle] to connect from.</summary>
        [Newtonsoft.Json.JsonProperty("toSector", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ToSector { get; set; }
    
        /// <summary>Connecting times fo different personae.</summary>
        [Newtonsoft.Json.JsonProperty("times", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public System.Collections.Generic.ICollection<ConnectionTime> Times { get; set; } = new System.Collections.ObjectModel.Collection<ConnectionTime>();
    
        [Newtonsoft.Json.JsonProperty("source", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public ConnectingTimeSource Source { get; set; }
    
        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();
    
        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }
    
    
    }
    
    /// <summary>Enumerates all possible sources for connecting times [Umstiegszeiten].
    /// - FALLBACK (no specific information available, fixed constant used)
    /// - RIL420 (connecting time is based on DB guideline RIL420)
    /// - INDOOR_ROUTNG (connecting time is based on real indoor routing information from ris-maps system)</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.2.1.0 (Newtonsoft.Json v12.0.0.2)")]
    public enum ConnectingTimeSource
    {
        [System.Runtime.Serialization.EnumMember(Value = @"FALLBACK")]
        FALLBACK = 0,
    
        [System.Runtime.Serialization.EnumMember(Value = @"RIL420")]
        RIL420 = 1,
    
        [System.Runtime.Serialization.EnumMember(Value = @"INDOOR_ROUTNG")]
        INDOOR_ROUTNG = 2,
    
    }
    
    /// <summary>List of connecting times [Umstiegszeiten] for requested list of stop places [Haltestellen].</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.2.1.0 (Newtonsoft.Json v12.0.0.2)")]
    public partial class ConnectingTimes 
    {
        [Newtonsoft.Json.JsonProperty("connectingTimes", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<ConnectingTime> ConnectingTimes1 { get; set; }
    
        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();
    
        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }
    
    
    }
    
    /// <summary>Connection time [Anschlusszeit] for persona.</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.2.1.0 (Newtonsoft.Json v12.0.0.2)")]
    public partial class ConnectionTime 
    {
        [Newtonsoft.Json.JsonProperty("persona", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public PersonaType Persona { get; set; }
    
        /// <summary>Distance in meters.</summary>
        [Newtonsoft.Json.JsonProperty("distance", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double Distance { get; set; }
    
        /// <summary>Duration of connect in ISO8601 (for instance 'P3Y6M4DT12H30M17S').</summary>
        [Newtonsoft.Json.JsonProperty("duration", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Duration { get; set; }
    
        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();
    
        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }
    
    
    }
    
    /// <summary>List of platforms [Gleise, Bahnsteige, Plattformen] for a station.</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.2.1.0 (Newtonsoft.Json v12.0.0.2)")]
    public partial class Platforms 
    {
        [Newtonsoft.Json.JsonProperty("platforms", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<Platform> Platforms1 { get; set; }
    
        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();
    
        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }
    
    
    }
    
    /// <summary>Detailed operational information to platform.</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.2.1.0 (Newtonsoft.Json v12.0.0.2)")]
    public partial class OperationalPlatform 
    {
        /// <summary>Name of the platform.</summary>
        [Newtonsoft.Json.JsonProperty("name", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Name { get; set; }
    
        /// <summary>Start of the usable part of the platform given in meter in local coordinates. This value may differ from zero and may be positive as well as negative.</summary>
        [Newtonsoft.Json.JsonProperty("start", Required = Newtonsoft.Json.Required.Always)]
        public double Start { get; set; }
    
        /// <summary>End of the usable part of the platform given in meter in local coordinates.</summary>
        [Newtonsoft.Json.JsonProperty("end", Required = Newtonsoft.Json.Required.Always)]
        public double End { get; set; }
    
        /// <summary>Identifier of physical platform [Bahnsteig] this platform / subplatform belongs to. (platform '12' and platform '13' may belong to the same physcial platform '12/13')</summary>
        [Newtonsoft.Json.JsonProperty("physicalPlatform", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string PhysicalPlatform { get; set; }
    
        /// <summary>Name of parent platform in case this is a subplatform [Teilgleis].</summary>
        [Newtonsoft.Json.JsonProperty("parentPlatform", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ParentPlatform { get; set; }
    
        /// <summary>List of sectors [Sektoren] that belong to the platform.</summary>
        [Newtonsoft.Json.JsonProperty("sectors", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<Sector> Sectors { get; set; }
    
        [Newtonsoft.Json.JsonProperty("operationalplatformType", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public OperationalPlatformType OperationalplatformType { get; set; }
    
        /// <summary>Positions of the reference points that determine the position of a stopping train at the platform.</summary>
        [Newtonsoft.Json.JsonProperty("referencepoints", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<ReferencePoint> Referencepoints { get; set; }
    
        /// <summary>Names of the operational units [Optiken] that belong to the platform.</summary>
        [Newtonsoft.Json.JsonProperty("optics", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<string> Optics { get; set; }
    
        /// <summary>Names of the operational platforms that belong to the platform.</summary>
        [Newtonsoft.Json.JsonProperty("operationalplatforms", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<string> Operationalplatforms { get; set; }
    
        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();
    
        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }
    
    
    }
    
    /// <summary>Type of a platform.</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.2.1.0 (Newtonsoft.Json v12.0.0.2)")]
    public enum OperationalPlatformType
    {
        [System.Runtime.Serialization.EnumMember(Value = @"TERMINAL")]
        TERMINAL = 0,
    
        [System.Runtime.Serialization.EnumMember(Value = @"THROUGH")]
        THROUGH = 1,
    
    }
    
    /// <summary>List of operational platforms [Gleise, Bahnsteige, Plattformen] for a station.</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.2.1.0 (Newtonsoft.Json v12.0.0.2)")]
    public partial class OperationalPlatforms 
    {
        [Newtonsoft.Json.JsonProperty("platforms", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<OperationalPlatform> Platforms { get; set; }
    
        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();
    
        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }
    
    
    }
    
    /// <summary>Reference point that indicates where a vehicle [Fahrzeug] stops at a platform [Gleis, Bahnsteig, Plattform].</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.2.1.0 (Newtonsoft.Json v12.0.0.2)")]
    public partial class ReferencePoint 
    {
        /// <summary>Name of the reference point.</summary>
        [Newtonsoft.Json.JsonProperty("name", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Name { get; set; }
    
        [Newtonsoft.Json.JsonProperty("referencePointType", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public ReferencePointType ReferencePointType { get; set; }
    
        /// <summary>Position of the reference point in meter in local coordinates.</summary>
        [Newtonsoft.Json.JsonProperty("position", Required = Newtonsoft.Json.Required.Always)]
        public double Position { get; set; }
    
        /// <summary>Lenght up to the reference point is to be used by a stopping formation.</summary>
        [Newtonsoft.Json.JsonProperty("maxLength", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double MaxLength { get; set; }
    
        /// <summary>Determines the direction the reference point is to be used. If true, the formation moves from origin to positive values in local coordinates.</summary>
        [Newtonsoft.Json.JsonProperty("readableFromOrigin", Required = Newtonsoft.Json.Required.Always)]
        public bool ReadableFromOrigin { get; set; }
    
        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();
    
        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }
    
    
    }
    
    /// <summary>Type of a reference point.
    /// - STOPSIGNAL (?)
    /// - STOPBOARD (?)
    /// - ORIENTATIONSIGN (?)
    /// - VIRTUALSTOPPOINT (?)</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.2.1.0 (Newtonsoft.Json v12.0.0.2)")]
    public enum ReferencePointType
    {
        [System.Runtime.Serialization.EnumMember(Value = @"STOPSIGNAL")]
        STOPSIGNAL = 0,
    
        [System.Runtime.Serialization.EnumMember(Value = @"STOPBOARD")]
        STOPBOARD = 1,
    
        [System.Runtime.Serialization.EnumMember(Value = @"ORIENTATIONSIGN")]
        ORIENTATIONSIGN = 2,
    
        [System.Runtime.Serialization.EnumMember(Value = @"VIRTUALSTOPPOINT")]
        VIRTUALSTOPPOINT = 3,
    
    }
    
    /// <summary>Represents weather information at a certain geo position for a certain date.</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.2.1.0 (Newtonsoft.Json v12.0.0.2)")]
    public partial class Weather 
    {
        [Newtonsoft.Json.JsonProperty("position", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Coordinate2D Position { get; set; }
    
        /// <summary>Time of whether information in ZULU time.</summary>
        [Newtonsoft.Json.JsonProperty("time", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.DateTimeOffset Time { get; set; }
    
        /// <summary>Temperature degress in celsius.</summary>
        [Newtonsoft.Json.JsonProperty("degrees", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double Degrees { get; set; }
    
        [Newtonsoft.Json.JsonProperty("condition", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public WeatherCondition Condition { get; set; }
    
        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();
    
        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }
    
    
    }
    
    /// <summary>Possible weather conditions like cloudy, sunny etc.</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.2.1.0 (Newtonsoft.Json v12.0.0.2)")]
    public enum WeatherCondition
    {
        [System.Runtime.Serialization.EnumMember(Value = @"CLEAR")]
        CLEAR = 0,
    
        [System.Runtime.Serialization.EnumMember(Value = @"CLEAR_NIGHT")]
        CLEAR_NIGHT = 1,
    
        [System.Runtime.Serialization.EnumMember(Value = @"CLOUDS")]
        CLOUDS = 2,
    
        [System.Runtime.Serialization.EnumMember(Value = @"FEW_CLOUDS")]
        FEW_CLOUDS = 3,
    
        [System.Runtime.Serialization.EnumMember(Value = @"FEW_CLOUDS_NIGHT")]
        FEW_CLOUDS_NIGHT = 4,
    
        [System.Runtime.Serialization.EnumMember(Value = @"RAIN")]
        RAIN = 5,
    
        [System.Runtime.Serialization.EnumMember(Value = @"MIST")]
        MIST = 6,
    
        [System.Runtime.Serialization.EnumMember(Value = @"SNOW")]
        SNOW = 7,
    
        [System.Runtime.Serialization.EnumMember(Value = @"THUNDER")]
        THUNDER = 8,
    
    }
    
    /// <summary>Indoor level [Stockwerk / Geschoss] descriptions for stations.
    /// - BASEMENT_FLOOR_1 (Basement Floor 1 [Untergeschoss / Kellergeschoss 1])
    /// - BASEMENT_FLOOR_2 (Basement Floor 2 [Untergeschoss / Kellergeschoss 2])
    /// - BASEMENT_FLOOR_3 (Basement Floor 3 [Untergeschoss / Kellergeschoss 3])
    /// - BASEMENT_FLOOR_4 (Basement Floor 4 [Untergeschoss / Kellergeschoss 4])
    /// - BASEMENT_FLOOR_5 (Basement Floor 5 [Untergeschoss / Kellergeschoss 5])
    /// - BASEMENT_FLOOR_6 (Basement Floor 6 [Untergeschoss / Kellergeschoss 6])
    /// - BASEMENT_FLOOR_7 (Basement Floor 7 [Untergeschoss / Kellergeschoss 7])
    /// - BASEMENT_FLOOR_8 (Basement Floor 8 Untergeschoss / Kellergeschoss 8])
    /// - BASEMENT_FLOOR_9 (Basement Floor 9 [Untergeschoss / Kellergeschoss 9])
    /// - GROUND_FLOOR (Ground Floor [Erdgeschoss)]
    /// - UPPER_FLOOR_1 (Upper Floor 1 [Obergeschoss 1 / 1. Stock])
    /// - UPPER_FLOOR_2 (Upper Floor 2 [Obergeschoss 2 / 2. Stock])
    /// - UPPER_FLOOR_3 (Upper Floor 3 [Obergeschoss 3 / 3. Stock])
    /// - UPPER_FLOOR_4 (Upper Floor 4 [Obergeschoss 4 / 4. Stock])
    /// - UPPER_FLOOR_5 (Upper Floor 5 [Obergeschoss 5 / 5. Stock])
    /// - UPPER_FLOOR_6 (Upper Floor 6 [Obergeschoss 6 / 6. Stock])
    /// - UPPER_FLOOR_7 (Upper Floor 7 [Obergeschoss 7 / 7. Stock])
    /// - UPPER_FLOOR_8 (Upper Floor 8 [Obergeschoss 8 / 8. Stock])
    /// - UPPER_FLOOR_9 (Upper Floor 9 [Obergeschoss 9 / 9. Stock])
    /// - MEZZANINE_FLOOR_1 (Mezzanine Floor 1 [Zwischengeschoss 1])
    /// - MEZZANINE_FLOOR_2 (Mezzanine Floor 1 [Zwischengeschoss 2])
    /// - MEZZANINE_FLOOR_3 (Mezzanine Floor 1 [Zwischengeschoss 3])
    /// - MEZZANINE_FLOOR_4 (Mezzanine Floor 1 [Zwischengeschoss 4])
    /// - MEZZANINE_FLOOR_5 (Mezzanine Floor 1 [Zwischengeschoss 5])
    /// - MEZZANINE_FLOOR_6 (Mezzanine Floor 1 [Zwischengeschoss 6])
    /// - MEZZANINE_FLOOR_7 (Mezzanine Floor 1 [Zwischengeschoss 7])
    /// - MEZZANINE_FLOOR_8 (Mezzanine Floor 1 [Zwischengeschoss 8])
    /// - MEZZANINE_FLOOR_9 (Mezzanine Floor 1 [Zwischengeschoss 9])</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.2.1.0 (Newtonsoft.Json v12.0.0.2)")]
    public enum IndoorLevel
    {
        [System.Runtime.Serialization.EnumMember(Value = @"BASEMENT_FLOOR_1")]
        BASEMENT_FLOOR_1 = 0,
    
        [System.Runtime.Serialization.EnumMember(Value = @"BASEMENT_FLOOR_2")]
        BASEMENT_FLOOR_2 = 1,
    
        [System.Runtime.Serialization.EnumMember(Value = @"BASEMENT_FLOOR_3")]
        BASEMENT_FLOOR_3 = 2,
    
        [System.Runtime.Serialization.EnumMember(Value = @"BASEMENT_FLOOR_4")]
        BASEMENT_FLOOR_4 = 3,
    
        [System.Runtime.Serialization.EnumMember(Value = @"BASEMENT_FLOOR_5")]
        BASEMENT_FLOOR_5 = 4,
    
        [System.Runtime.Serialization.EnumMember(Value = @"BASEMENT_FLOOR_6")]
        BASEMENT_FLOOR_6 = 5,
    
        [System.Runtime.Serialization.EnumMember(Value = @"BASEMENT_FLOOR_7")]
        BASEMENT_FLOOR_7 = 6,
    
        [System.Runtime.Serialization.EnumMember(Value = @"BASEMENT_FLOOR_8")]
        BASEMENT_FLOOR_8 = 7,
    
        [System.Runtime.Serialization.EnumMember(Value = @"BASEMENT_FLOOR_9")]
        BASEMENT_FLOOR_9 = 8,
    
        [System.Runtime.Serialization.EnumMember(Value = @"GROUND_FLOOR")]
        GROUND_FLOOR = 9,
    
        [System.Runtime.Serialization.EnumMember(Value = @"UPPER_FLOOR_1")]
        UPPER_FLOOR_1 = 10,
    
        [System.Runtime.Serialization.EnumMember(Value = @"UPPER_FLOOR_2")]
        UPPER_FLOOR_2 = 11,
    
        [System.Runtime.Serialization.EnumMember(Value = @"UPPER_FLOOR_3")]
        UPPER_FLOOR_3 = 12,
    
        [System.Runtime.Serialization.EnumMember(Value = @"UPPER_FLOOR_4")]
        UPPER_FLOOR_4 = 13,
    
        [System.Runtime.Serialization.EnumMember(Value = @"UPPER_FLOOR_5")]
        UPPER_FLOOR_5 = 14,
    
        [System.Runtime.Serialization.EnumMember(Value = @"UPPER_FLOOR_6")]
        UPPER_FLOOR_6 = 15,
    
        [System.Runtime.Serialization.EnumMember(Value = @"UPPER_FLOOR_7")]
        UPPER_FLOOR_7 = 16,
    
        [System.Runtime.Serialization.EnumMember(Value = @"UPPER_FLOOR_8")]
        UPPER_FLOOR_8 = 17,
    
        [System.Runtime.Serialization.EnumMember(Value = @"UPPER_FLOOR_9")]
        UPPER_FLOOR_9 = 18,
    
        [System.Runtime.Serialization.EnumMember(Value = @"MEZZANINE_FLOOR_1")]
        MEZZANINE_FLOOR_1 = 19,
    
        [System.Runtime.Serialization.EnumMember(Value = @"MEZZANINE_FLOOR_2")]
        MEZZANINE_FLOOR_2 = 20,
    
        [System.Runtime.Serialization.EnumMember(Value = @"MEZZANINE_FLOOR_3")]
        MEZZANINE_FLOOR_3 = 21,
    
        [System.Runtime.Serialization.EnumMember(Value = @"MEZZANINE_FLOOR_4")]
        MEZZANINE_FLOOR_4 = 22,
    
        [System.Runtime.Serialization.EnumMember(Value = @"MEZZANINE_FLOOR_5")]
        MEZZANINE_FLOOR_5 = 23,
    
        [System.Runtime.Serialization.EnumMember(Value = @"MEZZANINE_FLOOR_6")]
        MEZZANINE_FLOOR_6 = 24,
    
        [System.Runtime.Serialization.EnumMember(Value = @"MEZZANINE_FLOOR_7")]
        MEZZANINE_FLOOR_7 = 25,
    
        [System.Runtime.Serialization.EnumMember(Value = @"MEZZANINE_FLOOR_8")]
        MEZZANINE_FLOOR_8 = 26,
    
        [System.Runtime.Serialization.EnumMember(Value = @"MEZZANINE_FLOOR_9")]
        MEZZANINE_FLOOR_9 = 27,
    
    }
    
    /// <summary>Multi modal departure board [Abfahrtstafel] for public transports [Oeffentliche Verkehre], individual transports [Individualverkehre] and on demand transports [Rufverkehre].</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.2.1.0 (Newtonsoft.Json v12.0.0.2)")]
    public partial class BoardMultiDeparture 
    {
        /// <summary>Available public transports for board.</summary>
        [Newtonsoft.Json.JsonProperty("publicTransports", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<StopWithDurationDeparture> PublicTransports { get; set; }
    
        /// <summary>Available on demand transports for board.</summary>
        [Newtonsoft.Json.JsonProperty("onDemandTransports", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<MobilityOnDemandWithDuration> OnDemandTransports { get; set; }
    
        /// <summary>Available individual transports for board.</summary>
        [Newtonsoft.Json.JsonProperty("individualTransports", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<MobilityIndividualWithDuration> IndividualTransports { get; set; }
    
        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();
    
        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }
    
    
    }
    
    /// <summary>Individual transport like rental cars, bikes, scooters etc. for departure / arrival boards with walk duration to reach transport.</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.2.1.0 (Newtonsoft.Json v12.0.0.2)")]
    public partial class MobilityIndividualWithDuration 
    {
        [Newtonsoft.Json.JsonProperty("pickUpStation", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public PickUpStation PickUpStation { get; set; }
    
        [Newtonsoft.Json.JsonProperty("type", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public TransportType Type { get; set; }
    
        /// <summary>Name of provider.</summary>
        [Newtonsoft.Json.JsonProperty("provider", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Provider { get; set; }
    
        /// <summary>Amount of individual mobilities for pickup station, type and provider.</summary>
        [Newtonsoft.Json.JsonProperty("count", Required = Newtonsoft.Json.Required.Always)]
        public int Count { get; set; }
    
        /// <summary>Geo positions of individual mobilities.</summary>
        [Newtonsoft.Json.JsonProperty("positions", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public System.Collections.Generic.ICollection<Coordinate2D> Positions { get; set; } = new System.Collections.ObjectModel.Collection<Coordinate2D>();
    
        /// <summary>Time to walk in order to reach pickup station / nearest transport the transport departs at in ISO8601 (for instance 'P3Y6M4DT12H30M17S').</summary>
        [Newtonsoft.Json.JsonProperty("walkDuration", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string WalkDuration { get; set; }
    
        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();
    
        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }
    
    
    }
    
    /// <summary>On demand transport like for shuttles or ubers for departure / arrival boards with walk duration.</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.2.1.0 (Newtonsoft.Json v12.0.0.2)")]
    public partial class MobilityOnDemandWithDuration 
    {
        [Newtonsoft.Json.JsonProperty("type", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public TransportType Type { get; set; }
    
        /// <summary>Name of provider.</summary>
        [Newtonsoft.Json.JsonProperty("provider", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Provider { get; set; }
    
        /// <summary>Coordinates of the Service Area</summary>
        [Newtonsoft.Json.JsonProperty("serviceArea", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<System.Collections.Generic.ICollection<System.Collections.Generic.ICollection<System.Collections.Generic.ICollection<double>>>> ServiceArea { get; set; }
    
        /// <summary>Time to walk in order to reach pickup station / nearest transport the transport departs at in ISO8601 (for instance 'P3Y6M4DT12H30M17S').</summary>
        [Newtonsoft.Json.JsonProperty("walkDuration", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string WalkDuration { get; set; }
    
        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();
    
        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }
    
    
    }
    
    /// <summary>Pickup station for ondemand / individual transports.</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.2.1.0 (Newtonsoft.Json v12.0.0.2)")]
    public partial class PickUpStation 
    {
        /// <summary>Name of provider.</summary>
        [Newtonsoft.Json.JsonProperty("provider", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Provider { get; set; }
    
        /// <summary>Name of station, may be empty.</summary>
        [Newtonsoft.Json.JsonProperty("name", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Name { get; set; }
    
        [Newtonsoft.Json.JsonProperty("position", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public Coordinate2D Position { get; set; } = new Coordinate2D();
    
        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();
    
        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }
    
    
    }
    
    /// <summary>Departure information within departure boards including walk durations to reach the transports.</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.2.1.0 (Newtonsoft.Json v12.0.0.2)")]
    public partial class StopWithDurationDeparture 
    {
        [Newtonsoft.Json.JsonProperty("station", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public StationShort Station { get; set; } = new StationShort();
    
        /// <summary>ID of journey [FahrtID].</summary>
        [Newtonsoft.Json.JsonProperty("journeyID", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string JourneyID { get; set; }
    
        /// <summary>Scheduled time [Abfahrtszeit Soll] of stop as fully qualified date (for instance '2019-08-19T12:56:14+02:00' or '2019-08-19T10:56:14Z').</summary>
        [Newtonsoft.Json.JsonProperty("timeSchedule", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.DateTimeOffset TimeSchedule { get; set; }
    
        [Newtonsoft.Json.JsonProperty("timeType", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public TimeType TimeType { get; set; }
    
        /// <summary>Best known time information of stop as fully qualified date (for instance '2019-08-19T12:56:14+02:00' or '2019-08-19T10:56:14Z').</summary>
        [Newtonsoft.Json.JsonProperty("time", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public System.DateTimeOffset Time { get; set; }
    
        /// <summary>Scheduled platform [Gleis, Bahnsteig, Plattform] the transport departs at.</summary>
        [Newtonsoft.Json.JsonProperty("platformSchedule", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string PlatformSchedule { get; set; }
    
        /// <summary>Actual platform [Gleis, Bahnsteig, Plattform] the transport departs at.</summary>
        [Newtonsoft.Json.JsonProperty("platform", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Platform { get; set; }
    
        [Newtonsoft.Json.JsonProperty("administration", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public Administration Administration { get; set; } = new Administration();
    
        /// <summary>List of available messages to display for this departure.</summary>
        [Newtonsoft.Json.JsonProperty("messages", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<Message> Messages { get; set; }
    
        /// <summary>ID of departure [AbfahrtID].</summary>
        [Newtonsoft.Json.JsonProperty("departureID", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string DepartureID { get; set; }
    
        [Newtonsoft.Json.JsonProperty("transport", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public TransportPublicDestinationVia Transport { get; set; } = new TransportPublicDestinationVia();
    
        /// <summary>Indicates whether the departure has been canceled [Haltausfall].</summary>
        [Newtonsoft.Json.JsonProperty("canceled", Required = Newtonsoft.Json.Required.Always)]
        public bool Canceled { get; set; }
    
        /// <summary>Indicates whether this departure is additional [Zusatzhalt], meaning not be part of the regular schedule.</summary>
        [Newtonsoft.Json.JsonProperty("additional", Required = Newtonsoft.Json.Required.Always)]
        public bool Additional { get; set; }
    
        /// <summary>List of transports this journey reliefs for [Entlastungszug].</summary>
        [Newtonsoft.Json.JsonProperty("reliefFor", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<TransportPublicReferenceDestination> ReliefFor { get; set; }
    
        /// <summary>List of transports this journey is reliefed by [Entlastungszug].</summary>
        [Newtonsoft.Json.JsonProperty("reliefBy", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<TransportPublicReferenceDestination> ReliefBy { get; set; }
    
        /// <summary>List of transports this journey replaces [Ersatzzug].</summary>
        [Newtonsoft.Json.JsonProperty("replacementFor", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<TransportPublicReferenceDestination> ReplacementFor { get; set; }
    
        /// <summary>List of transports this journey is replaced by [Ersatzzug].</summary>
        [Newtonsoft.Json.JsonProperty("replacedBy", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<TransportPublicReferenceDestination> ReplacedBy { get; set; }
    
        [Newtonsoft.Json.JsonProperty("continuationBy", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public TransportPublicReferenceDestination ContinuationBy { get; set; }
    
        /// <summary>List of journeys this journey travels with [Vereinigt Mit].</summary>
        [Newtonsoft.Json.JsonProperty("travelsWith", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<TransportPublicReferenceDestination> TravelsWith { get; set; }
    
        /// <summary>Time to walk in order to reach actual platform the transport departs at in ISO8601 (for instance 'P3Y6M4DT12H30M17S').</summary>
        [Newtonsoft.Json.JsonProperty("walkDuration", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string WalkDuration { get; set; }
    
        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();
    
        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }
    
    
    }
    
    /// <summary>Multi modal arrival board [Ankunftstafel] for public transports [Oeffentliche Verkehre], individual transports [Individualverkehre] and on demand transports [Rufverkehre].</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.2.1.0 (Newtonsoft.Json v12.0.0.2)")]
    public partial class BoardMultiArrival 
    {
        /// <summary>Available public transports for board.</summary>
        [Newtonsoft.Json.JsonProperty("publicTransports", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<StopWithDurationArrival> PublicTransports { get; set; }
    
        /// <summary>Available on demand transports for board.</summary>
        [Newtonsoft.Json.JsonProperty("onDemandTransports", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<MobilityOnDemandWithDuration> OnDemandTransports { get; set; }
    
        /// <summary>Available individual transports for board.</summary>
        [Newtonsoft.Json.JsonProperty("individualTransports", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<MobilityIndividualWithDuration> IndividualTransports { get; set; }
    
        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();
    
        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }
    
    
    }
    
    /// <summary>Arrival information within arrival boards including walk durations to reach the transports.</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.2.1.0 (Newtonsoft.Json v12.0.0.2)")]
    public partial class StopWithDurationArrival 
    {
        [Newtonsoft.Json.JsonProperty("station", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public StationShort Station { get; set; } = new StationShort();
    
        /// <summary>ID of journey [FahrtID].</summary>
        [Newtonsoft.Json.JsonProperty("journeyID", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string JourneyID { get; set; }
    
        /// <summary>Scheduled time [Abfahrtszeit Soll] of stop as fully qualified date (for instance '2019-08-19T12:56:14+02:00' or '2019-08-19T10:56:14Z').</summary>
        [Newtonsoft.Json.JsonProperty("timeSchedule", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.DateTimeOffset TimeSchedule { get; set; }
    
        [Newtonsoft.Json.JsonProperty("timeType", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public TimeType TimeType { get; set; }
    
        /// <summary>Best known time information of stop as fully qualified date (for instance '2019-08-19T12:56:14+02:00' or '2019-08-19T10:56:14Z').</summary>
        [Newtonsoft.Json.JsonProperty("time", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public System.DateTimeOffset Time { get; set; }
    
        /// <summary>Scheduled platform [Gleis, Bahnsteig, Plattform] the transport departs at.</summary>
        [Newtonsoft.Json.JsonProperty("platformSchedule", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string PlatformSchedule { get; set; }
    
        /// <summary>Actual platform [Gleis, Bahnsteig, Plattform] the transport departs at.</summary>
        [Newtonsoft.Json.JsonProperty("platform", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Platform { get; set; }
    
        [Newtonsoft.Json.JsonProperty("administration", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public Administration Administration { get; set; } = new Administration();
    
        /// <summary>List of available messages to display for this departure.</summary>
        [Newtonsoft.Json.JsonProperty("messages", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<Message> Messages { get; set; }
    
        /// <summary>ID of arrival [AnkunftID].</summary>
        [Newtonsoft.Json.JsonProperty("arrivalID", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string ArrivalID { get; set; }
    
        [Newtonsoft.Json.JsonProperty("transport", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public TransportPublicOriginVia Transport { get; set; } = new TransportPublicOriginVia();
    
        /// <summary>Indicates whether the arrival has been canceled [Haltausfall].</summary>
        [Newtonsoft.Json.JsonProperty("canceled", Required = Newtonsoft.Json.Required.Always)]
        public bool Canceled { get; set; }
    
        /// <summary>Indicates whether this arrival is additional [Zusatzhalt], meaning not be part of the regular schedule.</summary>
        [Newtonsoft.Json.JsonProperty("additional", Required = Newtonsoft.Json.Required.Always)]
        public bool Additional { get; set; }
    
        /// <summary>List of transports this journey reliefs for [Entlastungszug].</summary>
        [Newtonsoft.Json.JsonProperty("reliefFor", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<TransportPublicReferenceOrigin> ReliefFor { get; set; }
    
        /// <summary>List of transports this journey is reliefed by [Entlastungszug].</summary>
        [Newtonsoft.Json.JsonProperty("reliefBy", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<TransportPublicReferenceOrigin> ReliefBy { get; set; }
    
        /// <summary>List of transports this journey replaces [Ersatzzug].</summary>
        [Newtonsoft.Json.JsonProperty("replacementFor", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<TransportPublicReferenceOrigin> ReplacementFor { get; set; }
    
        /// <summary>List of transports this journey is replaced by [Ersatzzug].</summary>
        [Newtonsoft.Json.JsonProperty("replacedBy", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<TransportPublicReferenceOrigin> ReplacedBy { get; set; }
    
        [Newtonsoft.Json.JsonProperty("continuationFor", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public TransportPublicReferenceOrigin ContinuationFor { get; set; }
    
        /// <summary>List of journeys this journey travels with [Vereinigt Mit].</summary>
        [Newtonsoft.Json.JsonProperty("travelsWith", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<TransportPublicReferenceOrigin> TravelsWith { get; set; }
    
        /// <summary>Time to walk in order to reach actual platform the transport departs at in ISO8601 (for instance 'P3Y6M4DT12H30M17S').</summary>
        [Newtonsoft.Json.JsonProperty("walkDuration", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string WalkDuration { get; set; }
    
        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();
    
        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }
    
    
    }
    
    /// <summary>Journey [Fahrt] match.</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.2.1.0 (Newtonsoft.Json v12.0.0.2)")]
    public partial class JourneyMatch 
    {
        /// <summary>ID of journey [FahrtID].</summary>
        [Newtonsoft.Json.JsonProperty("journeyID", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string JourneyID { get; set; }
    
        /// <summary>Date of scheduled start departure of journey [Verkehrstag].</summary>
        [Newtonsoft.Json.JsonProperty("date", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [Newtonsoft.Json.JsonConverter(typeof(DateFormatConverter))]
        public System.DateTimeOffset Date { get; set; }
    
        [Newtonsoft.Json.JsonProperty("originSchedule", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public StationShort OriginSchedule { get; set; } = new StationShort();
    
        [Newtonsoft.Json.JsonProperty("destinationSchedule", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public StationShort DestinationSchedule { get; set; } = new StationShort();
    
        [Newtonsoft.Json.JsonProperty("transport", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public TransportPublic Transport { get; set; } = new TransportPublic();
    
        /// <summary>Unique id for administration [Verwaltung].</summary>
        [Newtonsoft.Json.JsonProperty("administrationID", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string AdministrationID { get; set; }
    
        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();
    
        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }
    
    
    }
    
    /// <summary>List of possible journey [Fahrt] matches.</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.2.1.0 (Newtonsoft.Json v12.0.0.2)")]
    public partial class JourneyMatches 
    {
        /// <summary>Matched journeys.</summary>
        [Newtonsoft.Json.JsonProperty("journeys", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public System.Collections.Generic.ICollection<JourneyMatch> Journeys { get; set; } = new System.Collections.ObjectModel.Collection<JourneyMatch>();
    
        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();
    
        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }
    
    
    }
    
    /// <summary>Public transport description for all types of trains, buses, subways, trams etc.</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.2.1.0 (Newtonsoft.Json v12.0.0.2)")]
    public partial class TransportPublic 
    {
        [Newtonsoft.Json.JsonProperty("type", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public TransportType Type { get; set; }
    
        /// <summary>Code of the transport [Fahrtgattung].</summary>
        [Newtonsoft.Json.JsonProperty("category", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Category { get; set; }
    
        /// <summary>Number of the transport [Fahrtnummer].</summary>
        [Newtonsoft.Json.JsonProperty("number", Required = Newtonsoft.Json.Required.Always)]
        public int Number { get; set; }
    
        /// <summary>Line of the transport [Linie].</summary>
        [Newtonsoft.Json.JsonProperty("line", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Line { get; set; }
    
        /// <summary>Marketing - or product name of the transport, for instance 'Sprinter' or 'Schwarzwaldexpress' etc. [Marketing Name / Produkt Name].</summary>
        [Newtonsoft.Json.JsonProperty("label", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Label { get; set; }
    
        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();
    
        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }
    
    
    }
    
    /// <summary>Departure [Abfahrt] match.</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.2.1.0 (Newtonsoft.Json v12.0.0.2)")]
    public partial class DepartureMatch 
    {
        /// <summary>ID of journey [FahrtID].</summary>
        [Newtonsoft.Json.JsonProperty("journeyID", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string JourneyID { get; set; }
    
        /// <summary>ID of departure [AbfahrtID]</summary>
        [Newtonsoft.Json.JsonProperty("departureID", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string DepartureID { get; set; }
    
        [Newtonsoft.Json.JsonProperty("station", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public StationShort Station { get; set; } = new StationShort();
    
        /// <summary>Scheduled time [Soll] of stop as fully qualified date (for instance '2019-08-19T12:56:14+02:00' or '2019-08-19T10:56:14Z').</summary>
        [Newtonsoft.Json.JsonProperty("timeSchedule", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public System.DateTimeOffset TimeSchedule { get; set; }
    
        [Newtonsoft.Json.JsonProperty("timeType", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public TimeType TimeType { get; set; }
    
        /// <summary>Best known time information of stop as fully qualified date (for instance '2019-08-19T12:56:14+02:00' or '2019-08-19T10:56:14Z').</summary>
        [Newtonsoft.Json.JsonProperty("time", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public System.DateTimeOffset Time { get; set; }
    
        /// <summary>Scheduled platform [Gleis, Bahnsteig, Plattform] the transport arrives / departs at.</summary>
        [Newtonsoft.Json.JsonProperty("platformSchedule", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string PlatformSchedule { get; set; }
    
        /// <summary>Actual platform [Gleis, Bahnsteig, Plattform] the transport arrives / departs at.</summary>
        [Newtonsoft.Json.JsonProperty("platform", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Platform { get; set; }
    
        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();
    
        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }
    
    
    }
    
    /// <summary>List of possible departure [Abfahrt] matches.</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.2.1.0 (Newtonsoft.Json v12.0.0.2)")]
    public partial class DepartureMatches 
    {
        /// <summary>Matched departures.</summary>
        [Newtonsoft.Json.JsonProperty("departures", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public System.Collections.Generic.ICollection<DepartureMatch> Departures { get; set; } = new System.Collections.ObjectModel.Collection<DepartureMatch>();
    
        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();
    
        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }
    
    
    }
    
    /// <summary>Information on journey arrival [Ankunft].</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.2.1.0 (Newtonsoft.Json v12.0.0.2)")]
    public partial class Arrival 
    {
        [Newtonsoft.Json.JsonProperty("station", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public StationShort Station { get; set; } = new StationShort();
    
        /// <summary>Indicates whether passengers are allowed to enter / leave [Fahrgastwechsel].</summary>
        [Newtonsoft.Json.JsonProperty("passengerChange", Required = Newtonsoft.Json.Required.Always)]
        public bool PassengerChange { get; set; }
    
        /// <summary>Scheduled time [Soll] of stop as fully qualified date (for instance '2019-08-19T12:56:14+02:00' or '2019-08-19T10:56:14Z').</summary>
        [Newtonsoft.Json.JsonProperty("timeSchedule", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public System.DateTimeOffset TimeSchedule { get; set; }
    
        [Newtonsoft.Json.JsonProperty("timeType", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public TimeType TimeType { get; set; }
    
        /// <summary>Best known time information of stop as fully qualified date (for instance '2019-08-19T12:56:14+02:00' or '2019-08-19T10:56:14Z').</summary>
        [Newtonsoft.Json.JsonProperty("time", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public System.DateTimeOffset Time { get; set; }
    
        /// <summary>Scheduled platform [Gleis, Bahnsteig, Plattform] the transport arrives / departs at.</summary>
        [Newtonsoft.Json.JsonProperty("platformSchedule", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string PlatformSchedule { get; set; }
    
        /// <summary>Actual platform [Gleis, Bahnsteig, Plattform] the transport arrives / departs at.</summary>
        [Newtonsoft.Json.JsonProperty("platform", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Platform { get; set; }
    
        /// <summary>List of messages for journey at this stop [Freitexte].</summary>
        [Newtonsoft.Json.JsonProperty("messages", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public System.Collections.Generic.ICollection<Message> Messages { get; set; } = new System.Collections.ObjectModel.Collection<Message>();
    
        /// <summary>Unique id for arrival [AnkunftsID].</summary>
        [Newtonsoft.Json.JsonProperty("arrivalID", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string ArrivalID { get; set; }
    
        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();
    
        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }
    
    
    }
    
    /// <summary>Information on journey departure [Abfahrt].</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.2.1.0 (Newtonsoft.Json v12.0.0.2)")]
    public partial class Departure 
    {
        [Newtonsoft.Json.JsonProperty("station", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public StationShort Station { get; set; } = new StationShort();
    
        /// <summary>Indicates whether passengers are allowed to enter / leave [Fahrgastwechsel].</summary>
        [Newtonsoft.Json.JsonProperty("passengerChange", Required = Newtonsoft.Json.Required.Always)]
        public bool PassengerChange { get; set; }
    
        /// <summary>Scheduled time [Soll] of stop as fully qualified date (for instance '2019-08-19T12:56:14+02:00' or '2019-08-19T10:56:14Z').</summary>
        [Newtonsoft.Json.JsonProperty("timeSchedule", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public System.DateTimeOffset TimeSchedule { get; set; }
    
        [Newtonsoft.Json.JsonProperty("timeType", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public TimeType TimeType { get; set; }
    
        /// <summary>Best known time information of stop as fully qualified date (for instance '2019-08-19T12:56:14+02:00' or '2019-08-19T10:56:14Z').</summary>
        [Newtonsoft.Json.JsonProperty("time", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public System.DateTimeOffset Time { get; set; }
    
        /// <summary>Scheduled platform [Gleis, Bahnsteig, Plattform] the transport arrives / departs at.</summary>
        [Newtonsoft.Json.JsonProperty("platformSchedule", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string PlatformSchedule { get; set; }
    
        /// <summary>Actual platform [Gleis, Bahnsteig, Plattform] the transport arrives / departs at.</summary>
        [Newtonsoft.Json.JsonProperty("platform", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Platform { get; set; }
    
        /// <summary>List of messages for journey at this stop [Freitexte].</summary>
        [Newtonsoft.Json.JsonProperty("messages", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public System.Collections.Generic.ICollection<Message> Messages { get; set; } = new System.Collections.ObjectModel.Collection<Message>();
    
        /// <summary>Unique id for departure [AbfahrtID].</summary>
        [Newtonsoft.Json.JsonProperty("departureID", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string DepartureID { get; set; }
    
        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();
    
        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }
    
    
    }
    
    /// <summary>Segment based [Fahrtabschnittsbasiert] information for a particular journey [Fahrtverlauf].</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.2.1.0 (Newtonsoft.Json v12.0.0.2)")]
    public partial class JourneySegmentBased 
    {
        /// <summary>ID of journey [FahrtID].</summary>
        [Newtonsoft.Json.JsonProperty("journeyID", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string JourneyID { get; set; }
    
        [Newtonsoft.Json.JsonProperty("originSchedule", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public StationShort OriginSchedule { get; set; } = new StationShort();
    
        [Newtonsoft.Json.JsonProperty("destinationSchedule", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public StationShort DestinationSchedule { get; set; } = new StationShort();
    
        /// <summary>Flag that indicates whether whole journey has been canceled.</summary>
        [Newtonsoft.Json.JsonProperty("journeyCanceled", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool JourneyCanceled { get; set; }
    
        [Newtonsoft.Json.JsonProperty("continuationFor", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public TransportPublicReferenceOrigin ContinuationFor { get; set; }
    
        [Newtonsoft.Json.JsonProperty("continuationBy", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public TransportPublicReferenceDestination ContinuationBy { get; set; }
    
        /// <summary>List of segments [Fahrtabschnitte].</summary>
        [Newtonsoft.Json.JsonProperty("segments", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<Segment> Segments { get; set; }
    
        /// <summary>List of canceled segments [Fahrtabschnitte].</summary>
        [Newtonsoft.Json.JsonProperty("segmentsCanceled", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<SegmentCanceled> SegmentsCanceled { get; set; }
    
        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();
    
        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }
    
    
    }
    
    /// <summary>Journey segment information on departure and arrival [Fahrtabschnitt].</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.2.1.0 (Newtonsoft.Json v12.0.0.2)")]
    public partial class Segment 
    {
        [Newtonsoft.Json.JsonProperty("administration", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public Administration Administration { get; set; } = new Administration();
    
        [Newtonsoft.Json.JsonProperty("transport", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public TransportPublic Transport { get; set; } = new TransportPublic();
    
        /// <summary>Indicates whether this segment is additional, meaning not be part of the regular schedule.</summary>
        [Newtonsoft.Json.JsonProperty("additional", Required = Newtonsoft.Json.Required.Always)]
        public bool Additional { get; set; }
    
        /// <summary>Indicates whether this segment has been canceled.</summary>
        [Newtonsoft.Json.JsonProperty("canceled", Required = Newtonsoft.Json.Required.Always)]
        public bool Canceled { get; set; }
    
        /// <summary>List of transports this journey at this particular segment reliefs for [Entlastungszug].</summary>
        [Newtonsoft.Json.JsonProperty("reliefFor", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<TransportPublicReferenceDestination> ReliefFor { get; set; }
    
        /// <summary>List of transports this journey at this particular segment is reliefed by [Entlastungszug].</summary>
        [Newtonsoft.Json.JsonProperty("reliefBy", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<TransportPublicReferenceDestination> ReliefBy { get; set; }
    
        /// <summary>List of transports this journey at this particular segment replaces [Ersatzzug].</summary>
        [Newtonsoft.Json.JsonProperty("replacementFor", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<TransportPublicReferenceDestination> ReplacementFor { get; set; }
    
        /// <summary>List of transports this journey at this particular segment is replaced by [Ersatzzug].</summary>
        [Newtonsoft.Json.JsonProperty("replacedBy", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<TransportPublicReferenceDestination> ReplacedBy { get; set; }
    
        /// <summary>List of journeys this journey at this particular segment travels with [Traktionen].</summary>
        [Newtonsoft.Json.JsonProperty("travelsWith", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<TransportPublicReferenceDestination> TravelsWith { get; set; }
    
        [Newtonsoft.Json.JsonProperty("departure", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public Departure Departure { get; set; } = new Departure();
    
        [Newtonsoft.Json.JsonProperty("arrival", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public Arrival Arrival { get; set; } = new Arrival();
    
        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();
    
        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }
    
    
    }
    
    /// <summary>Reflects a canceled segment.</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.2.1.0 (Newtonsoft.Json v12.0.0.2)")]
    public partial class SegmentCanceled 
    {
        [Newtonsoft.Json.JsonProperty("administration", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public Administration Administration { get; set; } = new Administration();
    
        [Newtonsoft.Json.JsonProperty("transport", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public TransportPublic Transport { get; set; } = new TransportPublic();
    
        /// <summary>Indicates whether this segment is additional, meaning not be part of the regular schedule.</summary>
        [Newtonsoft.Json.JsonProperty("additional", Required = Newtonsoft.Json.Required.Always)]
        public bool Additional { get; set; }
    
        /// <summary>Indicates whether this segment has been canceled.</summary>
        [Newtonsoft.Json.JsonProperty("canceled", Required = Newtonsoft.Json.Required.Always)]
        public bool Canceled { get; set; }
    
        /// <summary>List of transports this journey at this particular segment reliefs for [Entlastungszug].</summary>
        [Newtonsoft.Json.JsonProperty("reliefFor", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<TransportPublicReferenceDestination> ReliefFor { get; set; }
    
        /// <summary>List of transports this journey at this particular segment is reliefed by [Entlastungszug].</summary>
        [Newtonsoft.Json.JsonProperty("reliefBy", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<TransportPublicReferenceDestination> ReliefBy { get; set; }
    
        /// <summary>List of transports this journey at this particular segment replaces [Ersatzzug].</summary>
        [Newtonsoft.Json.JsonProperty("replacementFor", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<TransportPublicReferenceDestination> ReplacementFor { get; set; }
    
        /// <summary>List of transports this journey at this particular segment is replaced by [Ersatzzug].</summary>
        [Newtonsoft.Json.JsonProperty("replacedBy", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<TransportPublicReferenceDestination> ReplacedBy { get; set; }
    
        /// <summary>List of journeys this journey at this particular segment travels with [Traktionen].</summary>
        [Newtonsoft.Json.JsonProperty("travelsWith", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<TransportPublicReferenceDestination> TravelsWith { get; set; }
    
        [Newtonsoft.Json.JsonProperty("departure", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public Departure Departure { get; set; } = new Departure();
    
        [Newtonsoft.Json.JsonProperty("arrival", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public Arrival Arrival { get; set; } = new Arrival();
    
        /// <summary>References to departure ID this segment was positioned before. May reference to a canceled segment as well and may be empty in case of destination.</summary>
        [Newtonsoft.Json.JsonProperty("scheduledBeforeDepartureID", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string ScheduledBeforeDepartureID { get; set; }
    
        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();
    
        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }
    
    
    }
    
    /// <summary>Journey event [Fahrtereignis].</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.2.1.0 (Newtonsoft.Json v12.0.0.2)")]
    public partial class ArrivalDepartureEvent 
    {
        [Newtonsoft.Json.JsonProperty("station", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public StationShort Station { get; set; } = new StationShort();
    
        /// <summary>Indicates whether passengers are allowed to enter / leave [Fahrgastwechsel].</summary>
        [Newtonsoft.Json.JsonProperty("passengerChange", Required = Newtonsoft.Json.Required.Always)]
        public bool PassengerChange { get; set; }
    
        /// <summary>Scheduled time [Soll] of stop as fully qualified date (for instance '2019-08-19T12:56:14+02:00' or '2019-08-19T10:56:14Z').</summary>
        [Newtonsoft.Json.JsonProperty("timeSchedule", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public System.DateTimeOffset TimeSchedule { get; set; }
    
        [Newtonsoft.Json.JsonProperty("timeType", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public TimeType TimeType { get; set; }
    
        /// <summary>Best known time information of stop as fully qualified date (for instance '2019-08-19T12:56:14+02:00' or '2019-08-19T10:56:14Z').</summary>
        [Newtonsoft.Json.JsonProperty("time", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public System.DateTimeOffset Time { get; set; }
    
        /// <summary>Scheduled platform [Gleis, Bahnsteig, Plattform] the transport arrives / departs at.</summary>
        [Newtonsoft.Json.JsonProperty("platformSchedule", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string PlatformSchedule { get; set; }
    
        /// <summary>Actual platform [Gleis, Bahnsteig, Plattform] the transport arrives / departs at.</summary>
        [Newtonsoft.Json.JsonProperty("platform", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Platform { get; set; }
    
        /// <summary>List of messages for journey at this stop [Freitexte].</summary>
        [Newtonsoft.Json.JsonProperty("messages", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public System.Collections.Generic.ICollection<Message> Messages { get; set; } = new System.Collections.ObjectModel.Collection<Message>();
    
        [Newtonsoft.Json.JsonProperty("type", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public EventType Type { get; set; }
    
        /// <summary>ID of arrival or departure, depends on event type.</summary>
        [Newtonsoft.Json.JsonProperty("arrivalOrDepartureID", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string ArrivalOrDepartureID { get; set; }
    
        /// <summary>Indicates whether this event has been canceled.</summary>
        [Newtonsoft.Json.JsonProperty("canceled", Required = Newtonsoft.Json.Required.Always)]
        public bool Canceled { get; set; }
    
        [Newtonsoft.Json.JsonProperty("administration", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public Administration Administration { get; set; } = new Administration();
    
        [Newtonsoft.Json.JsonProperty("transport", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public TransportPublic Transport { get; set; } = new TransportPublic();
    
        /// <summary>List of transports this journey at this particular event reliefs for [Entlastungszug].</summary>
        [Newtonsoft.Json.JsonProperty("reliefFor", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public System.Collections.Generic.ICollection<TransportPublicDestinationOriginJourney> ReliefFor { get; set; } = new System.Collections.ObjectModel.Collection<TransportPublicDestinationOriginJourney>();
    
        /// <summary>List of transports this journey at this particular event is reliefed by [Entlastungszug].</summary>
        [Newtonsoft.Json.JsonProperty("reliefBy", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public System.Collections.Generic.ICollection<TransportPublicDestinationOriginJourney> ReliefBy { get; set; } = new System.Collections.ObjectModel.Collection<TransportPublicDestinationOriginJourney>();
    
        /// <summary>List of transports this journey at this particular event replaces [Ersatzzug].</summary>
        [Newtonsoft.Json.JsonProperty("replacementFor", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public System.Collections.Generic.ICollection<TransportPublicDestinationOriginJourney> ReplacementFor { get; set; } = new System.Collections.ObjectModel.Collection<TransportPublicDestinationOriginJourney>();
    
        /// <summary>List of transports this journey at this particular event is replaced by [Ersatzzug].</summary>
        [Newtonsoft.Json.JsonProperty("replacedBy", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public System.Collections.Generic.ICollection<TransportPublicDestinationOriginJourney> ReplacedBy { get; set; } = new System.Collections.ObjectModel.Collection<TransportPublicDestinationOriginJourney>();
    
        /// <summary>List of journeys this journey at this particular event travels with [Vereinigt Mit].</summary>
        [Newtonsoft.Json.JsonProperty("travelsWith", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public System.Collections.Generic.ICollection<TransportPublicDestinationOriginJourney> TravelsWith { get; set; } = new System.Collections.ObjectModel.Collection<TransportPublicDestinationOriginJourney>();
    
        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();
    
        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }
    
    
    }
    
    /// <summary>Type of event. Can be arrival or departure.
    /// - ARRIVAL (Ankunft)
    /// - DEPARTURE (Abfahrt)</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.2.1.0 (Newtonsoft.Json v12.0.0.2)")]
    public enum EventType
    {
        [System.Runtime.Serialization.EnumMember(Value = @"ARRIVAL")]
        ARRIVAL = 0,
    
        [System.Runtime.Serialization.EnumMember(Value = @"DEPARTURE")]
        DEPARTURE = 1,
    
    }
    
    /// <summary>Event based [Fahrtereignisbasiert] information for a particular journey [Fahrtverlauf].</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.2.1.0 (Newtonsoft.Json v12.0.0.2)")]
    public partial class JourneyEventBased 
    {
        /// <summary>ID of journey [FahrtID].</summary>
        [Newtonsoft.Json.JsonProperty("journeyID", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string JourneyID { get; set; }
    
        [Newtonsoft.Json.JsonProperty("originSchedule", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public StationShort OriginSchedule { get; set; } = new StationShort();
    
        [Newtonsoft.Json.JsonProperty("destinationSchedule", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public StationShort DestinationSchedule { get; set; } = new StationShort();
    
        [Newtonsoft.Json.JsonProperty("type", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public JourneyType Type { get; set; }
    
        /// <summary>Flag that indicates whether whole journey has been canceled.</summary>
        [Newtonsoft.Json.JsonProperty("journeyCanceled", Required = Newtonsoft.Json.Required.Always)]
        public bool JourneyCanceled { get; set; }
    
        [Newtonsoft.Json.JsonProperty("continuationFor", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public TransportPublicReferenceOrigin ContinuationFor { get; set; }
    
        [Newtonsoft.Json.JsonProperty("continuationBy", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public TransportPublicReferenceDestination ContinuationBy { get; set; }
    
        /// <summary>List of events [Fahrtereignisse]. Order is based on 1 - scheduled time and 2 - arrival before departure.</summary>
        [Newtonsoft.Json.JsonProperty("events", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public System.Collections.Generic.ICollection<ArrivalDepartureEvent> Events { get; set; } = new System.Collections.ObjectModel.Collection<ArrivalDepartureEvent>();
    
        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();
    
        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }
    
    
    }
    
    /// <summary>Defines whether journey [Fahrt] is regular or some kind of special.
    /// - REGULAR (Regular scheduled journey)
    /// - REPLACEMENT (Journey that replaces another journey)
    /// - RELIEF (Journey that reliefs another journey)
    /// - EXTRA (Journey that is somehow extra</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.2.1.0 (Newtonsoft.Json v12.0.0.2)")]
    public enum JourneyType
    {
        [System.Runtime.Serialization.EnumMember(Value = @"REGULAR")]
        REGULAR = 0,
    
        [System.Runtime.Serialization.EnumMember(Value = @"REPLACEMENT")]
        REPLACEMENT = 1,
    
        [System.Runtime.Serialization.EnumMember(Value = @"RELIEF")]
        RELIEF = 2,
    
        [System.Runtime.Serialization.EnumMember(Value = @"EXTRA")]
        EXTRA = 3,
    
    }
    
    /// <summary>Public transport reference [Oeffentlicher Verkehr Referenz] with origin [Herkunft] and destination [Ziel] information and journey id [FahrtID].</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.2.1.0 (Newtonsoft.Json v12.0.0.2)")]
    public partial class TransportPublicDestinationOriginJourney 
    {
        [Newtonsoft.Json.JsonProperty("type", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public TransportType Type { get; set; }
    
        /// <summary>Code of the transport [Fahrtgattung].</summary>
        [Newtonsoft.Json.JsonProperty("category", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Category { get; set; }
    
        /// <summary>Number of the transport [Fahrtnummer].</summary>
        [Newtonsoft.Json.JsonProperty("number", Required = Newtonsoft.Json.Required.Always)]
        public int Number { get; set; }
    
        /// <summary>Line of the transport [Linie].</summary>
        [Newtonsoft.Json.JsonProperty("line", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Line { get; set; }
    
        /// <summary>Marketing - or product name of the transport, for instance 'Sprinter' or 'Schwarzwaldexpress' etc. [Marketing Name / Produkt Name].</summary>
        [Newtonsoft.Json.JsonProperty("label", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Label { get; set; }
    
        [Newtonsoft.Json.JsonProperty("destination", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public StationShort Destination { get; set; } = new StationShort();
    
        /// <summary>ID of the journey [FahrtID].</summary>
        [Newtonsoft.Json.JsonProperty("journeyID", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string JourneyID { get; set; }
    
        [Newtonsoft.Json.JsonProperty("origin", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public StopAtStation Origin { get; set; } = new StopAtStation();
    
        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();
    
        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }
    
    
    }
    
    /// <summary>Indoor 2 outdoor routing.</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.2.1.0 (Newtonsoft.Json v12.0.0.2)")]
    public partial class Indoor2OutdoorRouting 
    {
        [Newtonsoft.Json.JsonProperty("indoor", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public IndoorRouting Indoor { get; set; }
    
        /// <summary>Name of exit to take.</summary>
        [Newtonsoft.Json.JsonProperty("exitName", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ExitName { get; set; }
    
        [Newtonsoft.Json.JsonProperty("outdoor", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public MultimodalRouting Outdoor { get; set; }
    
        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();
    
        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }
    
    
    }
    
    /// <summary>Indoor routing with segments, levels and length.</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.2.1.0 (Newtonsoft.Json v12.0.0.2)")]
    public partial class IndoorRouting 
    {
        /// <summary>List of indoor segments.</summary>
        [Newtonsoft.Json.JsonProperty("indoor", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<IndoorSegment> Indoor { get; set; }
    
        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();
    
        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }
    
    
    }
    
    /// <summary>Represents an indoor routing segment.</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.2.1.0 (Newtonsoft.Json v12.0.0.2)")]
    public partial class IndoorSegment 
    {
        /// <summary>Type of segment within indoor routing.</summary>
        [Newtonsoft.Json.JsonProperty("type", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public IndoorSegmentType Type { get; set; }
    
        [Newtonsoft.Json.JsonProperty("level", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public IndoorLevel Level { get; set; }
    
        /// <summary>Length to walk in meters.</summary>
        [Newtonsoft.Json.JsonProperty("length", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double Length { get; set; }
    
        /// <summary>Polyline for segment.</summary>
        [Newtonsoft.Json.JsonProperty("polyline", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<Coordinate2D> Polyline { get; set; }
    
        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();
    
        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }
    
    
    }
    
    /// <summary>Base leg information.</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.2.1.0 (Newtonsoft.Json v12.0.0.2)")]
    public partial class Leg 
    {
        [Newtonsoft.Json.JsonProperty("type", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public LegType Type { get; set; }
    
        [Newtonsoft.Json.JsonProperty("transportType", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public TransportType TransportType { get; set; }
    
        /// <summary>Polyline of leg for map drawing.</summary>
        [Newtonsoft.Json.JsonProperty("polyline", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<Coordinate2D> Polyline { get; set; }
    
        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();
    
        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }
    
    
    }
    
    /// <summary>Connect leg for connects within a station / stations group.</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.2.1.0 (Newtonsoft.Json v12.0.0.2)")]
    public partial class LegConnect 
    {
        [Newtonsoft.Json.JsonProperty("type", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public LegType Type { get; set; }
    
        [Newtonsoft.Json.JsonProperty("transportType", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public TransportType TransportType { get; set; }
    
        /// <summary>Polyline of leg for map drawing.</summary>
        [Newtonsoft.Json.JsonProperty("polyline", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<Coordinate2D> Polyline { get; set; }
    
        [Newtonsoft.Json.JsonProperty("origin", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public TripStop Origin { get; set; }
    
        [Newtonsoft.Json.JsonProperty("destination", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public TripStop Destination { get; set; }
    
        /// <summary>List of person dependent connecting times for connect segment.</summary>
        [Newtonsoft.Json.JsonProperty("connectingTimes", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<ConnectionTime> ConnectingTimes { get; set; }
    
        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();
    
        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }
    
    
    }
    
    /// <summary>Leg for trains.</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.2.1.0 (Newtonsoft.Json v12.0.0.2)")]
    public partial class LegTrain 
    {
        [Newtonsoft.Json.JsonProperty("type", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public LegType Type { get; set; }
    
        [Newtonsoft.Json.JsonProperty("transportType", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public TransportType TransportType { get; set; }
    
        /// <summary>Polyline of leg for map drawing.</summary>
        [Newtonsoft.Json.JsonProperty("polyline", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<Coordinate2D> Polyline { get; set; }
    
        /// <summary>Duration of trip in ISO8601 (for instance 'P3Y6M4DT12H30M17S').</summary>
        [Newtonsoft.Json.JsonProperty("duration", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Duration { get; set; }
    
        /// <summary>Distance for leg. May be empty.</summary>
        [Newtonsoft.Json.JsonProperty("distance", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int Distance { get; set; }
    
        [Newtonsoft.Json.JsonProperty("origin", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public TripStopTrain Origin { get; set; }
    
        [Newtonsoft.Json.JsonProperty("destination", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public TripStopTrain Destination { get; set; }
    
        /// <summary>Id of journey the train belongs to.</summary>
        [Newtonsoft.Json.JsonProperty("journeyID", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string JourneyID { get; set; }
    
        /// <summary>Type code of train.</summary>
        [Newtonsoft.Json.JsonProperty("typeCode", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string TypeCode { get; set; }
    
        /// <summary>Number of train.</summary>
        [Newtonsoft.Json.JsonProperty("number", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int Number { get; set; }
    
        /// <summary>Line of train, if applicable.</summary>
        [Newtonsoft.Json.JsonProperty("line", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Line { get; set; }
    
        /// <summary>Name of station the train departed at.</summary>
        [Newtonsoft.Json.JsonProperty("trainOrigin", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string TrainOrigin { get; set; }
    
        /// <summary>Name of station the train will arrive at.</summary>
        [Newtonsoft.Json.JsonProperty("trainDestination", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string TrainDestination { get; set; }
    
        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();
    
        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }
    
    
    }
    
    /// <summary>Type of leg.</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.2.1.0 (Newtonsoft.Json v12.0.0.2)")]
    public enum LegType
    {
        [System.Runtime.Serialization.EnumMember(Value = @"BUS")]
        BUS = 0,
    
        [System.Runtime.Serialization.EnumMember(Value = @"CONNECT")]
        CONNECT = 1,
    
        [System.Runtime.Serialization.EnumMember(Value = @"TRAIN")]
        TRAIN = 2,
    
        [System.Runtime.Serialization.EnumMember(Value = @"WALK")]
        WALK = 3,
    
    }
    
    /// <summary>Leg for walks.</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.2.1.0 (Newtonsoft.Json v12.0.0.2)")]
    public partial class LegWalk 
    {
        [Newtonsoft.Json.JsonProperty("type", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public LegType Type { get; set; }
    
        [Newtonsoft.Json.JsonProperty("transportType", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public TransportType TransportType { get; set; }
    
        /// <summary>Polyline of leg for map drawing.</summary>
        [Newtonsoft.Json.JsonProperty("polyline", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<Coordinate2D> Polyline { get; set; }
    
        /// <summary>Duration of trip in ISO8601 (for instance 'P3Y6M4DT12H30M17S').</summary>
        [Newtonsoft.Json.JsonProperty("duration", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Duration { get; set; }
    
        /// <summary>Distance for leg. May be empty.</summary>
        [Newtonsoft.Json.JsonProperty("distance", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int Distance { get; set; }
    
        [Newtonsoft.Json.JsonProperty("origin", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public TripStop Origin { get; set; }
    
        [Newtonsoft.Json.JsonProperty("destination", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public TripStop Destination { get; set; }
    
        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();
    
        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }
    
    
    }
    
    /// <summary>Multimodal routings.</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.2.1.0 (Newtonsoft.Json v12.0.0.2)")]
    public partial class MultimodalRouting 
    {
        /// <summary>List of trips from routing provider.</summary>
        [Newtonsoft.Json.JsonProperty("trips", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<Trip> Trips { get; set; }
    
        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();
    
        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }
    
    
    }
    
    /// <summary>Represents a trip.</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.2.1.0 (Newtonsoft.Json v12.0.0.2)")]
    public partial class Trip 
    {
        /// <summary>Unique id of trip.</summary>
        [Newtonsoft.Json.JsonProperty("tripID", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string TripID { get; set; }
    
        /// <summary>Duration of trip in ISO8601 (for instance 'P3Y6M4DT12H30M17S').</summary>
        [Newtonsoft.Json.JsonProperty("duration", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Duration { get; set; }
    
        /// <summary>List of trip legs.</summary>
        //[Newtonsoft.Json.JsonProperty("legs", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        //public System.Collections.Generic.ICollection<Legs> Legs { get; set; }
    
        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();
    
        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }
    
    
    }
    
    /// <summary>Stop within trip.</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.2.1.0 (Newtonsoft.Json v12.0.0.2)")]
    public partial class TripStop 
    {
        [Newtonsoft.Json.JsonProperty("geo", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Coordinate2D Geo { get; set; }
    
        /// <summary>Target (planing) time of stop as fully qualified date (for instance '2019-08-19T12:56:14+02:00' or '2019-08-19T10:56:14Z').</summary>
        [Newtonsoft.Json.JsonProperty("timeTarget", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.DateTimeOffset TimeTarget { get; set; }
    
        /// <summary>Actual (forecast) time of stop as fully qualified date (for instance '2019-08-19T12:56:14+02:00' or '2019-08-19T10:56:14Z'). May be empty in case we don't have actual information.</summary>
        [Newtonsoft.Json.JsonProperty("timeActual", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.DateTimeOffset TimeActual { get; set; }
    
        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();
    
        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }
    
    
    }
    
    /// <summary>Stop for buses within trip.</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.2.1.0 (Newtonsoft.Json v12.0.0.2)")]
    public partial class TripStopBus 
    {
        [Newtonsoft.Json.JsonProperty("geo", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Coordinate2D Geo { get; set; }
    
        /// <summary>Target (planing) time of stop as fully qualified date (for instance '2019-08-19T12:56:14+02:00' or '2019-08-19T10:56:14Z').</summary>
        [Newtonsoft.Json.JsonProperty("timeTarget", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.DateTimeOffset TimeTarget { get; set; }
    
        /// <summary>Actual (forecast) time of stop as fully qualified date (for instance '2019-08-19T12:56:14+02:00' or '2019-08-19T10:56:14Z'). May be empty in case we don't have actual information.</summary>
        [Newtonsoft.Json.JsonProperty("timeActual", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.DateTimeOffset TimeActual { get; set; }
    
        /// <summary>Id of station.</summary>
        [Newtonsoft.Json.JsonProperty("stationID", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string StationID { get; set; }
    
        /// <summary>Name of stop.</summary>
        [Newtonsoft.Json.JsonProperty("name", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Name { get; set; }
    
        /// <summary>Id of stop.</summary>
        [Newtonsoft.Json.JsonProperty("stopID", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string StopID { get; set; }
    
        /// <summary>Id of bus.</summary>
        [Newtonsoft.Json.JsonProperty("busID", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string BusID { get; set; }
    
        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();
    
        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }
    
    
    }
    
    /// <summary>Stop for trains within trip.</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.2.1.0 (Newtonsoft.Json v12.0.0.2)")]
    public partial class TripStopTrain 
    {
        [Newtonsoft.Json.JsonProperty("geo", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Coordinate2D Geo { get; set; }
    
        /// <summary>Target (planing) time of stop as fully qualified date (for instance '2019-08-19T12:56:14+02:00' or '2019-08-19T10:56:14Z').</summary>
        [Newtonsoft.Json.JsonProperty("timeTarget", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.DateTimeOffset TimeTarget { get; set; }
    
        /// <summary>Actual (forecast) time of stop as fully qualified date (for instance '2019-08-19T12:56:14+02:00' or '2019-08-19T10:56:14Z'). May be empty in case we don't have actual information.</summary>
        [Newtonsoft.Json.JsonProperty("timeActual", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.DateTimeOffset TimeActual { get; set; }
    
        /// <summary>Id of station.</summary>
        [Newtonsoft.Json.JsonProperty("stationID", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string StationID { get; set; }
    
        /// <summary>Name of stop.</summary>
        [Newtonsoft.Json.JsonProperty("name", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Name { get; set; }
    
        /// <summary>Id of stop.</summary>
        [Newtonsoft.Json.JsonProperty("stopID", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string StopID { get; set; }
    
        /// <summary>Id of train.</summary>
        [Newtonsoft.Json.JsonProperty("trainID", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string TrainID { get; set; }
    
        /// <summary>Track the train stops at.</summary>
        [Newtonsoft.Json.JsonProperty("track", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Track { get; set; }
    
        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();
    
        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }
    
    
    }
    
    /// <summary>Connection [Anschluss] information for transport arriving at particular stop [Haltestelle].</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.2.1.0 (Newtonsoft.Json v12.0.0.2)")]
    public partial class ConnectionArrival 
    {
        /// <summary>ID of journey [FahrtID].</summary>
        [Newtonsoft.Json.JsonProperty("journeyID", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string JourneyID { get; set; }
    
        /// <summary>Unique id for arrival [AnkunftsID].</summary>
        [Newtonsoft.Json.JsonProperty("arrivalID", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string ArrivalID { get; set; }
    
        /// <summary>Indicates whether arrival has been canceled [Haltausfall].</summary>
        [Newtonsoft.Json.JsonProperty("arrivalCanceled", Required = Newtonsoft.Json.Required.Always)]
        public bool ArrivalCanceled { get; set; }
    
        /// <summary>Scheduled arrival time [Ankunftszeit Soll] of stop as fully qualified date (for instance '2019-08-19T12:56:14+02:00' or '2019-08-19T10:56:14Z').</summary>
        [Newtonsoft.Json.JsonProperty("arrivalTimeSchedule", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.DateTimeOffset ArrivalTimeSchedule { get; set; }
    
        [Newtonsoft.Json.JsonProperty("arrivalTimeType", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public TimeType ArrivalTimeType { get; set; }
    
        /// <summary>Best known arrival time information of stop as fully qualified date (for instance '2019-08-19T12:56:14+02:00' or '2019-08-19T10:56:14Z').</summary>
        [Newtonsoft.Json.JsonProperty("arrivalTime", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public System.DateTimeOffset ArrivalTime { get; set; }
    
        /// <summary>Scheduled arrival platform [Gleis, Bahnsteig, Plattform - Plan].</summary>
        [Newtonsoft.Json.JsonProperty("arrivalPlatformSchedule", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string ArrivalPlatformSchedule { get; set; }
    
        /// <summary>Estimated arrival platform [Gleis, Bahnsteig, Plattform - Vorschau].</summary>
        [Newtonsoft.Json.JsonProperty("arrivalPlatform", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string ArrivalPlatform { get; set; }
    
        /// <summary>List of available connections [Anschluesse] with connection status [Anschlussbewertung].</summary>
        [Newtonsoft.Json.JsonProperty("connections", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<StopDepartureConnect> Connections { get; set; }
    
        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();
    
        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }
    
    
    }
    
    /// <summary>Connection evaluation [Anschlussbewertung] for different personae.</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.2.1.0 (Newtonsoft.Json v12.0.0.2)")]
    public partial class ConnectionEvaluation 
    {
        [Newtonsoft.Json.JsonProperty("persona", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public PersonaType Persona { get; set; }
    
        /// <summary>Distance in meters.</summary>
        [Newtonsoft.Json.JsonProperty("distance", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double Distance { get; set; }
    
        /// <summary>Duration of connect in ISO8601 (for instance 'P3Y6M4DT12H30M17S').</summary>
        [Newtonsoft.Json.JsonProperty("duration", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Duration { get; set; }
    
        [Newtonsoft.Json.JsonProperty("status", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public ConnectionStatus Status { get; set; }
    
        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();
    
        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }
    
    
    }
    
    /// <summary>Source of connection information.
    /// - CALCULATED_SCHEDULE (Connection is based on scheduled information)
    /// - CALCULATED_PREVIEW (Connection is based on preview / real information)
    /// - DISPOSITION (Connection is based on disposition decission)</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.2.1.0 (Newtonsoft.Json v12.0.0.2)")]
    public enum ConnectionSource
    {
        [System.Runtime.Serialization.EnumMember(Value = @"CALCULATED_SCHEDULE")]
        CALCULATED_SCHEDULE = 0,
    
        [System.Runtime.Serialization.EnumMember(Value = @"CALCULATED_PREVIEW")]
        CALCULATED_PREVIEW = 1,
    
        [System.Runtime.Serialization.EnumMember(Value = @"DISPOSITION")]
        DISPOSITION = 2,
    
    }
    
    /// <summary>Connecting status for different personas.
    /// - SAFE (Connection is considered as safe, enough time left)
    /// - CRITICAL (Connection is considered as critical, only little time left)
    /// - IMPOSSIBLE (Connection is consiered as impossible, not enough time to reach)
    /// - UNKNOWN (Connection status is unknown)</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.2.1.0 (Newtonsoft.Json v12.0.0.2)")]
    public enum ConnectionStatus
    {
        [System.Runtime.Serialization.EnumMember(Value = @"SAFE")]
        SAFE = 0,
    
        [System.Runtime.Serialization.EnumMember(Value = @"CRITICAL")]
        CRITICAL = 1,
    
        [System.Runtime.Serialization.EnumMember(Value = @"IMPOSSIBLE")]
        IMPOSSIBLE = 2,
    
        [System.Runtime.Serialization.EnumMember(Value = @"UNKNOWN")]
        UNKNOWN = 3,
    
    }
    
    /// <summary>Status for disposition of connection.
    /// - WAITING (Disposition decission is transport must wait)
    /// - NOT_WAITING (Disposition decission is transport must not wait)
    /// - NONE (No disposition decission)</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.2.1.0 (Newtonsoft.Json v12.0.0.2)")]
    public enum DispositionStatus
    {
        [System.Runtime.Serialization.EnumMember(Value = @"WAITING")]
        WAITING = 0,
    
        [System.Runtime.Serialization.EnumMember(Value = @"NOT_WAITING")]
        NOT_WAITING = 1,
    
        [System.Runtime.Serialization.EnumMember(Value = @"NONE")]
        NONE = 2,
    
    }
    
    /// <summary>Departure information within departure boards [Abfahrtstafeln] with connect info [Anschlussinformation].</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.2.1.0 (Newtonsoft.Json v12.0.0.2)")]
    public partial class StopDepartureConnect 
    {
        [Newtonsoft.Json.JsonProperty("station", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public StationShort Station { get; set; } = new StationShort();
    
        /// <summary>ID of journey [FahrtID].</summary>
        [Newtonsoft.Json.JsonProperty("journeyID", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string JourneyID { get; set; }
    
        /// <summary>Scheduled time [Abfahrtszeit Soll] of stop as fully qualified date (for instance '2019-08-19T12:56:14+02:00' or '2019-08-19T10:56:14Z').</summary>
        [Newtonsoft.Json.JsonProperty("timeSchedule", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.DateTimeOffset TimeSchedule { get; set; }
    
        [Newtonsoft.Json.JsonProperty("timeType", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public TimeType TimeType { get; set; }
    
        /// <summary>Best known time information of stop as fully qualified date (for instance '2019-08-19T12:56:14+02:00' or '2019-08-19T10:56:14Z').</summary>
        [Newtonsoft.Json.JsonProperty("time", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public System.DateTimeOffset Time { get; set; }
    
        /// <summary>Scheduled platform [Gleis, Bahnsteig, Plattform] the transport departs at.</summary>
        [Newtonsoft.Json.JsonProperty("platformSchedule", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string PlatformSchedule { get; set; }
    
        /// <summary>Actual platform [Gleis, Bahnsteig, Plattform] the transport departs at.</summary>
        [Newtonsoft.Json.JsonProperty("platform", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Platform { get; set; }
    
        [Newtonsoft.Json.JsonProperty("administration", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public Administration Administration { get; set; } = new Administration();
    
        /// <summary>List of available messages to display for this departure.</summary>
        [Newtonsoft.Json.JsonProperty("messages", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<Message> Messages { get; set; }
    
        /// <summary>ID of departure [AbfahrtID].</summary>
        [Newtonsoft.Json.JsonProperty("departureID", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string DepartureID { get; set; }
    
        [Newtonsoft.Json.JsonProperty("transport", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public TransportPublicDestinationVia Transport { get; set; } = new TransportPublicDestinationVia();
    
        /// <summary>Indicates whether the departure has been canceled [Haltausfall].</summary>
        [Newtonsoft.Json.JsonProperty("canceled", Required = Newtonsoft.Json.Required.Always)]
        public bool Canceled { get; set; }
    
        /// <summary>Indicates whether this departure is additional [Zusatzhalt], meaning not be part of the regular schedule.</summary>
        [Newtonsoft.Json.JsonProperty("additional", Required = Newtonsoft.Json.Required.Always)]
        public bool Additional { get; set; }
    
        /// <summary>List of transports this journey reliefs for [Entlastungszug].</summary>
        [Newtonsoft.Json.JsonProperty("reliefFor", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<TransportPublicReferenceDestination> ReliefFor { get; set; }
    
        /// <summary>List of transports this journey is reliefed by [Entlastungszug].</summary>
        [Newtonsoft.Json.JsonProperty("reliefBy", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<TransportPublicReferenceDestination> ReliefBy { get; set; }
    
        /// <summary>List of transports this journey replaces [Ersatzzug].</summary>
        [Newtonsoft.Json.JsonProperty("replacementFor", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<TransportPublicReferenceDestination> ReplacementFor { get; set; }
    
        /// <summary>List of transports this journey is replaced by [Ersatzzug].</summary>
        [Newtonsoft.Json.JsonProperty("replacedBy", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<TransportPublicReferenceDestination> ReplacedBy { get; set; }
    
        [Newtonsoft.Json.JsonProperty("continuationBy", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public TransportPublicReferenceDestination ContinuationBy { get; set; }
    
        /// <summary>List of journeys this journey travels with [Vereinigt Mit].</summary>
        [Newtonsoft.Json.JsonProperty("travelsWith", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<TransportPublicReferenceDestination> TravelsWith { get; set; }
    
        [Newtonsoft.Json.JsonProperty("connectionSource", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public ConnectionSource ConnectionSource { get; set; }
    
        [Newtonsoft.Json.JsonProperty("connectionDisposition", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public DispositionStatus ConnectionDisposition { get; set; }
    
        /// <summary>Connection status for different personae.</summary>
        [Newtonsoft.Json.JsonProperty("connectionStatusByPersona", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public System.Collections.Generic.ICollection<ConnectionEvaluation> ConnectionStatusByPersona { get; set; } = new System.Collections.ObjectModel.Collection<ConnectionEvaluation>();
    
        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();
    
        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }
    
    
    }
    
    /// <summary>Connection [Anschluss] information for two journeys.</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.2.1.0 (Newtonsoft.Json v12.0.0.2)")]
    public partial class ConnectionJourneys 
    {
        /// <summary>ID of journey [FahrtID].</summary>
        [Newtonsoft.Json.JsonProperty("journeyID", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string JourneyID { get; set; }
    
        /// <summary>Unique id for arrival [AnkunftID].</summary>
        [Newtonsoft.Json.JsonProperty("arrivalID", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string ArrivalID { get; set; }
    
        /// <summary>ID of connecting journey [AnschlussFahrtID].</summary>
        [Newtonsoft.Json.JsonProperty("journeyIDConnecting", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string JourneyIDConnecting { get; set; }
    
        /// <summary>Unique id for departure of connecting journey [AbfahrtID].</summary>
        [Newtonsoft.Json.JsonProperty("departureIDConnecting", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string DepartureIDConnecting { get; set; }
    
        /// <summary>Connection status [Anschlussbewertung] fo different personas.</summary>
        [Newtonsoft.Json.JsonProperty("connectionStatus", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public System.Collections.Generic.ICollection<ConnectionEvaluation> ConnectionStatus { get; set; } = new System.Collections.ObjectModel.Collection<ConnectionEvaluation>();
    
        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();
    
        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }
    
    
    }
    
    /// <summary>On demand mobility information.</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.2.1.0 (Newtonsoft.Json v12.0.0.2)")]
    public partial class MobilitiesOnDemand 
    {
        /// <summary>List of mobilities.</summary>
        [Newtonsoft.Json.JsonProperty("mobilities", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public System.Collections.Generic.ICollection<MobilityOnDemand> Mobilities { get; set; } = new System.Collections.ObjectModel.Collection<MobilityOnDemand>();
    
        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();
    
        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }
    
    
    }
    
    /// <summary>On demand mobility information like taxis, shuttles etc.</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.2.1.0 (Newtonsoft.Json v12.0.0.2)")]
    public partial class MobilityOnDemand 
    {
        [Newtonsoft.Json.JsonProperty("type", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public TransportType Type { get; set; }
    
        /// <summary>Name of provider.</summary>
        [Newtonsoft.Json.JsonProperty("provider", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Provider { get; set; }
    
        /// <summary>Coordinates of the Service Area</summary>
        [Newtonsoft.Json.JsonProperty("serviceArea", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<System.Collections.Generic.ICollection<System.Collections.Generic.ICollection<System.Collections.Generic.ICollection<double>>>> ServiceArea { get; set; }
    
        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();
    
        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }
    
    
    }
    
    /// <summary>Individual mobilities information.</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.2.1.0 (Newtonsoft.Json v12.0.0.2)")]
    public partial class MobilitiesIndividual 
    {
        /// <summary>List of mobilities.</summary>
        [Newtonsoft.Json.JsonProperty("mobilities", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public System.Collections.Generic.ICollection<MobilityIndividual> Mobilities { get; set; } = new System.Collections.ObjectModel.Collection<MobilityIndividual>();
    
        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();
    
        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }
    
    
    }
    
    /// <summary>Individual mobility information like call a bike, scooter, rental cars.</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.2.1.0 (Newtonsoft.Json v12.0.0.2)")]
    public partial class MobilityIndividual 
    {
        [Newtonsoft.Json.JsonProperty("pickUpStation", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public PickUpStation PickUpStation { get; set; }
    
        [Newtonsoft.Json.JsonProperty("type", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public TransportType Type { get; set; }
    
        /// <summary>Name of provider.</summary>
        [Newtonsoft.Json.JsonProperty("provider", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Provider { get; set; }
    
        /// <summary>Amount of individual mobilities for pickup station, type and provider.</summary>
        [Newtonsoft.Json.JsonProperty("count", Required = Newtonsoft.Json.Required.Always)]
        public int Count { get; set; }
    
        /// <summary>Geo positions of individual mobilities.</summary>
        [Newtonsoft.Json.JsonProperty("positions", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public System.Collections.Generic.ICollection<Coordinate2D> Positions { get; set; } = new System.Collections.ObjectModel.Collection<Coordinate2D>();
    
        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();
    
        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }
    
    
    }
    
    /// <summary>Geoposition and speed of transport.</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.2.1.0 (Newtonsoft.Json v12.0.0.2)")]
    public partial class TransportPosition 
    {
        [Newtonsoft.Json.JsonProperty("position", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public Coordinate2D Position { get; set; } = new Coordinate2D();
    
        /// <summary>Current speed of transport in km/h.</summary>
        [Newtonsoft.Json.JsonProperty("speed", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double Speed { get; set; }
    
        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();
    
        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }
    
    
    }
    
    /// <summary>Public transport [Oeffentlicher Verkehr] and vehicle [Fahrzeug] matching result where a wifi accesspoint is located in.</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.2.1.0 (Newtonsoft.Json v12.0.0.2)")]
    public partial class TransportMatchWifi 
    {
        /// <summary>ID of wifi access point [MAC Adresse].</summary>
        [Newtonsoft.Json.JsonProperty("wifiaccesspointID", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string WifiaccesspointID { get; set; }
    
        /// <summary>ID of journey [FahrtID].</summary>
        [Newtonsoft.Json.JsonProperty("journeyID", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string JourneyID { get; set; }
    
        [Newtonsoft.Json.JsonProperty("transport", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public TransportPublic Transport { get; set; } = new TransportPublic();
    
        [Newtonsoft.Json.JsonProperty("vehicle", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public Vehicle Vehicle { get; set; } = new Vehicle();
    
        /// <summary>Wagon identification number [Wagenordnugnsnummer] of vehicle in transport.</summary>
        [Newtonsoft.Json.JsonProperty("wagonIdentificationNumber", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int WagonIdentificationNumber { get; set; }
    
        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();
    
        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }
    
    
    }
    
    /// <summary>Public transports [Oeffentlicher Verkehr] and vehicles [Fahrzeug] matching results where a wifi accesspoint is located in.</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.2.1.0 (Newtonsoft.Json v12.0.0.2)")]
    public partial class TransportMatchWifis 
    {
        /// <summary>ID of wifi access point [MAC Adresse].</summary>
        [Newtonsoft.Json.JsonProperty("wifiaccesspointID", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string WifiaccesspointID { get; set; }
    
        /// <summary>List of matchted transports.</summary>
        [Newtonsoft.Json.JsonProperty("transports", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public System.Collections.Generic.ICollection<TransportMatchWifi> Transports { get; set; } = new System.Collections.ObjectModel.Collection<TransportMatchWifi>();
    
        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();
    
        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }
    
    
    }
    
    /// <summary>General vehicle [Fahrzeug] information. If the vehicleID is empty, only the type information is available.</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.2.1.0 (Newtonsoft.Json v12.0.0.2)")]
    public partial class Vehicle 
    {
        /// <summary>ID of the vehicle (for rail vehicles usually the UIC identification nunmber).</summary>
        [Newtonsoft.Json.JsonProperty("vehicleID", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string VehicleID { get; set; }
    
        [Newtonsoft.Json.JsonProperty("type", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public VehicleType Type { get; set; } = new VehicleType();
    
        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();
    
        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }
    
    
    }
    
    /// <summary>Category of vehicle [Fahrzeug] according to basic visual differentiation.
    /// - DOUBLEDECK_FIRST_ECONOMY_CLASS (Doppelstockwagen 1.&amp; 2. Klasse)
    /// - DOUBLEDECK_FIRST_CLASS (Doppelstockwagen 1. Klasse)
    /// - DOUBLEDECK_ECONOMY_CLASS (Doppelstockwagen 2. Klasse)
    /// - DOUBLEDECK_CONTROLCAR_FIRST_ECONOMOY_CLASS (Doppelstocksteuerwagen 1. &amp; 2. Klasse)
    /// - DOUBLEDECK_CONTROLCAR_FIRST_CLASS (Doppelstocksteuerwagen 1. Klasse)
    /// - DOUBLEDECK_CONTROLCAR_ECONOMY_CLASS (Doppelstocksteuerwagen 2. Klasse)
    /// - DOUBLEDECK_CARCARRIER_PASSENGERTRAIN (Doppelstock-Autotransportwagen der Reisezugwagen-Bauart)
    /// - PASSENGERCARRIAGE_FIRST_ECONOMY_CLASS (Reisezugwagen 1.&amp; 2. Klasse)
    /// - PASSENGERCARRIAGE_FIRST_CLASS (Reisezugwagen 1.Klasse)
    /// - PASSENGERCARRIAGE_ECONOMY_CLASS (Reisezugwagen 2.Klasse)
    /// - CONTROLCAR_FIRST_CLASS (Steuerwagen &amp; 1.Klasse)
    /// - CONTROLCAR_ECONOMY_CLASS (Steuerwagen &amp; 2.Klasse)
    /// - CONTROLCAR_FIRST_ECONOMY_CLASS (Steuerwagen 1.&amp; 2.Klasse)
    /// - DININGCAR (Speisewagen)
    /// - HALFDININGCAR_FIRST_CLASS (Halbspeisewagen &amp; 1. Klasse)
    /// - HALFDININGCAR_ECONOMY_CLASS (Halbspeisewagen &amp; 2. Klasse)
    /// - SLEEPER_FIRST_CLASS (Schlafwagen 1. Klasse)
    /// - SLEEPER_FIRST_ECONOMY_CLASS (Schlafwagen 1. &amp; 2. Klasse)
    /// - SLEEPER_ECONOMY_CLASS (Schlafwagen 2. Klasse)
    /// - COUCHETTE_FIRST_CLASS (Liegewagen 1. Klasse)
    /// - COUCHETTE_ECONOMY_CLASS (Liegewagen 2. Klasse)
    /// - BAGGAGECAR (Gepaeckwagen)
    /// - LOCOMOTIVE (Lok)
    /// - POWERCAR (Triebkopf)
    /// - UNDEFINED (unbekannt)</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.2.1.0 (Newtonsoft.Json v12.0.0.2)")]
    public enum VehicleCategory
    {
        [System.Runtime.Serialization.EnumMember(Value = @"DOUBLEDECK_FIRST_ECONOMY_CLASS")]
        DOUBLEDECK_FIRST_ECONOMY_CLASS = 0,
    
        [System.Runtime.Serialization.EnumMember(Value = @"DOUBLEDECK_FIRST_CLASS")]
        DOUBLEDECK_FIRST_CLASS = 1,
    
        [System.Runtime.Serialization.EnumMember(Value = @"DOUBLEDECK_ECONOMY_CLASS")]
        DOUBLEDECK_ECONOMY_CLASS = 2,
    
        [System.Runtime.Serialization.EnumMember(Value = @"DOUBLEDECK_CONTROLCAR_FIRST_ECONOMOY_CLASS")]
        DOUBLEDECK_CONTROLCAR_FIRST_ECONOMOY_CLASS = 3,
    
        [System.Runtime.Serialization.EnumMember(Value = @"DOUBLEDECK_CONTROLCAR_FIRST_CLASS")]
        DOUBLEDECK_CONTROLCAR_FIRST_CLASS = 4,
    
        [System.Runtime.Serialization.EnumMember(Value = @"DOUBLEDECK_CONTROLCAR_ECONOMY_CLASS")]
        DOUBLEDECK_CONTROLCAR_ECONOMY_CLASS = 5,
    
        [System.Runtime.Serialization.EnumMember(Value = @"DOUBLEDECK_CARCARRIER_PASSENGERTRAIN")]
        DOUBLEDECK_CARCARRIER_PASSENGERTRAIN = 6,
    
        [System.Runtime.Serialization.EnumMember(Value = @"PASSENGERCARRIAGE_FIRST_ECONOMY_CLASS")]
        PASSENGERCARRIAGE_FIRST_ECONOMY_CLASS = 7,
    
        [System.Runtime.Serialization.EnumMember(Value = @"PASSENGERCARRIAGE_FIRST_CLASS")]
        PASSENGERCARRIAGE_FIRST_CLASS = 8,
    
        [System.Runtime.Serialization.EnumMember(Value = @"PASSENGERCARRIAGE_ECONOMY_CLASS")]
        PASSENGERCARRIAGE_ECONOMY_CLASS = 9,
    
        [System.Runtime.Serialization.EnumMember(Value = @"CONTROLCAR_FIRST_CLASS")]
        CONTROLCAR_FIRST_CLASS = 10,
    
        [System.Runtime.Serialization.EnumMember(Value = @"CONTROLCAR_ECONOMY_CLASS")]
        CONTROLCAR_ECONOMY_CLASS = 11,
    
        [System.Runtime.Serialization.EnumMember(Value = @"CONTROLCAR_FIRST_ECONOMY_CLASS")]
        CONTROLCAR_FIRST_ECONOMY_CLASS = 12,
    
        [System.Runtime.Serialization.EnumMember(Value = @"DININGCAR")]
        DININGCAR = 13,
    
        [System.Runtime.Serialization.EnumMember(Value = @"HALFDININGCAR_FIRST_CLASS")]
        HALFDININGCAR_FIRST_CLASS = 14,
    
        [System.Runtime.Serialization.EnumMember(Value = @"HALFDININGCAR_ECONOMY_CLASS")]
        HALFDININGCAR_ECONOMY_CLASS = 15,
    
        [System.Runtime.Serialization.EnumMember(Value = @"SLEEPER_FIRST_CLASS")]
        SLEEPER_FIRST_CLASS = 16,
    
        [System.Runtime.Serialization.EnumMember(Value = @"SLEEPER_FIRST_ECONOMY_CLASS")]
        SLEEPER_FIRST_ECONOMY_CLASS = 17,
    
        [System.Runtime.Serialization.EnumMember(Value = @"SLEEPER_ECONOMY_CLASS")]
        SLEEPER_ECONOMY_CLASS = 18,
    
        [System.Runtime.Serialization.EnumMember(Value = @"COUCHETTE_FIRST_CLASS")]
        COUCHETTE_FIRST_CLASS = 19,
    
        [System.Runtime.Serialization.EnumMember(Value = @"COUCHETTE_ECONOMY_CLASS")]
        COUCHETTE_ECONOMY_CLASS = 20,
    
        [System.Runtime.Serialization.EnumMember(Value = @"BAGGAGECAR")]
        BAGGAGECAR = 21,
    
        [System.Runtime.Serialization.EnumMember(Value = @"HALFBAGGAGECAR")]
        HALFBAGGAGECAR = 22,
    
        [System.Runtime.Serialization.EnumMember(Value = @"LOCOMOTIVE")]
        LOCOMOTIVE = 23,
    
        [System.Runtime.Serialization.EnumMember(Value = @"POWERCAR")]
        POWERCAR = 24,
    
        [System.Runtime.Serialization.EnumMember(Value = @"UNDEFINED")]
        UNDEFINED = 25,
    
    }
    
    /// <summary>Detailed information on the vehicle [Fahrzeug] type.</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.2.1.0 (Newtonsoft.Json v12.0.0.2)")]
    public partial class VehicleType 
    {
        [Newtonsoft.Json.JsonProperty("category", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public VehicleCategory Category { get; set; }
    
        /// <summary>Class respectively (Construction) type of the vehicle [Bauart bzw. Baureihe].</summary>
        [Newtonsoft.Json.JsonProperty("constructionType", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string ConstructionType { get; set; }
    
        /// <summary>Indicates if the vehicle has first class seats.</summary>
        [Newtonsoft.Json.JsonProperty("hasFirstClass", Required = Newtonsoft.Json.Required.Always)]
        public bool HasFirstClass { get; set; }
    
        /// <summary>Indicates if the vehicle has economy class seats.</summary>
        [Newtonsoft.Json.JsonProperty("hasEconomyClass", Required = Newtonsoft.Json.Required.Always)]
        public bool HasEconomyClass { get; set; }
    
        /// <summary>ID of the layout of the vehicle type.</summary>
        [Newtonsoft.Json.JsonProperty("layoutID", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string LayoutID { get; set; }
    
        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();
    
        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }
    
    
    }
    
    /// <summary>Public transport [Oeffentlicher Verkehr] and vehicle [Fahrzeug] matching result for a particular vehicle id.</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.2.1.0 (Newtonsoft.Json v12.0.0.2)")]
    public partial class TransportMatchVehicleID 
    {
        /// <summary>ID of journey [FahrtID].</summary>
        [Newtonsoft.Json.JsonProperty("journeyID", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string JourneyID { get; set; }
    
        [Newtonsoft.Json.JsonProperty("transport", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public TransportPublic Transport { get; set; } = new TransportPublic();
    
        [Newtonsoft.Json.JsonProperty("vehicle", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public Vehicle Vehicle { get; set; } = new Vehicle();
    
        /// <summary>Wagon identification number [Wagenordnugnsnummer] of vehicle in transport.</summary>
        [Newtonsoft.Json.JsonProperty("wagonIdentificationNumber", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int WagonIdentificationNumber { get; set; }
    
        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();
    
        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }
    
    
    }
    
    /// <summary>Public transports [Oeffentlicher Verkehr] and vehicles [Fahrzeug] matching results for a particular vehicle id.</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.2.1.0 (Newtonsoft.Json v12.0.0.2)")]
    public partial class TransportMatchVehicleIDs 
    {
        /// <summary>Unique id for vehicle (for rail vehicles usually the UIC identification nunmber).</summary>
        [Newtonsoft.Json.JsonProperty("vehicleID", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string VehicleID { get; set; }
    
        /// <summary>List of matchted transports.</summary>
        [Newtonsoft.Json.JsonProperty("transports", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public System.Collections.Generic.ICollection<TransportMatchVehicleID> Transports { get; set; } = new System.Collections.ObjectModel.Collection<TransportMatchVehicleID>();
    
        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();
    
        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }
    
    
    }
    
    /// <summary>Outdoor coordinate within geo reference system.</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.2.1.0 (Newtonsoft.Json v12.0.0.2)")]
    public partial class CoordinateOutdoor 
    {
        /// <summary>Longitude position in reference system.</summary>
        [Newtonsoft.Json.JsonProperty("longitude", Required = Newtonsoft.Json.Required.Always)]
        public double Longitude { get; set; }
    
        /// <summary>Latitude position in reference system.</summary>
        [Newtonsoft.Json.JsonProperty("latitude", Required = Newtonsoft.Json.Required.Always)]
        public double Latitude { get; set; }
    
        /// <summary>Altitude position in reference system.</summary>
        [Newtonsoft.Json.JsonProperty("altitude", Required = Newtonsoft.Json.Required.Always)]
        public double Altitude { get; set; }
    
        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();
    
        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }
    
    
    }
    
    /// <summary>Public transport [Oeffentlicher Verkehr] matching result for a particular geo position.</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.2.1.0 (Newtonsoft.Json v12.0.0.2)")]
    public partial class TransportMatchGeoPosition 
    {
        [Newtonsoft.Json.JsonProperty("position", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public CoordinateOutdoor Position { get; set; } = new CoordinateOutdoor();
    
        /// <summary>Duration of trip in ISO8601 (for instance 'P3Y6M4DT12H30M17S').</summary>
        [Newtonsoft.Json.JsonProperty("informationAge", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string InformationAge { get; set; }
    
        [Newtonsoft.Json.JsonProperty("transport", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public TransportPublic Transport { get; set; } = new TransportPublic();
    
        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();
    
        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }
    
    
    }
    
    /// <summary>Public transports [Oeffentlicher Verkehr] matching results for a particular geo position.</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.2.1.0 (Newtonsoft.Json v12.0.0.2)")]
    public partial class TransportMatchGeoPositions 
    {
        [Newtonsoft.Json.JsonProperty("position", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public CoordinateOutdoor Position { get; set; } = new CoordinateOutdoor();
    
        /// <summary>List of matchted transports.</summary>
        [Newtonsoft.Json.JsonProperty("transports", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public System.Collections.Generic.ICollection<TransportMatchGeoPosition> Transports { get; set; } = new System.Collections.ObjectModel.Collection<TransportMatchGeoPosition>();
    
        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();
    
        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }
    
    
    }
    
    /// <summary>Administrations [Verwaltung] that provide vehicle sequences [Wagenreihung].</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.2.1.0 (Newtonsoft.Json v12.0.0.2)")]
    public partial class VehicleSequenceAvailableAdministrations 
    {
        /// <summary>List of administrations.</summary>
        [Newtonsoft.Json.JsonProperty("administrations", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public System.Collections.Generic.ICollection<Administration> Administrations { get; set; } = new System.Collections.ObjectModel.Collection<Administration>();
    
        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();
    
        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }
    
    
    }
    
    /// <summary>Detail level for vehicle occupancy [Auslastung] information.
    /// - NONE (return no occupancy)
    /// - OVERALL (return only overall occupancy on a first / economy class level)
    /// - DETAIL (return detailed occupancy information like free bike mounts , free seats, stance etc.)</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.2.1.0 (Newtonsoft.Json v12.0.0.2)")]
    public enum OccupancyDetail
    {
        [System.Runtime.Serialization.EnumMember(Value = @"NONE")]
        NONE = 0,
    
        [System.Runtime.Serialization.EnumMember(Value = @"OVERALL")]
        OVERALL = 1,
    
        [System.Runtime.Serialization.EnumMember(Value = @"DETAIL")]
        DETAIL = 2,
    
    }
    
    /// <summary>Status an amenity [Ausstattungsmerkmal] can have.
    /// - AVAILABLE (Amenity is considered as available [Verfügbar])
    /// - NOT_AVAILABLE (Amenity is considered as not available [Nicht Verfügbar])
    /// - RESERVED (Amenity is considered as reserved [Reserviert])
    /// - UNDEFINED (Status is undefined [Undefiniert])</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.2.1.0 (Newtonsoft.Json v12.0.0.2)")]
    public enum AmenityStatus
    {
        [System.Runtime.Serialization.EnumMember(Value = @"AVAILABLE")]
        AVAILABLE = 0,
    
        [System.Runtime.Serialization.EnumMember(Value = @"NOT_AVAILABLE")]
        NOT_AVAILABLE = 1,
    
        [System.Runtime.Serialization.EnumMember(Value = @"RESERVED")]
        RESERVED = 2,
    
        [System.Runtime.Serialization.EnumMember(Value = @"UNDEFINED")]
        UNDEFINED = 3,
    
    }
    
    /// <summary>Type of amenity [Ausstattungsmerkmal] mostly according to VDV 454.
    /// - BISTRO (Bordbistro)
    /// - AIR_CONDITION (Klimaanlage)
    /// - BIKE_SPACE (Fahrradstellplaetze)
    /// - WHEELCHAIR_SPACE (Rollstuhlstellplaetze)
    /// - TOILET_WHEELCHAIR (Rollstuhlgaengige Toilette)
    /// - ZONE_MULTI_PURPOSE (Mehrzweckbereich)
    /// - BOARDING_AID (Einstiegshilfe)
    /// - CABIN_INFANT (Kleinkindabteil)
    /// - ZONE_QUIET (Ruhebereich)
    /// - ZONE_FAMILY (Familienbereich)
    /// - INFO (Info-Abteil)
    /// - SEATS_SEVERELY_DISABLED (Plaetze fuer Schwerbehinderte)
    /// - SEATS_BAHN_COMFORT (Plaetze für BahnComfort-Kunden)
    /// - SEATS_LUFTHANSA_EXPRESS_RAIL (Plaetze fuer LH-Codeshare) ???
    /// - WIFI (WLAN-Hotspot)</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.2.1.0 (Newtonsoft.Json v12.0.0.2)")]
    public enum AmenityType
    {
        [System.Runtime.Serialization.EnumMember(Value = @"BISTRO")]
        BISTRO = 0,
    
        [System.Runtime.Serialization.EnumMember(Value = @"AIR_CONDITION")]
        AIR_CONDITION = 1,
    
        [System.Runtime.Serialization.EnumMember(Value = @"BIKE_SPACE")]
        BIKE_SPACE = 2,
    
        [System.Runtime.Serialization.EnumMember(Value = @"WHEELCHAIR_SPACE")]
        WHEELCHAIR_SPACE = 3,
    
        [System.Runtime.Serialization.EnumMember(Value = @"TOILET_WHEELCHAIR")]
        TOILET_WHEELCHAIR = 4,
    
        [System.Runtime.Serialization.EnumMember(Value = @"ZONE_MULTI_PURPOSE")]
        ZONE_MULTI_PURPOSE = 5,
    
        [System.Runtime.Serialization.EnumMember(Value = @"BOARDING_AID")]
        BOARDING_AID = 6,
    
        [System.Runtime.Serialization.EnumMember(Value = @"CABIN_INFANT")]
        CABIN_INFANT = 7,
    
        [System.Runtime.Serialization.EnumMember(Value = @"ZONE_QUIET")]
        ZONE_QUIET = 8,
    
        [System.Runtime.Serialization.EnumMember(Value = @"ZONE_FAMILY")]
        ZONE_FAMILY = 9,
    
        [System.Runtime.Serialization.EnumMember(Value = @"INFO")]
        INFO = 10,
    
        [System.Runtime.Serialization.EnumMember(Value = @"SEATS_SEVERELY_DISABLED")]
        SEATS_SEVERELY_DISABLED = 11,
    
        [System.Runtime.Serialization.EnumMember(Value = @"SEATS_BAHN_COMFORT")]
        SEATS_BAHN_COMFORT = 12,
    
        [System.Runtime.Serialization.EnumMember(Value = @"SEATS_LUFTHANSA_EXPRESS_RAIL")]
        SEATS_LUFTHANSA_EXPRESS_RAIL = 13,
    
        [System.Runtime.Serialization.EnumMember(Value = @"WIFI")]
        WIFI = 14,
    
    }
    
    /// <summary>Vehicle amenity [Ausstattungsmerkmal].</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.2.1.0 (Newtonsoft.Json v12.0.0.2)")]
    public partial class VehicleAmenity 
    {
        [Newtonsoft.Json.JsonProperty("type", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public AmenityType Type { get; set; }
    
        [Newtonsoft.Json.JsonProperty("status", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public AmenityStatus Status { get; set; }
    
        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();
    
        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }
    
    
    }
    
    /// <summary>Vehicle group [Fahrzeuggruppe] within the vehicle sequence [Wagenreihung] containing at least one vehicle [Fahrzeug].</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.2.1.0 (Newtonsoft.Json v12.0.0.2)")]
    public partial class VehicleGroupInSequence 
    {
        /// <summary>Name of the vehicle group within the sequence.</summary>
        [Newtonsoft.Json.JsonProperty("name", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Name { get; set; }
    
        [Newtonsoft.Json.JsonProperty("transport", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public TransportPublicReferenceDestination Transport { get; set; } = new TransportPublicReferenceDestination();
    
        /// <summary>Vehicles within the group ordered in direction of travel, including informations only valid within the sequence.</summary>
        [Newtonsoft.Json.JsonProperty("vehicles", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public System.Collections.Generic.ICollection<VehicleInGroup> Vehicles { get; set; } = new System.Collections.ObjectModel.Collection<VehicleInGroup>();
    
        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();
    
        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }
    
    
    }
    
    /// <summary>Vehicle information for a vehicle [Fahrzeug] within a vehicle group [Fahrzeuggruppe] within a vehicle sequence.</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.2.1.0 (Newtonsoft.Json v12.0.0.2)")]
    public partial class VehicleInGroup 
    {
        /// <summary>ID of the vehicle (for rail vehicles usually the UIC identification nunmber).</summary>
        [Newtonsoft.Json.JsonProperty("vehicleID", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string VehicleID { get; set; }
    
        [Newtonsoft.Json.JsonProperty("type", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public VehicleType Type { get; set; } = new VehicleType();
    
        /// <summary>Wagon identification number [Ordnungsnummer] of the vehicle. May be empty, if no unique identification of a wagon is needed.</summary>
        [Newtonsoft.Json.JsonProperty("wagonIdentificationNumber", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int WagonIdentificationNumber { get; set; }
    
        [Newtonsoft.Json.JsonProperty("status", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public VehicleStatus Status { get; set; }
    
        [Newtonsoft.Json.JsonProperty("orientation", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public VehicleOrientation Orientation { get; set; }
    
        [Newtonsoft.Json.JsonProperty("platformPosition", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public VehiclePlatformPosition PlatformPosition { get; set; }
    
        /// <summary>Amount and status of vehicle amenities [Ausstattungsmerkmale].</summary>
        [Newtonsoft.Json.JsonProperty("amenities", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public System.Collections.Generic.ICollection<VehicleAmenity> Amenities { get; set; } = new System.Collections.ObjectModel.Collection<VehicleAmenity>();
    
        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();
    
        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }
    
    
    }
    
    /// <summary>Orientation of vehicle [Fahrzeug].
    ///  - FORWARDS (Relative orientation forwards [Vorwaerts])
    ///  - BACKWARDS (Relative orientation backwards [Rueckwaerts])
    ///  - UNDEFINED (Undefined orientation)</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.2.1.0 (Newtonsoft.Json v12.0.0.2)")]
    public enum VehicleOrientation
    {
        [System.Runtime.Serialization.EnumMember(Value = @"FORWARDS")]
        FORWARDS = 0,
    
        [System.Runtime.Serialization.EnumMember(Value = @"BACKWARDS")]
        BACKWARDS = 1,
    
        [System.Runtime.Serialization.EnumMember(Value = @"UNDEFINED")]
        UNDEFINED = 2,
    
    }
    
    /// <summary>Position of a vehicle [Fahrzeug] at a platform [Gleis, Bahnsteig, Plattform].</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.2.1.0 (Newtonsoft.Json v12.0.0.2)")]
    public partial class VehiclePlatformPosition 
    {
        /// <summary>Start position [Beginn Meter] at the platform given in meters in local coordinates.</summary>
        [Newtonsoft.Json.JsonProperty("start", Required = Newtonsoft.Json.Required.Always)]
        public double Start { get; set; }
    
        /// <summary>End position [Ende Meter] at the platform given in meters in local coordinates.</summary>
        [Newtonsoft.Json.JsonProperty("end", Required = Newtonsoft.Json.Required.Always)]
        public double End { get; set; }
    
        /// <summary>Sector [Sektor] the major part of the vehicle is located in. May be empty in case the platform has no sectors.</summary>
        [Newtonsoft.Json.JsonProperty("sector", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Sector { get; set; }
    
        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();
    
        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }
    
    
    }
    
    /// <summary>Vehicle sequence [Wagenreihung] for transports at a particular departure.</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.2.1.0 (Newtonsoft.Json v12.0.0.2)")]
    public partial class VehicleSequenceDeparture 
    {
        /// <summary>ID of the requested journey [FahrtID].</summary>
        [Newtonsoft.Json.JsonProperty("journeyID", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string JourneyID { get; set; }
    
        /// <summary>ID of the requested departure [AbfahrtID].</summary>
        [Newtonsoft.Json.JsonProperty("departureID", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string DepartureID { get; set; }
    
        /// <summary>Name of the scheduled departure platform [Plattform Soll].</summary>
        [Newtonsoft.Json.JsonProperty("departurePlatformSchedule", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string DeparturePlatformSchedule { get; set; }
    
        /// <summary>Name of the estimated departure platform [Plattform Vorschau]. Note that there might be no information on the estimated departure platform (due to various reasons); in this case the attribute platform will also be empty.</summary>
        [Newtonsoft.Json.JsonProperty("departurePlatform", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string DeparturePlatform { get; set; }
    
        [Newtonsoft.Json.JsonProperty("platform", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Platform Platform { get; set; }
    
        [Newtonsoft.Json.JsonProperty("sequenceStatus", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public VehicleSequenceStatus SequenceStatus { get; set; }
    
        /// <summary>Vehicle groups [Fahrzeuggruppen] of the transport ordered in direction of travel.</summary>
        [Newtonsoft.Json.JsonProperty("groups", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public System.Collections.Generic.ICollection<VehicleGroupInSequence> Groups { get; set; } = new System.Collections.ObjectModel.Collection<VehicleGroupInSequence>();
    
        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();
    
        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }
    
    
    }
    
    /// <summary>Reflects vehicle sequence [Wagenreihung] status with respect to order of first and economy class. 
    /// - MATCHES_SCHEDULE (The current sequence matches the scheduled order.)
    /// - DIFFERS_FROM_SCHEDULE (The current sequence differs from the scheduled order.)
    /// - NO_SCHEDULE (There is no scheduled sequence.)</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.2.1.0 (Newtonsoft.Json v12.0.0.2)")]
    public enum VehicleSequenceStatus
    {
        [System.Runtime.Serialization.EnumMember(Value = @"MATCHES_SCHEDULE")]
        MATCHES_SCHEDULE = 0,
    
        [System.Runtime.Serialization.EnumMember(Value = @"DIFFERS_FROM_SCHEDULE")]
        DIFFERS_FROM_SCHEDULE = 1,
    
        [System.Runtime.Serialization.EnumMember(Value = @"NO_SCHEDULE")]
        NO_SCHEDULE = 2,
    
    }
    
    /// <summary>Status of vehicle [Fahrzeug] with respect to accessibility for passengers.
    /// - OPEN  (Vehicle is open [Offen]
    /// - CLOSED (Vehicle is closed [Geschlossen]</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.2.1.0 (Newtonsoft.Json v12.0.0.2)")]
    public enum VehicleStatus
    {
        [System.Runtime.Serialization.EnumMember(Value = @"OPEN")]
        OPEN = 0,
    
        [System.Runtime.Serialization.EnumMember(Value = @"CLOSED")]
        CLOSED = 1,
    
    }
    
    /// <summary>Address with geo information.</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.2.1.0 (Newtonsoft.Json v12.0.0.2)")]
    public partial class AddressGeo 
    {
        /// <summary>Street name of address the position should be retrived for.</summary>
        [Newtonsoft.Json.JsonProperty("street", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Street { get; set; }
    
        /// <summary>Housenumber of address the position should be retrived for.</summary>
        [Newtonsoft.Json.JsonProperty("houseNumber", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string HouseNumber { get; set; }
    
        /// <summary>Postalcode [Postleitzahl] of address the position should be retrived for.</summary>
        [Newtonsoft.Json.JsonProperty("postalCode", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string PostalCode { get; set; }
    
        /// <summary>City of address the position should be retrived for.</summary>
        [Newtonsoft.Json.JsonProperty("city", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string City { get; set; }
    
        /// <summary>Country of address the position should be retrived for.</summary>
        [Newtonsoft.Json.JsonProperty("country", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Country { get; set; }
    
        [Newtonsoft.Json.JsonProperty("position", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Coordinate2D Position { get; set; }
    
        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();
    
        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }
    
    
    }
    
    /// <summary>List of locations.</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.2.1.0 (Newtonsoft.Json v12.0.0.2)")]
    public partial class Locations 
    {
        /// <summary>List of matching locations.</summary>
        [Newtonsoft.Json.JsonProperty("locationList", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<AddressGeo> LocationList { get; set; }
    
        /// <summary>List of matching stop places.</summary>
        [Newtonsoft.Json.JsonProperty("stopPlaces", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<StopPlaceSearchResult> StopPlaces { get; set; }
    
        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();
    
        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.2.1.0 (Newtonsoft.Json v12.0.0.2)")]
    public enum IndoorSegmentType
    {
        [System.Runtime.Serialization.EnumMember(Value = @"WALK")]
        WALK = 0,
    
        [System.Runtime.Serialization.EnumMember(Value = @"STAIRS")]
        STAIRS = 1,
    
        [System.Runtime.Serialization.EnumMember(Value = @"ESCALATOR")]
        ESCALATOR = 2,
    
        [System.Runtime.Serialization.EnumMember(Value = @"ELEVATOR")]
        ELEVATOR = 3,
    
        [System.Runtime.Serialization.EnumMember(Value = @"RAMP")]
        RAMP = 4,
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.2.1.0 (Newtonsoft.Json v12.0.0.2)")]
    internal class DateFormatConverter : Newtonsoft.Json.Converters.IsoDateTimeConverter
    {
        public DateFormatConverter()
        {
            DateTimeFormat = "yyyy-MM-dd";
        }
    }

    [System.CodeDom.Compiler.GeneratedCode("NSwag", "13.8.2.0 (NJsonSchema v10.2.1.0 (Newtonsoft.Json v12.0.0.2))")]
    public partial class ApiException : System.Exception
    {
        public int StatusCode { get; private set; }

        public string Response { get; private set; }

        public System.Collections.Generic.IReadOnlyDictionary<string, System.Collections.Generic.IEnumerable<string>> Headers { get; private set; }

        public ApiException(string message, int statusCode, string response, System.Collections.Generic.IReadOnlyDictionary<string, System.Collections.Generic.IEnumerable<string>> headers, System.Exception innerException)
            : base(message + "\n\nStatus: " + statusCode + "\nResponse: \n" + ((response == null) ? "(null)" : response.Substring(0, response.Length >= 512 ? 512 : response.Length)), innerException)
        {
            StatusCode = statusCode;
            Response = response; 
            Headers = headers;
        }

        public override string ToString()
        {
            return string.Format("HTTP Response: \n\n{0}\n\n{1}", Response, base.ToString());
        }
    }

    [System.CodeDom.Compiler.GeneratedCode("NSwag", "13.8.2.0 (NJsonSchema v10.2.1.0 (Newtonsoft.Json v12.0.0.2))")]
    public partial class ApiException<TResult> : ApiException
    {
        public TResult Result { get; private set; }

        public ApiException(string message, int statusCode, string response, System.Collections.Generic.IReadOnlyDictionary<string, System.Collections.Generic.IEnumerable<string>> headers, TResult result, System.Exception innerException)
            : base(message, statusCode, response, headers, innerException)
        {
            Result = result;
        }
    }

}

#pragma warning restore 1591
#pragma warning restore 1573
#pragma warning restore  472
#pragma warning restore  114
#pragma warning restore  108