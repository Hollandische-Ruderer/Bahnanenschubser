{
  "openapi": "3.0.1",
  "info": {
    //"title": "INNO-API :: TR innovation API and pre production for RIS-API",
    "title": "InnoApi",
    "description": "TR Reisendeninformationen innovation API and pre production for RIS-API.</br></br>For details on <b>INNO-API</b>: <a href=\"https://ri-wiki.com/x/CrHDAw\">https://ri-wiki.com/x/CrHDAw</a></br></br>For details on <b>RIS-API</b>: <a href=\"https://ri-wiki.com/x/q6GsBQ\">https://ri-wiki.com/x/q6GsBQ</a></br></br>Getting started:</br>Use code generation with <a href=\"https://github.com/OpenAPITools/openapi-generator\">openapi-generator</a> for the language of your desire.</br>for Java 11: <i>java -jar openapi-generator-cli-4.1.3.jar generate -g java -i swagger.yml --library native --api-package %TBD% --invoker-package %TBD% --model-package %TBD%</i>",
    "contact": {
      "name": "Tim Leiner",
      "email": "tim.leiner@deutschebahn.com"
    },
    "version": "2.14.17"
  },
  "servers": [ { "url": "https://innoapi-k8s01-dev-fcd.reisenden.info/2.14" } ],
  "security": [ { "basicAuth": [] } ],
  "tags": [
    {
      "name": "Locations",
      "description": "[DRAFT] Locations by address, position and autocomplete."
    },
    {
      "name": "Transports",
      "description": "Vehicle sequences, positions at platform, amenities, occupancies, geo positions etc. for transports."
    },
    {
      "name": "Mobilities",
      "description": "[DRAFT] Mobility information for ondemand and individual transports."
    },
    {
      "name": "Connections",
      "description": "Connection information for arrivals and particular journey combinations."
    },
    {
      "name": "Routings",
      "description": "[DRAFT] Multimodal routing, indoor routing and indoor 2 outdoor routing."
    },
    {
      "name": "Journeys",
      "description": "Journey details like segments, arrivals and departures and matching."
    },
    {
      "name": "Boards Multimodal",
      "description": "[DRAFT] Multimodal arrival and departure boards for public, ondemand and individual transports with walk durations depending on reference position."
    },
    {
      "name": "Misc",
      "description": "[DRAFT] miscellaneous stuff like weather and co2 footprint that don't fit anywhere else"
    },
    {
      "name": "Stop Places",
      "description": "Information on stop places [Haltestellen] like base data, connecting times, platforms and all kind of mappings by position, name and foreign keys."
    },
    {
      "name": "Boards Public",
      "description": "arrival and departure boards for public transports"
    },
    {
      "name": "Events",
      "description": "events for journeys, trains etc."
    }
  ],
  "paths": {
    "/events/event/fetch": {
      "get": {
        "tags": [ "Events" ],
        "description": "Returns all collected events since the last fetch.",
        "operationId": "fetch",
        "parameters": [
          {
            "name": "clientID",
            "in": "query",
            "description": "Unique identifier of client.",
            "required": true,
            "schema": { "type": "string" },
            "example": "e7d12983-dsdsd-4638-95d0-079be9aad660"
          }
        ],
        "responses": {
          "500": {
            "description": "API Exception",
            "content": { "application/problem+json": { "schema": { "$ref": "#/components/schemas/ErrorResponse" } } }
          },
          "200": {
            "description": "OK",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/EventFetchResponse" } } }
          }
        }
      }
    },
    "/events/event/journeychanged/subscribe": {
      "get": {
        "tags": [ "Events" ],
        "description": "Subscribes to all change events for a particular journey.",
        "operationId": "journeySubscribe",
        "parameters": [
          {
            "name": "clientID",
            "in": "query",
            "description": "Unique identifier of client.",
            "required": true,
            "schema": { "type": "string" },
            "example": "e7d12983-dsdsd-4638-95d0-079be9aad660"
          },
          {
            "name": "journeyID",
            "in": "query",
            "description": "ID of journey.",
            "required": true,
            "schema": { "type": "string" },
            "example": "e7d12983-8d79-4638-95d0-079be9aad660"
          }
        ],
        "responses": {
          "500": {
            "description": "API Exception",
            "content": { "application/problem+json": { "schema": { "$ref": "#/components/schemas/ErrorResponse" } } }
          },
          "200": {
            "description": "OK",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/EventJourneySubscribeResponse" } } }
          }
        }
      }
    },
    "/events/event/journeychanged/unsubscribe": {
      "get": {
        "tags": [ "Events" ],
        "description": "Unsubscribes from all change events for a particular journey.",
        "operationId": "journeyUnsubscribe",
        "parameters": [
          {
            "name": "clientID",
            "in": "query",
            "description": "Unique identifier of client.",
            "required": true,
            "schema": { "type": "string" },
            "example": "e7d12983-dsdsd-4638-95d0-079be9aad660"
          },
          {
            "name": "journeyID",
            "in": "query",
            "description": "ID of journey.",
            "required": true,
            "schema": { "type": "string" },
            "example": "e7d12983-8d79-4638-95d0-079be9aad660"
          }
        ],
        "responses": {
          "500": {
            "description": "API Exception",
            "content": { "application/problem+json": { "schema": { "$ref": "#/components/schemas/ErrorResponse" } } }
          },
          "200": {
            "description": "OK",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/EventJourneyUnsubscribeResponse" } } }
          }
        }
      }
    },
    "/events/event/trainpositionchanged/subscribe": {
      "get": {
        "tags": [ "Events" ],
        "description": "Subscribes to all train position changed events for a particular train within a journey.",
        "operationId": "trainPositionSubscribe",
        "parameters": [
          {
            "name": "clientID",
            "in": "query",
            "description": "Unique identifier of client.",
            "required": true,
            "schema": { "type": "string" },
            "example": "e7d12983-dsdsd-4638-95d0-079be9aad660"
          },
          {
            "name": "journeyID",
            "in": "query",
            "description": "ID of journey.",
            "required": true,
            "schema": { "type": "string" },
            "example": "e7d12983-8d79-4638-95d0-079be9aad660"
          },
          {
            "name": "trainID",
            "in": "query",
            "description": "ID of train within journey.",
            "required": true,
            "schema": { "type": "string" },
            "example": "ICE517"
          }
        ],
        "responses": {
          "500": {
            "description": "API Exception",
            "content": { "application/problem+json": { "schema": { "$ref": "#/components/schemas/ErrorResponse" } } }
          },
          "200": {
            "description": "OK",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/EventTrainPositionSubscribeResponse" } } }
          }
        }
      }
    },
    "/events/event/trainpositionchanged/unsubscribe": {
      "get": {
        "tags": [ "Events" ],
        "description": "Unsubscribes from all train position changed events for a particular train within a journey.",
        "operationId": "trainPositionUnsubscribe",
        "parameters": [
          {
            "name": "clientID",
            "in": "query",
            "description": "Unique identifier of client.",
            "required": true,
            "schema": { "type": "string" },
            "example": "e7d12983-dsdsd-4638-95d0-079be9aad660"
          },
          {
            "name": "journeyID",
            "in": "query",
            "description": "ID of journey.",
            "required": true,
            "schema": { "type": "string" },
            "example": "e7d12983-8d79-4638-95d0-079be9aad660"
          },
          {
            "name": "trainID",
            "in": "query",
            "description": "ID of train within journey.",
            "required": true,
            "schema": { "type": "string" },
            "example": "ICE517"
          }
        ],
        "responses": {
          "500": {
            "description": "API Exception",
            "content": { "application/problem+json": { "schema": { "$ref": "#/components/schemas/ErrorResponse" } } }
          },
          "200": {
            "description": "OK",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/EventTrainPositionUnsubscribeResponse" } } }
          }
        }
      }
    },
    "/boards/boards/public/arrival/{evaNumbers}": {
      "get": {
        "tags": [ "Boards Public" ],
        "description": "Returns an arrival board [Ankunftstafel] for all public transports [Oeffentliche Verkehre].",
        "operationId": "boardArrival",
        "parameters": [
          {
            "name": "evaNumbers",
            "in": "path",
            "description": "list of eva numbers of stations [Bahnhoefe] to get board for",
            "required": true,
            "schema": {
              "type": "array",
              "items": { "type": "string" }
            }
          },
          {
            "name": "timeStart",
            "in": "query",
            "description": "start time for board as full qualified datetime, if omitted current time will be used",
            "required": false,
            "schema": {
              "type": "string",
              "format": "date-time"
            }
          },
          {
            "name": "timeEnd",
            "in": "query",
            "description": "end time for board as full qualified datetime, if omitted current time plus 30 minutes will be used",
            "required": false,
            "schema": {
              "type": "string",
              "format": "date-time"
            }
          },
          {
            "name": "includeStationGroup",
            "in": "query",
            "description": "should all stations of group the passed eva numbers belong to (for instance a request to 'FFM Hoch' would also return 'FFM tief') be included",
            "required": false,
            "schema": {
              "type": "boolean",
              "default": true
            }
          },
          {
            "name": "filterTransports",
            "in": "query",
            "description": "filter for transport types that should be returned, if ommitted all types of transport are returned",
            "required": false,
            "schema": {
              "type": "array",
              "items": { "$ref": "#/components/schemas/TransportType" }
            }
          },
          {
            "name": "maxViaStops",
            "in": "query",
            "description": "limits amount of via stops per transport (limitation doesn't apply to additional and canceled stops), if ommitted all via stops are returned, if zero no via stops are returned",
            "required": false,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "maxTransportsPerType",
            "in": "query",
            "description": "limits amount of results per transport type, if ommitted no truncation is applied",
            "required": false,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "sortBy",
            "in": "query",
            "description": "define sorting order, if omitted sorting is by TIME\n- TIME (Sorting based on best known time information ie real before preview before schedule)\n- TIME_SCHEDULE (Sorting based on schedule time)",
            "required": false,
            "schema": { "$ref": "#/components/schemas/SortKeyTime" }
          },
          {
            "name": "innoSollfahrplan",
            "in": "query",
            "description": "inno: controls whether to include scheduled timetable [Sollfahrplan] or not",
            "required": false,
            "schema": {
              "type": "boolean",
              "default": false
            }
          }
        ],
        "responses": {
          "500": {
            "description": "API Exception",
            "content": { "application/problem+json": { "schema": { "$ref": "#/components/schemas/ErrorResponse" } } }
          },
          "200": {
            "description": "Success",
            "headers": {
              "Cache-Control": {
                "description": "Controls whether and how long response can be cached by consumers, defaults to 'no-cache, no-store'.",
                "style": "simple",
                "schema": { "type": "string" }
              }
            },
            "content": { "application/vnd.de.db.ris+json": { "schema": { "$ref": "#/components/schemas/BoardPublicArrival" } } }
          }
        }
      }
    },
    "/boards/boards/public/departure/{evaNumbers}": {
      "get": {
        "tags": [ "Boards Public" ],
        "description": "Returns a departure board [Abfahrtstafel] for all public transports [Oeffentliche Verkehre].",
        "operationId": "boardDeparture",
        "parameters": [
          {
            "name": "evaNumbers",
            "in": "path",
            "description": "list of eva numbers of stations [Bahnhoefe] to get board for",
            "required": true,
            "schema": {
              "type": "array",
              "items": { "type": "string" }
            }
          },
          {
            "name": "timeStart",
            "in": "query",
            "description": "start time for board as full qualified datetime, if omitted current time will be used",
            "required": false,
            "schema": {
              "type": "string",
              "format": "date-time"
            }
          },
          {
            "name": "timeEnd",
            "in": "query",
            "description": "end time for board as full qualified datetime, if omitted current time plus 30 minutes will be used",
            "required": false,
            "schema": {
              "type": "string",
              "format": "date-time"
            }
          },
          {
            "name": "includeStationGroup",
            "in": "query",
            "description": "should all stations of group the passed eva numbers belong to (for instance a request to 'FFM Hoch' would also return 'FFM tief') be included",
            "required": false,
            "schema": {
              "type": "boolean",
              "default": true
            }
          },
          {
            "name": "filterTransports",
            "in": "query",
            "description": "filter for transport types that should be returned, if ommitted all types of transport are returned",
            "required": false,
            "schema": {
              "type": "array",
              "items": { "$ref": "#/components/schemas/TransportType" }
            }
          },
          {
            "name": "maxViaStops",
            "in": "query",
            "description": "limits amount of via stops per transport (limitation doesn't apply to additional and canceled stops), if ommitted all via stops are returned, if zero no via stops are returned",
            "required": false,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "maxTransportsPerType",
            "in": "query",
            "description": "limits amount of results per transport type, if ommitted no truncation is applied",
            "required": false,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "sortBy",
            "in": "query",
            "description": "define sorting order, if omitted sorting is by TIME\n- TIME (Sorting based on best known time information ie real before preview before schedule)\n- TIME_SCHEDULE (Sorting based on schedule time)",
            "required": false,
            "schema": { "$ref": "#/components/schemas/SortKeyTime" }
          },
          {
            "name": "innoSollfahrplan",
            "in": "query",
            "description": "inno: controls whether to include scheduled timetable [Sollfahrplan] or not",
            "required": false,
            "schema": {
              "type": "boolean",
              "default": false
            }
          }
        ],
        "responses": {
          "500": {
            "description": "API Exception",
            "content": { "application/problem+json": { "schema": { "$ref": "#/components/schemas/ErrorResponse" } } }
          },
          "200": {
            "description": "Success",
            "headers": {
              "Cache-Control": {
                "description": "Controls whether and how long response can be cached by consumers, defaults to 'no-cache, no-store'.",
                "style": "simple",
                "schema": { "type": "string" }
              }
            },
            "content": { "application/vnd.de.db.ris+json": { "schema": { "$ref": "#/components/schemas/BoardPublicDeparture" } } }
          }
        }
      }
    },
    "/stop-places/{evaNumber}/keys": {
      "get": {
        "tags": [ "Stop Places" ],
        "description": "Returns all known keys of specific key type for the stop place with the provided eva number. Take care that associated keys may belong to some kind of group [Station for instance] and that relations between keys are most likely n:m and not 1:1.",
        "operationId": "keys",
        "parameters": [
          {
            "name": "evaNumber",
            "in": "path",
            "description": "eva number to return stop place [Haltestelle] keys for",
            "required": true,
            "schema": { "type": "string" }
          },
          {
            "name": "keyType",
            "in": "query",
            "description": "filter mapped keys by specific key type, if omitted all keys are returned",
            "required": false,
            "schema": { "$ref": "#/components/schemas/StopPlaceKeyType" }
          }
        ],
        "responses": {
          "500": {
            "description": "API Exception",
            "content": { "application/problem+json": { "schema": { "$ref": "#/components/schemas/ErrorResponse" } } }
          },
          "200": {
            "description": "Success",
            "headers": {
              "Cache-Control": {
                "description": "Controls whether and how long response can be cached by consumers, defaults to 'no-cache, no-store'.",
                "style": "simple",
                "schema": { "type": "string" }
              }
            },
            "content": { "application/vnd.de.db.ris+json": { "schema": { "$ref": "#/components/schemas/StopPlaceKeys" } } }
          }
        }
      }
    },
    "/stop-places/{evaNumber}/platforms/{platform}": {
      "get": {
        "tags": [ "Stop Places" ],
        "description": "Returns detailed information for requested platform [Gleis, Bahnsteig, Plattform] and optional its sectors [Sektoren].",
        "operationId": "platform",
        "parameters": [
          {
            "name": "evaNumber",
            "in": "path",
            "description": "eva number of desired stop place [Haltestelle]",
            "required": true,
            "schema": { "type": "string" }
          },
          {
            "name": "platform",
            "in": "path",
            "description": "name of desired platform",
            "required": true,
            "schema": { "type": "string" }
          },
          {
            "name": "includeSectors",
            "in": "query",
            "description": "should sector information be included",
            "required": false,
            "schema": {
              "type": "boolean",
              "default": false
            }
          }
        ],
        "responses": {
          "500": {
            "description": "API Exception",
            "content": { "application/problem+json": { "schema": { "$ref": "#/components/schemas/ErrorResponse" } } }
          },
          "200": {
            "description": "Success",
            "headers": {
              "Cache-Control": {
                "description": "Controls whether and how long response can be cached by consumers, defaults to 'no-cache, no-store'.",
                "style": "simple",
                "schema": { "type": "string" }
              }
            },
            "content": { "application/vnd.de.db.ris+json": { "schema": { "$ref": "#/components/schemas/Platform" } } }
          }
        }
      }
    },
    "/stop-places/{evaNumber}": {
      "get": {
        "tags": [ "Stop Places" ],
        "description": "Returns stop place for provided eva number.",
        "operationId": "byEvaNumber",
        "parameters": [
          {
            "name": "evaNumber",
            "in": "path",
            "description": "eva number to return stop place [Haltestelle] for",
            "required": true,
            "schema": { "type": "string" }
          },
          {
            "name": "locales",
            "in": "query",
            "description": "languages to include, defaults to DE only\n- DE (German)\n- EN (English)\n- FR (French)\n- IT (Italian)",
            "required": false,
            "schema": {
              "type": "array",
              "items": { "$ref": "#/components/schemas/Locale" }
            }
          }
        ],
        "responses": {
          "500": {
            "description": "API Exception",
            "content": { "application/problem+json": { "schema": { "$ref": "#/components/schemas/ErrorResponse" } } }
          },
          "200": {
            "description": "Success",
            "headers": {
              "Cache-Control": {
                "description": "Controls whether and how long response can be cached by consumers, defaults to 'no-cache, no-store'.",
                "style": "simple",
                "schema": { "type": "string" }
              }
            },
            "content": { "application/vnd.de.db.ris+json": { "schema": { "$ref": "#/components/schemas/StopPlace" } } }
          }
        }
      }
    },
    "/stop-places/byname/{query}": {
      "get": {
        "tags": [ "Stop Places" ],
        "description": "Returns a list of stop places [Haltestelle] matching the provided name query, optional limited to a max radius around a provided geo coordinate, ordered by relevance or name matching desc. The query has support for fuzzy searching, means minimal typos are ignored even without providing wildcards.",
        "operationId": "byName",
        "parameters": [
          {
            "name": "query",
            "in": "path",
            "description": "query for stop place names [Haltestellenname] to search for, use * for wildcards if necessary",
            "required": true,
            "schema": { "type": "string" }
          },
          {
            "name": "longitude",
            "in": "query",
            "description": "optional geo reference position longitude",
            "required": false,
            "schema": {
              "type": "number",
              "format": "double"
            }
          },
          {
            "name": "latitude",
            "in": "query",
            "description": "optional geo reference position latitude",
            "required": false,
            "schema": {
              "type": "number",
              "format": "double"
            }
          },
          {
            "name": "radius",
            "in": "query",
            "description": "optional radius in meters around geo reference position to search for stop places matching query",
            "required": false,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "sortBy",
            "in": "query",
            "description": "sorting for search results, if omitted RELEVANCE will be used\n- RELEVANCE (stop places are sorted by relevance descending (main stations etc. first))\n- QUERY_MATCH (stop places are sorted by matching the provided query string descending aka Levensthein Distance)",
            "required": false,
            "schema": { "$ref": "#/components/schemas/StopPlaceSortKey" }
          },
          {
            "name": "onlyValid",
            "in": "query",
            "description": "indicates whether only valid stop places should be returned, defaults to true",
            "required": false,
            "schema": {
              "type": "boolean",
              "default": true
            }
          },
          {
            "name": "locales",
            "in": "query",
            "description": "languages to include, defaults to DE only\n- DE (German)\n- EN (English)\n- FR (French)\n- IT (Italian)",
            "required": false,
            "schema": {
              "type": "array",
              "items": { "$ref": "#/components/schemas/Locale" }
            }
          },
          {
            "name": "limit",
            "in": "query",
            "description": "limit parameter in order to limit total amount of results, defaults to 25",
            "required": false,
            "schema": {
              "type": "integer",
              "format": "int32",
              "default": 25
            }
          }
        ],
        "responses": {
          "500": {
            "description": "API Exception",
            "content": { "application/problem+json": { "schema": { "$ref": "#/components/schemas/ErrorResponse" } } }
          },
          "200": {
            "description": "Success",
            "headers": {
              "Cache-Control": {
                "description": "Controls whether and how long response can be cached by consumers, defaults to 'no-cache, no-store'.",
                "style": "simple",
                "schema": { "type": "string" }
              }
            },
            "content": { "application/vnd.de.db.ris+json": { "schema": { "$ref": "#/components/schemas/StopPlaceSearchResults" } } }
          }
        }
      }
    },
    "/stop-places/bygeoposition/{longitude}/{latitude}": {
      "get": {
        "tags": [ "Stop Places" ],
        "description": "Returns a list of stop places [Haltestellen] arround geo position within provided radius ordered by distance asc.",
        "operationId": "byPosition",
        "parameters": [
          {
            "name": "longitude",
            "in": "path",
            "description": "geo position longitude",
            "required": true,
            "schema": {
              "type": "number",
              "format": "double"
            }
          },
          {
            "name": "latitude",
            "in": "path",
            "description": "geo position latitude",
            "required": true,
            "schema": {
              "type": "number",
              "format": "double"
            }
          },
          {
            "name": "radius",
            "in": "query",
            "description": "radius in meters around geo position",
            "required": false,
            "schema": {
              "type": "integer",
              "format": "int32",
              "default": 200
            }
          },
          {
            "name": "onlyValid",
            "in": "query",
            "description": "indicates whether only valid stop places should be returned, defaults to true",
            "required": false,
            "schema": {
              "type": "boolean",
              "default": true
            }
          },
          {
            "name": "locales",
            "in": "query",
            "description": "languages to include, defaults to DE only\n- DE (German)\n- EN (English)\n- FR (French)\n- IT (Italian)",
            "required": false,
            "schema": {
              "type": "array",
              "items": { "$ref": "#/components/schemas/Locale" }
            }
          }
        ],
        "responses": {
          "500": {
            "description": "API Exception",
            "content": { "application/problem+json": { "schema": { "$ref": "#/components/schemas/ErrorResponse" } } }
          },
          "200": {
            "description": "Success",
            "headers": {
              "Cache-Control": {
                "description": "Controls whether and how long response can be cached by consumers, defaults to 'no-cache, no-store'.",
                "style": "simple",
                "schema": { "type": "string" }
              }
            },
            "content": { "application/vnd.de.db.ris+json": { "schema": { "$ref": "#/components/schemas/StopPlaces" } } }
          }
        }
      }
    },
    "/stop-places/{evaNumber}/connecting-times": {
      "get": {
        "tags": [ "Stop Places" ],
        "description": "Returns connecting times [Umstiegszeiten] matrix for a set of stop places [Haltestellen] belonging to a particular group on a platform or optional sector level. Source for connecting times is at least the DB guideline RIL420 and in case of a digitialized station a real indoor mapping with different persona types.",
        "operationId": "connectingTimes",
        "parameters": [
          {
            "name": "evaNumber",
            "in": "path",
            "description": "eva number of desired stop place [Haltestelle]",
            "required": true,
            "schema": { "type": "string" }
          },
          {
            "name": "group",
            "in": "query",
            "description": "stop place group [Station, Stadtgebiet, Umstiegsbereich] to consider connecting times for, defaults to STATION if omitted\n- STATION (group defined by station, for instance FFM = Hoch + Tief)",
            "required": false,
            "schema": { "$ref": "#/components/schemas/StopPlaceGroupType" }
          },
          {
            "name": "fromPlatform",
            "in": "query",
            "description": "platform to calculate times origin, if omitted all platforms are considered",
            "required": false,
            "schema": { "type": "string" }
          },
          {
            "name": "fromSector",
            "in": "query",
            "description": "sector to calculate times origin, if omitted all sectors are considered",
            "required": false,
            "schema": { "type": "string" }
          },
          {
            "name": "toPlatform",
            "in": "query",
            "description": "platform to calculate times destination, if omitted all platforms are considered",
            "required": false,
            "schema": { "type": "string" }
          },
          {
            "name": "toSector",
            "in": "query",
            "description": "sector to calculate times destination, if omitted all sectors are considered",
            "required": false,
            "schema": { "type": "string" }
          },
          {
            "name": "calculateSectors",
            "in": "query",
            "description": "should connecting times be calculated based on sector level, otherwise platform level",
            "required": false,
            "schema": {
              "type": "boolean",
              "default": false
            }
          },
          {
            "name": "personaTypes",
            "in": "query",
            "description": "persona types that should be returned (if more than 1 is available), defaults to all personae if omitted",
            "required": false,
            "schema": {
              "type": "array",
              "items": { "$ref": "#/components/schemas/PersonaType" }
            }
          },
          {
            "name": "onlyRil420",
            "in": "query",
            "description": "only return RIL420 based connecting times (hence no INDOOR_ROUTING or FALLBACK), defaults to false meaning the best available connecting time source will be returned (1. INDOOR_ROUTING, 2. RIL420, 3. FALLBACK)",
            "required": false,
            "schema": {
              "type": "boolean",
              "default": false
            }
          }
        ],
        "responses": {
          "500": {
            "description": "API Exception",
            "content": { "application/problem+json": { "schema": { "$ref": "#/components/schemas/ErrorResponse" } } }
          },
          "200": {
            "description": "Success",
            "headers": {
              "Cache-Control": {
                "description": "Controls whether and how long response can be cached by consumers, defaults to 'no-cache, no-store'.",
                "style": "simple",
                "schema": { "type": "string" }
              }
            },
            "content": { "application/vnd.de.db.ris+json": { "schema": { "$ref": "#/components/schemas/ConnectingTimes" } } }
          }
        }
      }
    },
    "/stop-places/{evaNumber}/platforms": {
      "get": {
        "tags": [ "Stop Places" ],
        "description": "Returns all platforms [Gleise, Bahnsteige, Plattformen] and optional their sectors [Sektoren] for requested stop place [Haltestelle].",
        "operationId": "platforms",
        "parameters": [
          {
            "name": "evaNumber",
            "in": "path",
            "description": "eva number of desired stop place [Haltestelle]",
            "required": true,
            "schema": { "type": "string" }
          },
          {
            "name": "includeSectors",
            "in": "query",
            "description": "should sector information be included",
            "required": false,
            "schema": {
              "type": "boolean",
              "default": false
            }
          }
        ],
        "responses": {
          "500": {
            "description": "API Exception",
            "content": { "application/problem+json": { "schema": { "$ref": "#/components/schemas/ErrorResponse" } } }
          },
          "200": {
            "description": "Success",
            "headers": {
              "Cache-Control": {
                "description": "Controls whether and how long response can be cached by consumers, defaults to 'no-cache, no-store'.",
                "style": "simple",
                "schema": { "type": "string" }
              }
            },
            "content": { "application/vnd.de.db.ris+json": { "schema": { "$ref": "#/components/schemas/Platforms" } } }
          }
        }
      }
    },
    "/stop-places/{evaNumber}/platforms/operational": {
      "get": {
        "tags": [ "Stop Places" ],
        "description": "Returns detailed operational information for requested platform [Gleis, Bahnsteig, Plattform]. This does not include geoinformation.",
        "operationId": "platformsOperational",
        "parameters": [
          {
            "name": "evaNumber",
            "in": "path",
            "description": "eva number of desired stop place [Haltestelle]",
            "required": true,
            "schema": { "type": "string" }
          }
        ],
        "responses": {
          "500": {
            "description": "API Exception",
            "content": { "application/problem+json": { "schema": { "$ref": "#/components/schemas/ErrorResponse" } } }
          },
          "200": {
            "description": "Success",
            "headers": {
              "Cache-Control": {
                "description": "Controls whether and how long response can be cached by consumers, defaults to 'no-cache, no-store'.",
                "style": "simple",
                "schema": { "type": "string" }
              }
            },
            "content": { "application/vnd.de.db.ris+json": { "schema": { "$ref": "#/components/schemas/OperationalPlatforms" } } }
          }
        }
      }
    },
    "/stop-places/bykey/{keyType}/{key}": {
      "get": {
        "tags": [ "Stop Places" ],
        "description": "Returns stop places that match the provided key.",
        "operationId": "byKey",
        "parameters": [
          {
            "name": "keyType",
            "in": "path",
            "description": "type of stop place keye\n- IFOPT (transmodel identifier for fixed objects, in germany dhid = Deutschlandweitee Halte ID)\n- EVA (eva number)\n- RL100 (rl100 / ds100)\n- EPA (epa uic number)\n- STADA (statitionsdatenbank number)\n- IBNR (interne bahnhofsnummer)",
            "required": true,
            "schema": { "$ref": "#/components/schemas/StopPlaceKeyType" }
          },
          {
            "name": "key",
            "in": "path",
            "description": "key to return stop places [Haltestellen] for",
            "required": true,
            "schema": { "type": "string" }
          },
          {
            "name": "locales",
            "in": "query",
            "description": "languages to include, defaults to DE only\n- DE (German)\n- EN (English)\n- FR (French)\n- IT (Italian)",
            "required": false,
            "schema": {
              "type": "array",
              "items": { "$ref": "#/components/schemas/Locale" }
            }
          }
        ],
        "responses": {
          "500": {
            "description": "API Exception",
            "content": { "application/problem+json": { "schema": { "$ref": "#/components/schemas/ErrorResponse" } } }
          },
          "200": {
            "description": "Success",
            "headers": {
              "Cache-Control": {
                "description": "Controls whether and how long response can be cached by consumers, defaults to 'no-cache, no-store'.",
                "style": "simple",
                "schema": { "type": "string" }
              }
            },
            "content": { "application/vnd.de.db.ris+json": { "schema": { "$ref": "#/components/schemas/StopPlaces" } } }
          }
        }
      }
    },
    "/misc/wheather/byposition": {
      "get": {
        "tags": [ "Misc" ],
        "description": "Returns whether information for a particular position.",
        "operationId": "weather",
        "parameters": [
          {
            "name": "longitude",
            "in": "query",
            "description": "geo position longitude",
            "required": true,
            "schema": {
              "type": "number",
              "format": "double"
            }
          },
          {
            "name": "latitude",
            "in": "query",
            "description": "geo position latitude",
            "required": true,
            "schema": {
              "type": "number",
              "format": "double"
            }
          },
          {
            "name": "time",
            "in": "query",
            "description": "time you want to know the whether for",
            "required": true,
            "schema": {
              "type": "string",
              "format": "date-time"
            }
          }
        ],
        "responses": {
          "500": {
            "description": "API Exception",
            "content": { "application/problem+json": { "schema": { "$ref": "#/components/schemas/ErrorResponse" } } }
          },
          "200": {
            "description": "Success",
            "headers": {
              "Cache-Control": {
                "description": "Controls whether and how long response can be cached by consumers, defaults to 'no-cache, no-store'.",
                "style": "simple",
                "schema": { "type": "string" }
              }
            },
            "content": { "application/vnd.de.db.ris+json": { "schema": { "$ref": "#/components/schemas/Weather" } } }
          }
        }
      }
    },
    "/boards/multimodal/departures/{evaNumbers}": {
      "get": {
        "tags": [ "Boards Multimodal" ],
        "description": "Returns a multimodal departure board [Abfahrtstafel] including public transports [Oeffentliche Verkehre], on demand transports [Rufverkehre] and indididual mobility [Individualverkehre] with optional walk duration based on reference position.",
        "operationId": "boardDepartureMultimodal",
        "parameters": [
          {
            "name": "evaNumbers",
            "in": "path",
            "description": "list of eva numbers of stations [Bahnhoefe] to get board for",
            "required": true,
            "schema": {
              "type": "array",
              "items": { "type": "string" }
            }
          },
          {
            "name": "timeStart",
            "in": "query",
            "description": "start time for board as full qualified datetime (yyyy-MM-ddTHH:mm:ssZ), if omitted current time will be used",
            "required": false,
            "schema": {
              "type": "string",
              "format": "date-time"
            }
          },
          {
            "name": "timeEnd",
            "in": "query",
            "description": "end time for board as full qualified datetime (yyyy-MM-ddTHH:mm:ssZ), if omitted current time plus 30 minutes will be used",
            "required": false,
            "schema": {
              "type": "string",
              "format": "date-time"
            }
          },
          {
            "name": "includeStationGroup",
            "in": "query",
            "description": "should all stations of group the requested eva numbers belong to (for instance a request to 'FFM Hoch' would also return 'FFM tief') be included",
            "required": false,
            "schema": {
              "type": "boolean",
              "default": true
            }
          },
          {
            "name": "filterTransports",
            "in": "query",
            "description": "filter for transport types that should be returned, if ommitted all types of transport are returned",
            "required": false,
            "schema": {
              "type": "array",
              "items": { "$ref": "#/components/schemas/TransportType" }
            }
          },
          {
            "name": "maxViaStops",
            "in": "query",
            "description": "limits amount of via stops per transport (limitation doesn't apply to additional and canceled stops), if ommitted all via stops are returned, if zero no via stops are returned",
            "required": false,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "maxTransportsPerType",
            "in": "query",
            "description": "limits amount of results per transport type, if ommitted no truncation is applied",
            "required": false,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "sortBy",
            "in": "query",
            "description": "define sorting order, if omitted sorting is by TIME\n- TIME (Sorting based on best known time information ie real before preview before schedule)\n- TIME_SCHEDULE (Sorting based on schedule time)",
            "required": false,
            "schema": { "$ref": "#/components/schemas/SortKeyTime" }
          },
          {
            "name": "positionLevel",
            "in": "query",
            "description": "reference position level for calculating walk durations from, if ommitted, no walk durations are calculated",
            "required": false,
            "schema": { "$ref": "#/components/schemas/IndoorLevel" },
            "example": "GROUND_FLOOR"
          },
          {
            "name": "positionLongitude",
            "in": "query",
            "description": "reference position longitude for calculating walk durations from, if ommitted, no walk durations are calculated",
            "required": false,
            "schema": {
              "type": "number",
              "format": "double"
            },
            "example": 8.663869
          },
          {
            "name": "positionLatitude",
            "in": "query",
            "description": "reference position latitude for calculating walk durations from, if ommitted, no walk durations are calculated",
            "required": false,
            "schema": {
              "type": "number",
              "format": "double"
            },
            "example": 50.106836
          }
        ],
        "responses": {
          "500": {
            "description": "API Exception",
            "content": { "application/problem+json": { "schema": { "$ref": "#/components/schemas/ErrorResponse" } } }
          },
          "200": {
            "description": "Success",
            "headers": {
              "Cache-Control": {
                "description": "Controls whether and how long response can be cached by consumers, defaults to 'no-cache, no-store'.",
                "style": "simple",
                "schema": { "type": "string" }
              }
            },
            "content": { "application/vnd.de.db.ris+json": { "schema": { "$ref": "#/components/schemas/BoardMultiDeparture" } } }
          }
        }
      }
    },
    "/boards/multimodal/arrivals/{evaNumbers}": {
      "get": {
        "tags": [ "Boards Multimodal" ],
        "description": "Returns a multimodal arrival board [Ankunftstafel] including public transports [Oeffentliche Verkehre], on demand transports [Rufverkehre] and indididual mobility [Individualverkehre] with optional walk duration based on reference position.",
        "operationId": "boardArrivalMultimodal",
        "parameters": [
          {
            "name": "evaNumbers",
            "in": "path",
            "description": "list of eva numbers of stations [Bahnhoefe] to get board for",
            "required": true,
            "schema": {
              "type": "array",
              "items": { "type": "string" }
            }
          },
          {
            "name": "timeStart",
            "in": "query",
            "description": "start time for board as full qualified datetime (yyyy-MM-ddTHH:mm:ssZ), if omitted current time will be used",
            "required": false,
            "schema": {
              "type": "string",
              "format": "date-time"
            }
          },
          {
            "name": "timeEnd",
            "in": "query",
            "description": "end time for board as full qualified datetime (yyyy-MM-ddTHH:mm:ssZ), if omitted current time plus 30 minutes will be used",
            "required": false,
            "schema": {
              "type": "string",
              "format": "date-time"
            }
          },
          {
            "name": "includeStationGroup",
            "in": "query",
            "description": "should all stations of group the requested eva numbers belong to (for instance a request to 'FFM Hoch' would also return 'FFM tief') be included",
            "required": false,
            "schema": {
              "type": "boolean",
              "default": true
            }
          },
          {
            "name": "filterTransports",
            "in": "query",
            "description": "filter for transport types that should be returned, if ommitted all types of transport are returned",
            "required": false,
            "schema": {
              "type": "array",
              "items": { "$ref": "#/components/schemas/TransportType" }
            }
          },
          {
            "name": "maxViaStops",
            "in": "query",
            "description": "limits amount of via stops per transport (limitation doesn't apply to additional and canceled stops), if ommitted all via stops are returned, if zero no via stops are returned",
            "required": false,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "maxTransportsPerType",
            "in": "query",
            "description": "limits amount of results per transport type, if ommitted no truncation is applied",
            "required": false,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "sortBy",
            "in": "query",
            "description": "define sorting order, if omitted sorting is by TIME\n- TIME (Sorting based on best known time information ie real before preview before schedule)\n- TIME_SCHEDULE (Sorting based on schedule time)",
            "required": false,
            "schema": { "$ref": "#/components/schemas/SortKeyTime" }
          },
          {
            "name": "positionLevel",
            "in": "query",
            "description": "reference position level for calculating walk durations from, if ommitted, no walk durations are calculated",
            "required": false,
            "schema": { "$ref": "#/components/schemas/IndoorLevel" },
            "example": "GROUND_FLOOR"
          },
          {
            "name": "positionLongitude",
            "in": "query",
            "description": "reference position longitude for calculating walk durations from, if ommitted, no walk durations are calculated",
            "required": false,
            "schema": {
              "type": "number",
              "format": "double"
            },
            "example": 8.663869
          },
          {
            "name": "positionLatitude",
            "in": "query",
            "description": "reference position latitude for calculating walk durations from, f ommitted, no walk durations are calculated",
            "required": false,
            "schema": {
              "type": "number",
              "format": "double"
            },
            "example": 50.106836
          }
        ],
        "responses": {
          "500": {
            "description": "API Exception",
            "content": { "application/problem+json": { "schema": { "$ref": "#/components/schemas/ErrorResponse" } } }
          },
          "200": {
            "description": "Success",
            "headers": {
              "Cache-Control": {
                "description": "Controls whether and how long response can be cached by consumers, defaults to 'no-cache, no-store'.",
                "style": "simple",
                "schema": { "type": "string" }
              }
            },
            "content": { "application/vnd.de.db.ris+json": { "schema": { "$ref": "#/components/schemas/BoardMultiArrival" } } }
          }
        }
      }
    },
    "/journeys/byrelation": {
      "get": {
        "tags": [ "Journeys" ],
        "description": "Finds journeys [Fahrten] by provided relation criterias [Fahrtrelation] (max of 100 matches are returned).",
        "operationId": "find",
        "parameters": [
          {
            "name": "date",
            "in": "query",
            "description": "date (yyyy-MM-dd) of scheduled start of journey [Verkehrstag], if omitted defaults to today",
            "required": false,
            "schema": {
              "type": "string",
              "format": "date"
            }
          },
          {
            "name": "number",
            "in": "query",
            "description": "number of transport [Fahrtnummer]",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "administrationID",
            "in": "query",
            "description": "administration [Verwaltung] id",
            "required": false,
            "schema": { "type": "string" }
          },
          {
            "name": "originEvaNumber",
            "in": "query",
            "description": "scheduled origin station [Geplanter Starthalt]",
            "required": false,
            "schema": { "type": "string" }
          },
          {
            "name": "destinationEvaNumber",
            "in": "query",
            "description": "scheduled destination station [Geplanter Zielhalt]",
            "required": false,
            "schema": { "type": "string" }
          },
          {
            "name": "transports",
            "in": "query",
            "description": "transport types that should be returned, if ommitted all types of transport are returned",
            "required": false,
            "schema": {
              "type": "array",
              "items": { "$ref": "#/components/schemas/TransportType" }
            }
          },
          {
            "name": "category",
            "in": "query",
            "description": "category of transport [Fahrtgattung]",
            "required": false,
            "schema": { "type": "string" }
          },
          {
            "name": "line",
            "in": "query",
            "description": "line of transport [Linie]",
            "required": false,
            "schema": { "type": "string" }
          }
        ],
        "responses": {
          "500": {
            "description": "API Exception",
            "content": { "application/problem+json": { "schema": { "$ref": "#/components/schemas/ErrorResponse" } } }
          },
          "200": {
            "description": "Success",
            "headers": {
              "Cache-Control": {
                "description": "Controls whether and how long response can be cached by consumers, defaults to 'no-cache, no-store'.",
                "style": "simple",
                "schema": { "type": "string" }
              }
            },
            "content": { "application/vnd.de.db.ris+json": { "schema": { "$ref": "#/components/schemas/JourneyMatches" } } }
          }
        }
      }
    },
    "/journeys/departures/byrelation": {
      "get": {
        "tags": [ "Journeys" ],
        "description": "Finds journey [Fahrt] departure [Abfahrt] by provided relation criterias [Fahrtrelation].",
        "operationId": "findDeparture",
        "parameters": [
          {
            "name": "date",
            "in": "query",
            "description": "date (yyyy-MM-dd) of scheduled start of journey [Verkehrstag]",
            "required": true,
            "schema": {
              "type": "string",
              "format": "date"
            }
          },
          {
            "name": "category",
            "in": "query",
            "description": "category of transport [Fahrtgattung]",
            "required": true,
            "schema": { "type": "string" }
          },
          {
            "name": "number",
            "in": "query",
            "description": "number of transport [Fahrtnummer]",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "evaNumber",
            "in": "query",
            "description": "departure station id [Haltestelle ID] for desired departure",
            "required": true,
            "schema": { "type": "string" }
          },
          {
            "name": "timeSchedule",
            "in": "query",
            "description": "scheduled departure time [Geplante Abfahrtszeit] for desired departure as full qualified datetime (yyyy-MM-ddTHH:mm:ssZ)",
            "required": true,
            "schema": {
              "type": "string",
              "format": "date-time"
            }
          }
        ],
        "responses": {
          "500": {
            "description": "API Exception",
            "content": { "application/problem+json": { "schema": { "$ref": "#/components/schemas/ErrorResponse" } } }
          },
          "200": {
            "description": "Success",
            "headers": {
              "Cache-Control": {
                "description": "Controls whether and how long response can be cached by consumers, defaults to 'no-cache, no-store'.",
                "style": "simple",
                "schema": { "type": "string" }
              }
            },
            "content": { "application/vnd.de.db.ris+json": { "schema": { "$ref": "#/components/schemas/DepartureMatches" } } }
          }
        }
      }
    },
    "/journeys/segmentbased/{journeyID}": {
      "get": {
        "tags": [ "Journeys" ],
        "description": "Returns a journey [Fahrtverlauf] with all its segments [Fahrtabschnitte], arrivals [Ankuenfte] and departures [Abfahrten] for the requested id. Segment based [Fahrtabschnittsbasiert] view.",
        "operationId": "journeySegmentbasedById",
        "parameters": [
          {
            "name": "journeyID",
            "in": "path",
            "description": "id of journey [FahrtID]",
            "required": true,
            "schema": { "type": "string" }
          },
          {
            "name": "includeCanceled",
            "in": "query",
            "description": "include canceled arrivals / departures",
            "required": false,
            "schema": {
              "type": "boolean",
              "default": true
            }
          },
          {
            "name": "includeJourneyReferences",
            "in": "query",
            "description": "include journey references like relief [Entlastung], replace [Ersatz], continuation [Durchbindung], travelswith [Vereinigung / Fluegelung]",
            "required": false,
            "schema": {
              "type": "boolean",
              "default": false
            }
          }
        ],
        "responses": {
          "500": {
            "description": "API Exception",
            "content": { "application/problem+json": { "schema": { "$ref": "#/components/schemas/ErrorResponse" } } }
          },
          "200": {
            "description": "Success",
            "headers": {
              "Cache-Control": {
                "description": "Controls whether and how long response can be cached by consumers, defaults to 'no-cache, no-store'.",
                "style": "simple",
                "schema": { "type": "string" }
              }
            },
            "content": { "application/vnd.de.db.ris+json": { "schema": { "$ref": "#/components/schemas/JourneySegmentBased" } } }
          }
        }
      }
    },
    "/journeys/eventbased/{journeyID}": {
      "get": {
        "tags": [ "Journeys" ],
        "description": "Returns a journey [Fahrtverlauf] with all its segments [Fahrtabschnitte], arrivals [Ankuenfte] and departures [Abfahrten] for the requested id. Event based [Fahrtereignisbasiert] view.",
        "operationId": "journeyEventbasedById",
        "parameters": [
          {
            "name": "journeyID",
            "in": "path",
            "description": "id of journey [FahrtID]",
            "required": true,
            "schema": { "type": "string" }
          },
          {
            "name": "includeCanceled",
            "in": "query",
            "description": "include canceled arrivals / departures",
            "required": false,
            "schema": {
              "type": "boolean",
              "default": true
            }
          },
          {
            "name": "includeJourneyReferences",
            "in": "query",
            "description": "include journey references like relief [Entlastung], replace [Ersatz], continuation [Durchbindung], travelswith [Vereinigung / Fluegelung]",
            "required": false,
            "schema": {
              "type": "boolean",
              "default": false
            }
          }
        ],
        "responses": {
          "500": {
            "description": "API Exception",
            "content": { "application/problem+json": { "schema": { "$ref": "#/components/schemas/ErrorResponse" } } }
          },
          "200": {
            "description": "Success",
            "headers": {
              "Cache-Control": {
                "description": "Controls whether and how long response can be cached by consumers, defaults to 'no-cache, no-store'.",
                "style": "simple",
                "schema": { "type": "string" }
              }
            },
            "content": { "application/vnd.de.db.ris+json": { "schema": { "$ref": "#/components/schemas/JourneyEventBased" } } }
          }
        },
        "deprecated": true
      }
    },
    "/routings/indoor2outdoor/byposition": {
      "get": {
        "tags": [ "Routings" ],
        "description": "Calculates indoor 2 outdoor routing from point within station to outdoor position.",
        "operationId": "routingIndoor2Outdoor",
        "parameters": [
          {
            "name": "fromEvaNumber",
            "in": "query",
            "description": "eva number origin",
            "required": true,
            "schema": { "type": "string" }
          },
          {
            "name": "fromLevel",
            "in": "query",
            "description": "indoor level origin (inside)",
            "required": true,
            "schema": { "$ref": "#/components/schemas/IndoorLevel" }
          },
          {
            "name": "fromLongitude",
            "in": "query",
            "description": "geo position longitude origin (inside)",
            "required": true,
            "schema": {
              "type": "number",
              "format": "double"
            }
          },
          {
            "name": "fromLatitude",
            "in": "query",
            "description": "geo position latitude origin (inside)",
            "required": true,
            "schema": {
              "type": "number",
              "format": "double"
            }
          },
          {
            "name": "toLongitude",
            "in": "query",
            "description": "geo position longitude destination (outside)",
            "required": true,
            "schema": {
              "type": "number",
              "format": "double"
            }
          },
          {
            "name": "toLatitude",
            "in": "query",
            "description": "geo position latitude destination (outside)",
            "required": true,
            "schema": {
              "type": "number",
              "format": "double"
            }
          },
          {
            "name": "persona",
            "in": "query",
            "description": "persona type for routing (slow connections, no stairs etc.)",
            "required": false,
            "schema": { "$ref": "#/components/schemas/PersonaType" }
          }
        ],
        "responses": {
          "500": {
            "description": "API Exception",
            "content": { "application/problem+json": { "schema": { "$ref": "#/components/schemas/ErrorResponse" } } }
          },
          "200": {
            "description": "Success",
            "headers": {
              "Cache-Control": {
                "description": "Controls whether and how long response can be cached by consumers, defaults to 'no-cache, no-store'.",
                "style": "simple",
                "schema": { "type": "string" }
              }
            },
            "content": { "application/vnd.de.db.ris+json": { "schema": { "$ref": "#/components/schemas/Indoor2OutdoorRouting" } } }
          }
        }
      }
    },
    "/routings/indoor/byplatform": {
      "get": {
        "tags": [ "Routings" ],
        "description": "Calculates indoor routing within station for requested platforms.",
        "operationId": "routingIndoorByPlatform",
        "parameters": [
          {
            "name": "fromEvaNumber",
            "in": "query",
            "description": "eva number origin",
            "required": true,
            "schema": { "type": "string" }
          },
          {
            "name": "fromPlatform",
            "in": "query",
            "description": "platform origin",
            "required": true,
            "schema": { "type": "string" }
          },
          {
            "name": "fromSector",
            "in": "query",
            "description": "sector origin, may be empty.",
            "required": false,
            "schema": { "type": "string" }
          },
          {
            "name": "toEvaNumber",
            "in": "query",
            "description": "eva number origin",
            "required": true,
            "schema": { "type": "string" }
          },
          {
            "name": "toPlatform",
            "in": "query",
            "description": "platform origin",
            "required": true,
            "schema": { "type": "string" }
          },
          {
            "name": "toSector",
            "in": "query",
            "description": "sector origin, may be empty",
            "required": false,
            "schema": { "type": "string" }
          },
          {
            "name": "persona",
            "in": "query",
            "description": "persona type for routing (slow connections, no stairs etc.)",
            "required": false,
            "schema": { "$ref": "#/components/schemas/PersonaType" }
          }
        ],
        "responses": {
          "500": {
            "description": "API Exception",
            "content": { "application/problem+json": { "schema": { "$ref": "#/components/schemas/ErrorResponse" } } }
          },
          "200": {
            "description": "Success",
            "headers": {
              "Cache-Control": {
                "description": "Controls whether and how long response can be cached by consumers, defaults to 'no-cache, no-store'.",
                "style": "simple",
                "schema": { "type": "string" }
              }
            },
            "content": { "application/vnd.de.db.ris+json": { "schema": { "$ref": "#/components/schemas/IndoorRouting" } } }
          }
        }
      }
    },
    "/routings/indoor/byposition": {
      "get": {
        "tags": [ "Routings" ],
        "description": "Calculates indoor routing within station for requested indoor positions.",
        "operationId": "routingIndoorByPosition",
        "parameters": [
          {
            "name": "fromEvaNumber",
            "in": "query",
            "description": "eva number origin",
            "required": true,
            "schema": { "type": "string" }
          },
          {
            "name": "fromLevel",
            "in": "query",
            "description": "indoor level origin",
            "required": true,
            "schema": { "$ref": "#/components/schemas/IndoorLevel" }
          },
          {
            "name": "fromLongitude",
            "in": "query",
            "description": "geo position longitude origin",
            "required": true,
            "schema": {
              "type": "number",
              "format": "double"
            }
          },
          {
            "name": "fromLatitude",
            "in": "query",
            "description": "geo position latitude origin",
            "required": true,
            "schema": {
              "type": "number",
              "format": "double"
            }
          },
          {
            "name": "toEvaNumber",
            "in": "query",
            "description": "eva number destination",
            "required": true,
            "schema": { "type": "string" }
          },
          {
            "name": "toLevel",
            "in": "query",
            "description": "indoor level destination",
            "required": true,
            "schema": { "$ref": "#/components/schemas/IndoorLevel" }
          },
          {
            "name": "toLongitude",
            "in": "query",
            "description": "geo position longitude destination",
            "required": true,
            "schema": {
              "type": "number",
              "format": "double"
            }
          },
          {
            "name": "toLatitude",
            "in": "query",
            "description": "geo position latitude destination",
            "required": true,
            "schema": {
              "type": "number",
              "format": "double"
            }
          },
          {
            "name": "persona",
            "in": "query",
            "description": "persona type for routing (slow connections, no stairs etc.)",
            "required": false,
            "schema": { "$ref": "#/components/schemas/PersonaType" }
          }
        ],
        "responses": {
          "500": {
            "description": "API Exception",
            "content": { "application/problem+json": { "schema": { "$ref": "#/components/schemas/ErrorResponse" } } }
          },
          "200": {
            "description": "Success",
            "headers": {
              "Cache-Control": {
                "description": "Controls whether and how long response can be cached by consumers, defaults to 'no-cache, no-store'.",
                "style": "simple",
                "schema": { "type": "string" }
              }
            },
            "content": { "application/vnd.de.db.ris+json": { "schema": { "$ref": "#/components/schemas/IndoorRouting" } } }
          }
        }
      }
    },
    "/routings/multimodal": {
      "get": {
        "tags": [ "Routings" ],
        "description": "Calculates routes with multimodal transports.",
        "operationId": "routingMultimodal",
        "parameters": [
          {
            "name": "timeStart",
            "in": "query",
            "description": "start time for routing as full qualified datetim, if omitted, current time will be used",
            "required": false,
            "schema": {
              "type": "string",
              "format": "date"
            }
          },
          {
            "name": "fromLongitude",
            "in": "query",
            "description": "geo position longitude origin",
            "required": true,
            "schema": {
              "type": "number",
              "format": "double"
            }
          },
          {
            "name": "fromLatitude",
            "in": "query",
            "description": "geo position latitude origin",
            "required": true,
            "schema": {
              "type": "number",
              "format": "double"
            }
          },
          {
            "name": "toLongitude",
            "in": "query",
            "description": "geo position longitude destination",
            "required": true,
            "schema": {
              "type": "number",
              "format": "double"
            }
          },
          {
            "name": "toLatitude",
            "in": "query",
            "description": "geo position latitude destination",
            "required": true,
            "schema": {
              "type": "number",
              "format": "double"
            }
          },
          {
            "name": "persona",
            "in": "query",
            "description": "persona type for routing (slow connections, no stairs etc.)",
            "required": false,
            "schema": { "$ref": "#/components/schemas/PersonaType" }
          }
        ],
        "responses": {
          "500": {
            "description": "API Exception",
            "content": { "application/problem+json": { "schema": { "$ref": "#/components/schemas/ErrorResponse" } } }
          },
          "200": {
            "description": "Success",
            "headers": {
              "Cache-Control": {
                "description": "Controls whether and how long response can be cached by consumers, defaults to 'no-cache, no-store'.",
                "style": "simple",
                "schema": { "type": "string" }
              }
            },
            "content": { "application/vnd.de.db.ris+json": { "schema": { "$ref": "#/components/schemas/MultimodalRouting" } } }
          }
        }
      }
    },
    "/connections/byarrival/{journeyID}/{arrivalID}": {
      "get": {
        "tags": [ "Connections" ],
        "description": "Returns connecting transports [Anschlussoptionen] for a transport arriving at a particular stop [Haltestelle] with individual connection information [Anschlussbewertung].",
        "operationId": "connectionsArrival",
        "parameters": [
          {
            "name": "journeyID",
            "in": "path",
            "description": "id of journey [FahrtID]",
            "required": true,
            "schema": { "type": "string" }
          },
          {
            "name": "arrivalID",
            "in": "path",
            "description": "id of arrival [AnkunftID]",
            "required": true,
            "schema": { "type": "string" }
          },
          {
            "name": "timeSlot",
            "in": "query",
            "description": "time slot in minutes starting at arrivaltime of the requested arrivalID, in which the connections depart from the station (group) of the arrival, if omitted defaults to 30 minutes",
            "required": false,
            "schema": {
              "type": "integer",
              "format": "int32",
              "default": 30
            }
          },
          {
            "name": "includeStationGroup",
            "in": "query",
            "description": "should all stations of group the requested eva numbers belong to (for instance a request to 'FFM Hoch' would also return 'FFM tief') be included",
            "required": false,
            "schema": {
              "type": "boolean",
              "default": true
            }
          },
          {
            "name": "onlyPossibleConnections",
            "in": "query",
            "description": "indicates whether only possible connections should be returned, if false also impossible connections (connect time too short) are returned",
            "required": false,
            "schema": {
              "type": "boolean",
              "default": true
            }
          },
          {
            "name": "filterTransports",
            "in": "query",
            "description": "filter for transport types that should be returned, if ommitted all types of transport are returned",
            "required": false,
            "schema": {
              "type": "array",
              "items": { "$ref": "#/components/schemas/TransportType" }
            }
          },
          {
            "name": "maxViaStops",
            "in": "query",
            "description": "limits amount of via stops per transport (limitation doesn't apply to additional and canceled stops), if ommitted all via stops are returned, if zero no via stops are returned",
            "required": false,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "maxTransports",
            "in": "query",
            "description": "limits amount of results, if ommitted no truncation is applied",
            "required": false,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "sortBy",
            "in": "query",
            "description": "define sorting order, if omitted sorting is by TIME\n- TIME (Sorting based on best known time information ie real before preview before schedule)\n- TIME_SCHEDULE (Sorting based on schedule time)",
            "required": false,
            "schema": { "$ref": "#/components/schemas/SortKeyTime" }
          }
        ],
        "responses": {
          "500": {
            "description": "API Exception",
            "content": { "application/problem+json": { "schema": { "$ref": "#/components/schemas/ErrorResponse" } } }
          },
          "200": {
            "description": "Success",
            "headers": {
              "Cache-Control": {
                "description": "Controls whether and how long response can be cached by consumers, defaults to 'no-cache, no-store'.",
                "style": "simple",
                "schema": { "type": "string" }
              }
            },
            "content": { "application/vnd.de.db.ris+json": { "schema": { "$ref": "#/components/schemas/ConnectionArrival" } } }
          }
        }
      }
    },
    "/connections/byjourneys({journeyID}/{arrivalID}/{journeyIDConnecting}/{departureIDConnecting}": {
      "get": {
        "tags": [ "Connections" ],
        "description": "Returns a connection information [Anschlussbewertung] for the connected journeys at a particular stop, given by arrival [Ankunft] and departure [Abfahrt] of the journeys [Fahrten].",
        "operationId": "connectionsJourneys",
        "parameters": [
          {
            "name": "journeyID",
            "in": "path",
            "description": "id of journey [FahrtID]",
            "required": true,
            "schema": { "type": "string" }
          },
          {
            "name": "arrivalID",
            "in": "path",
            "description": "id of arrival of journey [AnkunftID]",
            "required": true,
            "schema": { "type": "string" }
          },
          {
            "name": "journeyIDConnecting",
            "in": "path",
            "description": "id of connecting journey [FahrtID der anschliessenden Fahrt]",
            "required": true,
            "schema": { "type": "string" }
          },
          {
            "name": "departureIDConnecting",
            "in": "path",
            "description": "id of departure stop of the connecting journey [AnkunftID der anschliessenden Fahrt]",
            "required": true,
            "schema": { "type": "string" }
          }
        ],
        "responses": {
          "500": {
            "description": "API Exception",
            "content": { "application/problem+json": { "schema": { "$ref": "#/components/schemas/ErrorResponse" } } }
          },
          "200": {
            "description": "Success",
            "headers": {
              "Cache-Control": {
                "description": "Controls whether and how long response can be cached by consumers, defaults to 'no-cache, no-store'.",
                "style": "simple",
                "schema": { "type": "string" }
              }
            },
            "content": { "application/vnd.de.db.ris+json": { "schema": { "$ref": "#/components/schemas/ConnectionJourneys" } } }
          }
        },
        "deprecated": true
      }
    },
    "/mobilities/ondemand/bygeoposition": {
      "get": {
        "tags": [ "Mobilities" ],
        "description": "Returns all known and available on demand mobilitiess around a specific geo position.",
        "operationId": "mobilitiesOnDemandByPosition",
        "parameters": [
          {
            "name": "longitude",
            "in": "query",
            "description": "geo position longitude",
            "required": true,
            "schema": {
              "type": "number",
              "format": "double"
            }
          },
          {
            "name": "latitude",
            "in": "query",
            "description": "geo position latitude",
            "required": true,
            "schema": {
              "type": "number",
              "format": "double"
            }
          },
          {
            "name": "radius",
            "in": "query",
            "description": "radius in meters for returning mobilities around geo position",
            "required": false,
            "schema": {
              "type": "integer",
              "format": "int32",
              "default": 200
            }
          }
        ],
        "responses": {
          "500": {
            "description": "API Exception",
            "content": { "application/problem+json": { "schema": { "$ref": "#/components/schemas/ErrorResponse" } } }
          },
          "200": {
            "description": "Success",
            "headers": {
              "Cache-Control": {
                "description": "Controls whether and how long response can be cached by consumers, defaults to 'no-cache, no-store'.",
                "style": "simple",
                "schema": { "type": "string" }
              }
            },
            "content": { "application/vnd.de.db.ris+json": { "schema": { "$ref": "#/components/schemas/MobilitiesOnDemand" } } }
          }
        }
      }
    },
    "/mobilities/individual/bygeoposition": {
      "get": {
        "tags": [ "Mobilities" ],
        "description": "Returns all known and available individual mobilitiess around a specific geo position.",
        "operationId": "mobilitiesIndividualByPosition",
        "parameters": [
          {
            "name": "longitude",
            "in": "query",
            "description": "geo position longitude",
            "required": true,
            "schema": {
              "type": "number",
              "format": "double"
            }
          },
          {
            "name": "latitude",
            "in": "query",
            "description": "geo position latitude",
            "required": true,
            "schema": {
              "type": "number",
              "format": "double"
            }
          },
          {
            "name": "radius",
            "in": "query",
            "description": "radius in meters for returning mobilities around geo position",
            "required": false,
            "schema": {
              "type": "integer",
              "format": "int32",
              "default": 200
            }
          }
        ],
        "responses": {
          "500": {
            "description": "API Exception",
            "content": { "application/problem+json": { "schema": { "$ref": "#/components/schemas/ErrorResponse" } } }
          },
          "200": {
            "description": "Success",
            "headers": {
              "Cache-Control": {
                "description": "Controls whether and how long response can be cached by consumers, defaults to 'no-cache, no-store'.",
                "style": "simple",
                "schema": { "type": "string" }
              }
            },
            "content": { "application/vnd.de.db.ris+json": { "schema": { "$ref": "#/components/schemas/MobilitiesIndividual" } } }
          }
        }
      }
    },
    "/mobilities/individual/bystation": {
      "get": {
        "tags": [ "Mobilities" ],
        "description": "Returns all known and available individual mobilities nearby station.",
        "operationId": "mobilitiesIndividualByStation",
        "parameters": [
          {
            "name": "evaNumber",
            "in": "query",
            "description": "eva number of station",
            "required": true,
            "schema": { "type": "string" }
          },
          {
            "name": "radius",
            "in": "query",
            "description": "radius in meters for returning mobilities around geo position",
            "required": false,
            "schema": {
              "type": "integer",
              "format": "int32",
              "default": 200
            }
          }
        ],
        "responses": {
          "500": {
            "description": "API Exception",
            "content": { "application/problem+json": { "schema": { "$ref": "#/components/schemas/ErrorResponse" } } }
          },
          "200": {
            "description": "Success",
            "headers": {
              "Cache-Control": {
                "description": "Controls whether and how long response can be cached by consumers, defaults to 'no-cache, no-store'.",
                "style": "simple",
                "schema": { "type": "string" }
              }
            },
            "content": { "application/vnd.de.db.ris+json": { "schema": { "$ref": "#/components/schemas/MobilitiesIndividual" } } }
          }
        }
      }
    },
    "/mobilities/ondemand/bystation": {
      "get": {
        "tags": [ "Mobilities" ],
        "description": "Returns all known and available on demand mobilities nearby station.",
        "operationId": "mobilitiesOnDemandByStation",
        "parameters": [
          {
            "name": "evaNumber",
            "in": "query",
            "description": "eva number of station",
            "required": true,
            "schema": { "type": "string" }
          },
          {
            "name": "radius",
            "in": "query",
            "description": "radius in meters for returning mobilities around geo position",
            "required": false,
            "schema": {
              "type": "integer",
              "format": "int32",
              "default": 200
            }
          }
        ],
        "responses": {
          "500": {
            "description": "API Exception",
            "content": { "application/problem+json": { "schema": { "$ref": "#/components/schemas/ErrorResponse" } } }
          },
          "200": {
            "description": "Success",
            "headers": {
              "Cache-Control": {
                "description": "Controls whether and how long response can be cached by consumers, defaults to 'no-cache, no-store'.",
                "style": "simple",
                "schema": { "type": "string" }
              }
            },
            "content": { "application/vnd.de.db.ris+json": { "schema": { "$ref": "#/components/schemas/MobilitiesOnDemand" } } }
          }
        }
      }
    },
    "/transports/geopositions/{journeyID}": {
      "get": {
        "tags": [ "Transports" ],
        "description": "Returns a transports geo position.",
        "operationId": "position",
        "parameters": [
          {
            "name": "journeyID",
            "in": "path",
            "description": "id of journey [FahrtID]",
            "required": true,
            "schema": { "type": "string" }
          }
        ],
        "responses": {
          "500": {
            "description": "API Exception",
            "content": { "application/problem+json": { "schema": { "$ref": "#/components/schemas/ErrorResponse" } } }
          },
          "200": {
            "description": "Success",
            "headers": {
              "Cache-Control": {
                "description": "Controls whether and how long response can be cached by consumers, defaults to 'no-cache, no-store'.",
                "style": "simple",
                "schema": { "type": "string" }
              }
            },
            "content": { "application/vnd.de.db.ris+json": { "schema": { "$ref": "#/components/schemas/TransportPosition" } } }
          }
        }
      }
    },
    "/transports/bywifiaccesspoint/{macAddress}": {
      "get": {
        "tags": [ "Transports" ],
        "description": "Returns all journeys [Fahrten] that contain a vehicle [Fahrzeug] where the requested wifi accesspoint id [MAC Adresse] is located in. May contain outdated and / or future journeys.",
        "operationId": "matchingWifi",
        "parameters": [
          {
            "name": "macAddress",
            "in": "path",
            "description": "id of wifi access point [MAC Adresse]",
            "required": true,
            "schema": { "type": "string" }
          }
        ],
        "responses": {
          "500": {
            "description": "API Exception",
            "content": { "application/problem+json": { "schema": { "$ref": "#/components/schemas/ErrorResponse" } } }
          },
          "200": {
            "description": "Success",
            "headers": {
              "Cache-Control": {
                "description": "Controls whether and how long response can be cached by consumers, defaults to 'no-cache, no-store'.",
                "style": "simple",
                "schema": { "type": "string" }
              }
            },
            "content": { "application/vnd.de.db.ris+json": { "schema": { "$ref": "#/components/schemas/TransportMatchWifis" } } }
          }
        },
        "deprecated": true
      }
    },
    "/transports/byvehicleid/{vehicleID}": {
      "get": {
        "tags": [ "Transports" ],
        "description": "Returns all journeys [Fahrten] that contain a vehicle [Fahrzeug] with a matching vehicle id. May contain outdated and / or future journeys.",
        "operationId": "matchingVehicleID",
        "parameters": [
          {
            "name": "vehicleID",
            "in": "path",
            "description": "id for vehicle (for rail vehicles usually the UIC identification nunmber)",
            "required": true,
            "schema": { "type": "string" }
          }
        ],
        "responses": {
          "500": {
            "description": "API Exception",
            "content": { "application/problem+json": { "schema": { "$ref": "#/components/schemas/ErrorResponse" } } }
          },
          "200": {
            "description": "Success",
            "headers": {
              "Cache-Control": {
                "description": "Controls whether and how long response can be cached by consumers, defaults to 'no-cache, no-store'.",
                "style": "simple",
                "schema": { "type": "string" }
              }
            },
            "content": { "application/vnd.de.db.ris+json": { "schema": { "$ref": "#/components/schemas/TransportMatchVehicleIDs" } } }
          }
        }
      }
    },
    "/transports/bygeoposition/{longitude}/{latitude}": {
      "get": {
        "tags": [ "Transports" ],
        "description": "Returns all journeys [Fahrten] matching the requested geo coordinates.",
        "operationId": "matchingPosition",
        "parameters": [
          {
            "name": "longitude",
            "in": "path",
            "description": "geo reference position longitude",
            "required": true,
            "schema": {
              "type": "number",
              "format": "double"
            }
          },
          {
            "name": "latitude",
            "in": "path",
            "description": "geo reference position latitude",
            "required": true,
            "schema": {
              "type": "number",
              "format": "double"
            }
          }
        ],
        "responses": {
          "500": {
            "description": "API Exception",
            "content": { "application/problem+json": { "schema": { "$ref": "#/components/schemas/ErrorResponse" } } }
          },
          "200": {
            "description": "Success",
            "headers": {
              "Cache-Control": {
                "description": "Controls whether and how long response can be cached by consumers, defaults to 'no-cache, no-store'.",
                "style": "simple",
                "schema": { "type": "string" }
              }
            },
            "content": { "application/vnd.de.db.ris+json": { "schema": { "$ref": "#/components/schemas/TransportMatchGeoPositions" } } }
          }
        },
        "deprecated": true
      }
    },
    "/transports/vehiclesequences/administrations": {
      "get": {
        "tags": [ "Transports" ],
        "description": "Returns all administrations [Verwaltungen] that provide vehicle sequences [Wagenreihungen].",
        "operationId": "vehicleSequenceAdministrations",
        "responses": {
          "500": {
            "description": "API Exception",
            "content": { "application/problem+json": { "schema": { "$ref": "#/components/schemas/ErrorResponse" } } }
          },
          "200": {
            "description": "Success",
            "headers": {
              "Cache-Control": {
                "description": "Controls whether and how long response can be cached by consumers, defaults to 'no-cache, no-store'.",
                "style": "simple",
                "schema": { "type": "string" }
              }
            },
            "content": { "application/vnd.de.db.ris+json": { "schema": { "$ref": "#/components/schemas/VehicleSequenceAvailableAdministrations" } } }
          }
        }
      }
    },
    "/transports/vehiclesequences/bydeparture/{journeyID}/{departureID}": {
      "get": {
        "tags": [ "Transports" ],
        "description": "Returns a transports vehicle sequence [Wagenreihung] with optional position at platform [Positionierung am Gleis], amenities [Ausstattungsmerkmalen] and occupancy [Auslastung] for a particular departure.",
        "operationId": "vehicleSequenceDeparture",
        "parameters": [
          {
            "name": "journeyID",
            "in": "path",
            "description": "id of journey [FahrtID]",
            "required": true,
            "schema": { "type": "string" }
          },
          {
            "name": "departureID",
            "in": "path",
            "description": "id of departure [AbfahrtID]",
            "required": true,
            "schema": { "type": "string" }
          },
          {
            "name": "includePosition",
            "in": "query",
            "description": "include position at platform [Gleis, Bahnsteig, Plattform], if omitted or false no platform and no position information per vehicle will be returned",
            "required": false,
            "schema": {
              "type": "boolean",
              "default": true
            }
          },
          {
            "name": "includeAmenities",
            "in": "query",
            "description": "include amenities [Ausstatungsmerkmale] like WC, WLAN, boarding aids etc. on a vehicle base, if omitted or false no amenities will be returned",
            "required": false,
            "schema": {
              "type": "boolean",
              "default": false
            }
          },
          {
            "name": "includeOccupancy",
            "in": "query",
            "description": "include (detailed) occupancy [Auslastung] for vehicles at departure, if omitted or NONE no occupancy will be returned\n- NONE (return no occupancy)\n- OVERALL (return only overall occupancy on a first / economy class level)\n- DETAIL (return detailed occupancy information like free bike mounts , free seats, stance etc.)",
            "required": false,
            "schema": { "$ref": "#/components/schemas/OccupancyDetail" }
          }
        ],
        "responses": {
          "500": {
            "description": "API Exception",
            "content": { "application/problem+json": { "schema": { "$ref": "#/components/schemas/ErrorResponse" } } }
          },
          "200": {
            "description": "Success",
            "headers": {
              "Cache-Control": {
                "description": "Controls whether and how long response can be cached by consumers, defaults to 'no-cache, no-store'.",
                "style": "simple",
                "schema": { "type": "string" }
              }
            },
            "content": { "application/vnd.de.db.ris+json": { "schema": { "$ref": "#/components/schemas/VehicleSequenceDeparture" } } }
          }
        }
      }
    },
    "/transports/vehiclesequences/bydeparture": {
      "get": {
        "tags": [ "Transports" ],
        "description": "Returns a transports vehicle sequence [Wagenreihung] with optional position at platform [Positionierung am Gleis], amenities [Ausstattungsmerkmale] and occupancy [Auslastung] for a particular departure. This is the unmatched entrypoint in case the caller is not aware of the particular journeyID and departureID.",
        "operationId": "vehicleSequenceDepartureUnmatched",
        "parameters": [
          {
            "name": "date",
            "in": "query",
            "description": "date (yyyy-mm-dd) of scheduled start of journey [Verkehrstag]",
            "required": true,
            "schema": {
              "type": "string",
              "format": "date"
            }
          },
          {
            "name": "category",
            "in": "query",
            "description": "category of transport [Fahrtgattung]",
            "required": true,
            "schema": { "type": "string" }
          },
          {
            "name": "number",
            "in": "query",
            "description": "number of transport [Fahrtnummer]",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "evaNumber",
            "in": "query",
            "description": "departure station id [Abfahrt] for desired departure",
            "required": true,
            "schema": { "type": "string" }
          },
          {
            "name": "time",
            "in": "query",
            "description": "scheduled departure time [Geplante Abfahrtszeit] for desired departure as full qualified datetime (yyyy-MM-ddTHH:mm:ssZ)",
            "required": true,
            "schema": {
              "type": "string",
              "format": "date-time"
            }
          },
          {
            "name": "includePosition",
            "in": "query",
            "description": "include position at platform [Gleis, Bahnsteig, Plattform], if omitted or false no platform and no position information per vehicle will be returned",
            "required": false,
            "schema": {
              "type": "boolean",
              "default": true
            }
          },
          {
            "name": "includeAmenities",
            "in": "query",
            "description": "include amenities [Ausstatungsmerkmale] like WC, WLAN, boarding aids etc. on a vehicle base, if omitted or false no amenities will be returned",
            "required": false,
            "schema": {
              "type": "boolean",
              "default": false
            }
          },
          {
            "name": "includeOccupancy",
            "in": "query",
            "description": "include (detailed) occupancy [Auslastung] for vehicles at departure, if omitted or NONE no occupancy will be returned\n- NONE (return no occupancy)\n- OVERALL (return only overall occupancy on a first / economy class level)\n- DETAIL (return detailed occupancy information like free bike mounts , free seats, stance etc.)",
            "required": false,
            "schema": { "$ref": "#/components/schemas/OccupancyDetail" }
          }
        ],
        "responses": {
          "500": {
            "description": "API Exception",
            "content": { "application/problem+json": { "schema": { "$ref": "#/components/schemas/ErrorResponse" } } }
          },
          "200": {
            "description": "Success",
            "headers": {
              "Cache-Control": {
                "description": "Controls whether and how long response can be cached by consumers, defaults to 'no-cache, no-store'.",
                "style": "simple",
                "schema": { "type": "string" }
              }
            },
            "content": { "application/vnd.de.db.ris+json": { "schema": { "$ref": "#/components/schemas/VehicleSequenceDeparture" } } }
          }
        }
      }
    },
    "/locations/byname": {
      "get": {
        "tags": [ "Locations" ],
        "description": "Returns matching locations by wildcard auto complete.",
        "operationId": "locationsAutoComplete",
        "parameters": [
          {
            "name": "query",
            "in": "query",
            "description": "query string to search addresses and stations for",
            "required": true,
            "schema": { "type": "string" }
          },
          {
            "name": "maxResults",
            "in": "query",
            "description": "max results to return, leave empty in case no truncation is necessary; applies to addresses and stations individually.",
            "required": false,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "500": {
            "description": "API Exception",
            "content": { "application/problem+json": { "schema": { "$ref": "#/components/schemas/ErrorResponse" } } }
          },
          "200": {
            "description": "Success",
            "headers": {
              "Cache-Control": {
                "description": "Controls whether and how long response can be cached by consumers, defaults to 'no-cache, no-store'.",
                "style": "simple",
                "schema": { "type": "string" }
              }
            },
            "content": { "application/vnd.de.db.ris+json": { "schema": { "$ref": "#/components/schemas/Locations" } } }
          }
        }
      }
    },
    "/locations/byaddress": {
      "get": {
        "tags": [ "Locations" ],
        "description": "Returns matching locations by address.",
        "operationId": "locationsByAddress",
        "parameters": [
          {
            "name": "street",
            "in": "query",
            "description": "street name of address the position should be retrived for",
            "required": true,
            "schema": { "type": "string" }
          },
          {
            "name": "houseNumber",
            "in": "query",
            "description": "housenumber of address the position should be retrived for",
            "required": true,
            "schema": { "type": "string" }
          },
          {
            "name": "postalCode",
            "in": "query",
            "description": "postalcode of address the position should be retrived for",
            "required": true,
            "schema": { "type": "string" }
          },
          {
            "name": "city",
            "in": "query",
            "description": "city of address the position should be retrived for",
            "required": true,
            "schema": { "type": "string" }
          },
          {
            "name": "country",
            "in": "query",
            "description": "country of address the position should be retrived for",
            "required": true,
            "schema": { "type": "string" }
          },
          {
            "name": "maxResults",
            "in": "query",
            "description": "max results to return, leave empty in case no truncation is necessary; applies to addresses and stations individually",
            "required": false,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "500": {
            "description": "API Exception",
            "content": { "application/problem+json": { "schema": { "$ref": "#/components/schemas/ErrorResponse" } } }
          },
          "200": {
            "description": "Success",
            "headers": {
              "Cache-Control": {
                "description": "Controls whether and how long response can be cached by consumers, defaults to 'no-cache, no-store'.",
                "style": "simple",
                "schema": { "type": "string" }
              }
            },
            "content": { "application/vnd.de.db.ris+json": { "schema": { "$ref": "#/components/schemas/Locations" } } }
          }
        }
      }
    },
    "/locations/bygeoposition": {
      "get": {
        "tags": [ "Locations" ],
        "description": "Returns matching locations by geo position.",
        "operationId": "locationsByPosition",
        "parameters": [
          {
            "name": "longitude",
            "in": "query",
            "description": "heo position longitude",
            "required": true,
            "schema": {
              "type": "number",
              "format": "double"
            }
          },
          {
            "name": "latitude",
            "in": "query",
            "description": "heo position latitude",
            "required": true,
            "schema": {
              "type": "number",
              "format": "double"
            }
          },
          {
            "name": "radius",
            "in": "query",
            "description": "radius in meters for returning addresses around geo position",
            "required": false,
            "schema": {
              "type": "integer",
              "format": "int32",
              "default": 200
            }
          },
          {
            "name": "maxResults",
            "in": "query",
            "description": "max results to return, leave empty in case no truncation is necessary; applies to addresses and stations individually",
            "required": false,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "500": {
            "description": "API Exception",
            "content": { "application/problem+json": { "schema": { "$ref": "#/components/schemas/ErrorResponse" } } }
          },
          "200": {
            "description": "Success",
            "headers": {
              "Cache-Control": {
                "description": "Controls whether and how long response can be cached by consumers, defaults to 'no-cache, no-store'.",
                "style": "simple",
                "schema": { "type": "string" }
              }
            },
            "content": { "application/vnd.de.db.ris+json": { "schema": { "$ref": "#/components/schemas/Locations" } } }
          }
        }
      }
    }
  },
  "components": {
    "schemas": {
      "ErrorDetail": {
        "required": [ "detail", "field", "title" ],
        "type": "object",
        "properties": {
          "errorCode": {
            "type": "integer",
            "description": "Unique code that identifies error.",
            "format": "int32"
          },
          "title": {
            "type": "string",
            "description": "Common description of error."
          },
          "field": {
            "type": "string",
            "description": "Name of field / element that raised the error."
          },
          "detail": {
            "type": "string",
            "description": "Detailed information for error."
          }
        },
        "description": "Detailed error information on field level."
      },
      "ErrorResponse": {
        "required": [ "detail", "title" ],
        "type": "object",
        "properties": {
          "errorCode": {
            "type": "integer",
            "description": "Unique code that identifies error.",
            "format": "int32"
          },
          "title": {
            "type": "string",
            "description": "Common description of error."
          },
          "detail": {
            "type": "string",
            "description": "Detailed information for error."
          },
          "status": {
            "type": "integer",
            "description": "Http status for error origin.",
            "format": "int32"
          },
          "instanceId": {
            "type": "string",
            "description": "Unique identifier for instance that raised the error."
          },
          "errors": {
            "type": "array",
            "description": "List of detailed errors in case multiple errors have lead to the surrounding error.",
            "items": { "$ref": "#/components/schemas/ErrorDetail" }
          }
        },
        "description": "API error object conforming to RFC7807."
      },
      "BaseEvent": {
        "type": "object",
        "properties": {
          "metaCreatedBy": {
            "type": "string",
            "description": "Information on origin of event."
          },
          "metaTimestamp": {
            "type": "string",
            "description": "Date the event has been fired.",
            "format": "date-time"
          },
          "metaName": {
            "type": "string",
            "description": "Name of event."
          }
        },
        "description": "Base class that all events have to extend."
      },
      "EventFetchResponse": {
        "type": "object",
        "properties": {
          "events": {
            "type": "array",
            "description": "List of fired events since last fetch.",
            "items": { "$ref": "#/components/schemas/BaseEvent" }
          }
        },
        "description": "Response containing all collected events for client."
      },
      "EventJourneySubscribeResponse": {
        "type": "object",
        "description": "Response for journey subscription"
      },
      "EventJourneyUnsubscribeResponse": {
        "type": "object",
        "description": "Respose for journey unsubscribe."
      },
      "EventTrainPositionSubscribeResponse": {
        "type": "object",
        "description": "Response for train position event subscribe."
      },
      "EventTrainPositionUnsubscribeResponse": {
        "type": "object",
        "description": "Response for train position event unsubscribe."
      },
      "TransportType": {
        "type": "string",
        "description": "Type of transport.\n- HIGH_SPEED_TRAIN (High speed train [Hochgeschwindigkeitszug] like ICE or TGV etc.)\n- INTERCITY_TRAIN (Inter city train [Intercityzug])\n- INTER_REGIONAL_TRAIN (Inter regional train [Interregiozug])\n- REGIONAL_TRAIN (Regional train [Regionalzug])\n- CITY_TRAIN (City train [S-Bahn])\n- SUBWAY (Subway [U-Bahn])\n- TRAM (Tram [Strassenbahn])\n- BUS (Bus [Bus])\n- FERRY (Ferry [Faehre])\n- FLIGHT (Flight [Flugzeug])\n- CAR (Car [Auto])\n- TAXI (Taxi)\n- SHUTTLE (Shuttle [Ruftaxi])\n- BIKE ((E-)Bike [Fahrrad])\n- SCOOTER ((E-)Scooter [Roller])\n- WALK (Walk ([Laufen])\n- UNKNOWN (Unknown)",
        "enum": [ "HIGH_SPEED_TRAIN", "INTERCITY_TRAIN", "INTER_REGIONAL_TRAIN", "REGIONAL_TRAIN", "CITY_TRAIN", "SUBWAY", "TRAM", "BUS", "FERRY", "FLIGHT", "CAR", "TAXI", "SHUTTLE", "BIKE", "SCOOTER", "WALK", "UNKNOWN" ]
      },
      "SortKeyTime": {
        "type": "string",
        "description": "Sort keys for time based sorting.\n- TIME (Sorting based on best known time information ie real before preview before schedule)\n- TIME_SCHEDULE (Sorting based on schedule time)",
        "enum": [ "TIME", "TIME_SCHEDULE" ]
      },
      "Administration": {
        "required": [ "administrationID", "operatorCode", "operatorName" ],
        "type": "object",
        "properties": {
          "administrationID": {
            "type": "string",
            "description": "Unique id of the administration [Verwaltung]."
          },
          "operatorCode": {
            "type": "string",
            "description": "Unique code of the operator [Betreiber]."
          },
          "operatorName": {
            "type": "string",
            "description": "Name of the operator [Betreiber]."
          }
        },
        "description": "Information on the operator [Betreiber] and the administration [Verwaltung] of the journey."
      },
      "BoardPublicArrival": {
        "required": [ "arrivals" ],
        "type": "object",
        "properties": {
          "arrivals": {
            "type": "array",
            "description": "List of available arrivals [Ankuenfte].",
            "items": { "$ref": "#/components/schemas/StopArrival" }
          }
        },
        "description": "Arrival board [Ankunftstafel] for public transports [Oeffentliche Verkehre] ie trains, buses, trams, subways etc."
      },
      "Message": {
        "required": [ "text", "type" ],
        "type": "object",
        "properties": {
          "code": {
            "type": "string",
            "description": "Unique code of message may be empty for type = 'CUSTOMER_TEXT'."
          },
          "type": { "$ref": "#/components/schemas/MessageType" },
          "text": {
            "type": "string",
            "description": "Freetext of message."
          }
        },
        "description": "Message for customers and or employees, depends on type."
      },
      "MessageType": {
        "type": "string",
        "description": "Classification of message.\n- CUSTOMER_TEXT (?)\n- QUALITY_VARIATION (?)\n- CUSTOMER_REASON (?)",
        "enum": [ "CUSTOMER_TEXT", "QUALITY_VARIATION", "CUSTOMER_REASON" ]
      },
      "StationShort": {
        "required": [ "evaNumber", "name" ],
        "type": "object",
        "properties": {
          "evaNumber": {
            "type": "string",
            "description": "Eva number of station."
          },
          "name": {
            "type": "string",
            "description": "Name for station in fixed language."
          }
        },
        "description": "Comprehensive station [Bahnhof] information."
      },
      "StopArrival": {
        "required": [ "additional", "administration", "arrivalID", "canceled", "journeyID", "platform", "station", "time", "timeType", "transport" ],
        "type": "object",
        "properties": {
          "station": { "$ref": "#/components/schemas/StationShort" },
          "journeyID": {
            "type": "string",
            "description": "ID of journey [FahrtID]."
          },
          "timeSchedule": {
            "type": "string",
            "description": "Scheduled time [Abfahrtszeit Soll] of stop as fully qualified date (for instance '2019-08-19T12:56:14+02:00' or '2019-08-19T10:56:14Z').",
            "format": "date-time"
          },
          "timeType": { "$ref": "#/components/schemas/TimeType" },
          "time": {
            "type": "string",
            "description": "Best known time information of stop as fully qualified date (for instance '2019-08-19T12:56:14+02:00' or '2019-08-19T10:56:14Z').",
            "format": "date-time"
          },
          "platformSchedule": {
            "type": "string",
            "description": "Scheduled platform [Gleis, Bahnsteig, Plattform] the transport departs at."
          },
          "platform": {
            "type": "string",
            "description": "Actual platform [Gleis, Bahnsteig, Plattform] the transport departs at."
          },
          "administration": { "$ref": "#/components/schemas/Administration" },
          "messages": {
            "type": "array",
            "description": "List of available messages to display for this departure.",
            "items": { "$ref": "#/components/schemas/Message" }
          },
          "arrivalID": {
            "type": "string",
            "description": "ID of arrival [AnkunftID]."
          },
          "transport": { "$ref": "#/components/schemas/TransportPublicOriginVia" },
          "canceled": {
            "type": "boolean",
            "description": "Indicates whether the arrival has been canceled [Haltausfall]."
          },
          "additional": {
            "type": "boolean",
            "description": "Indicates whether this arrival is additional [Zusatzhalt], meaning not be part of the regular schedule."
          },
          "reliefFor": {
            "type": "array",
            "description": "List of transports this journey reliefs for [Entlastungszug].",
            "items": { "$ref": "#/components/schemas/TransportPublicReferenceOrigin" }
          },
          "reliefBy": {
            "type": "array",
            "description": "List of transports this journey is reliefed by [Entlastungszug].",
            "items": { "$ref": "#/components/schemas/TransportPublicReferenceOrigin" }
          },
          "replacementFor": {
            "type": "array",
            "description": "List of transports this journey replaces [Ersatzzug].",
            "items": { "$ref": "#/components/schemas/TransportPublicReferenceOrigin" }
          },
          "replacedBy": {
            "type": "array",
            "description": "List of transports this journey is replaced by [Ersatzzug].",
            "items": { "$ref": "#/components/schemas/TransportPublicReferenceOrigin" }
          },
          "continuationFor": { "$ref": "#/components/schemas/TransportPublicReferenceOrigin" },
          "travelsWith": {
            "type": "array",
            "description": "List of journeys this journey travels with [Vereinigt Mit].",
            "items": { "$ref": "#/components/schemas/TransportPublicReferenceOrigin" }
          }
        },
        "description": "Arrival [Ankunft] information within arrival boards."
      },
      "StopAtStation": {
        "required": [ "canceled", "evaNumber", "name" ],
        "type": "object",
        "properties": {
          "evaNumber": {
            "type": "string",
            "description": "Eva number of station."
          },
          "name": {
            "type": "string",
            "description": "Name for station in fixed language."
          },
          "canceled": {
            "type": "boolean",
            "description": "Indicates whether the stop ie departure / arrival has been canceled [Haltausfall]."
          }
        },
        "description": "Stop at a particular station [Bahnhof] for arrival / departure boards."
      },
      "StopAtStationPrio": {
        "required": [ "additional", "canceled", "displayPriority", "evaNumber", "name" ],
        "type": "object",
        "properties": {
          "evaNumber": {
            "type": "string",
            "description": "Eva number of station."
          },
          "name": {
            "type": "string",
            "description": "Name for station in fixed language."
          },
          "canceled": {
            "type": "boolean",
            "description": "Indicates whether the stop ie departure / arrival has been canceled [Haltausfall]."
          },
          "additional": {
            "type": "boolean",
            "description": "Indicates whether this departure is additional [Zusatzhalt], meaning not be part of the regular schedule."
          },
          "displayPriority": {
            "type": "integer",
            "description": "Display priority for station within via list.",
            "format": "int32"
          }
        },
        "description": "Stop at a particular station [Bahnhof] for arrival / departure boards with display priority [Anzeigeprioritaet]."
      },
      "TimeType": {
        "type": "string",
        "description": "Specifies whether 'time' is based on schedule or preview.\n- SCHEDULE (Time source is schedule)\n- PREVIEW (Time source is preview / forecast)\n- REAL (Time source is real)",
        "enum": [ "SCHEDULE", "PREVIEW", "REAL" ]
      },
      "TransportPublicOriginVia": {
        "required": [ "category", "number", "origin", "type", "via" ],
        "type": "object",
        "properties": {
          "type": { "$ref": "#/components/schemas/TransportType" },
          "category": {
            "type": "string",
            "description": "Code of the transport [Fahrtgattung]."
          },
          "number": {
            "type": "integer",
            "description": "Number of the transport [Fahrtnummer].",
            "format": "int32"
          },
          "line": {
            "type": "string",
            "description": "Line of the transport [Linie]."
          },
          "label": {
            "type": "string",
            "description": "Marketing - or product name of the transport, for instance 'Sprinter' or 'Schwarzwaldexpress' etc. [Marketing Name / Produkt Name]."
          },
          "origin": { "$ref": "#/components/schemas/StopAtStation" },
          "via": {
            "type": "array",
            "description": "List of past stations the transport stoped at.",
            "items": { "$ref": "#/components/schemas/StopAtStationPrio" }
          }
        },
        "description": "Public transport [Oeffentlicher Transport] with origin [Herkunft] and via [Via-Halte]."
      },
      "TransportPublicReferenceOrigin": {
        "required": [ "category", "journeyID", "number", "origin", "type" ],
        "type": "object",
        "properties": {
          "type": { "$ref": "#/components/schemas/TransportType" },
          "category": {
            "type": "string",
            "description": "Code of the transport [Fahrtgattung]."
          },
          "number": {
            "type": "integer",
            "description": "Number of the transport [Fahrtnummer].",
            "format": "int32"
          },
          "line": {
            "type": "string",
            "description": "Line of the transport [Linie]."
          },
          "label": {
            "type": "string",
            "description": "Marketing - or product name of the transport, for instance 'Sprinter' or 'Schwarzwaldexpress' etc. [Marketing Name / Produkt Name]."
          },
          "origin": { "$ref": "#/components/schemas/StationShort" },
          "journeyID": {
            "type": "string",
            "description": "ID of the journey [FahrtID]."
          }
        },
        "description": "Public transport reference [Oeffentliche Transport Referenz / Fahrtreferenz] with origin [Herkunft] and journey id [FahrtID]."
      },
      "BoardPublicDeparture": {
        "required": [ "departures" ],
        "type": "object",
        "properties": {
          "departures": {
            "type": "array",
            "description": "List of available departures [Abfahrten].",
            "items": { "$ref": "#/components/schemas/StopDeparture" }
          }
        },
        "description": "Departure board [Abfahrtstafel] for public transports [Oeffentliche Verkehre] ie trains, buses, trams, subways etc.."
      },
      "StopDeparture": {
        "required": [ "additional", "administration", "canceled", "departureID", "journeyID", "platform", "station", "time", "timeType", "transport" ],
        "type": "object",
        "properties": {
          "station": { "$ref": "#/components/schemas/StationShort" },
          "journeyID": {
            "type": "string",
            "description": "ID of journey [FahrtID]."
          },
          "timeSchedule": {
            "type": "string",
            "description": "Scheduled time [Abfahrtszeit Soll] of stop as fully qualified date (for instance '2019-08-19T12:56:14+02:00' or '2019-08-19T10:56:14Z').",
            "format": "date-time"
          },
          "timeType": { "$ref": "#/components/schemas/TimeType" },
          "time": {
            "type": "string",
            "description": "Best known time information of stop as fully qualified date (for instance '2019-08-19T12:56:14+02:00' or '2019-08-19T10:56:14Z').",
            "format": "date-time"
          },
          "platformSchedule": {
            "type": "string",
            "description": "Scheduled platform [Gleis, Bahnsteig, Plattform] the transport departs at."
          },
          "platform": {
            "type": "string",
            "description": "Actual platform [Gleis, Bahnsteig, Plattform] the transport departs at."
          },
          "administration": { "$ref": "#/components/schemas/Administration" },
          "messages": {
            "type": "array",
            "description": "List of available messages to display for this departure.",
            "items": { "$ref": "#/components/schemas/Message" }
          },
          "departureID": {
            "type": "string",
            "description": "ID of departure [AbfahrtID]."
          },
          "transport": { "$ref": "#/components/schemas/TransportPublicDestinationVia" },
          "canceled": {
            "type": "boolean",
            "description": "Indicates whether the departure has been canceled [Haltausfall]."
          },
          "additional": {
            "type": "boolean",
            "description": "Indicates whether this departure is additional [Zusatzhalt], meaning not be part of the regular schedule."
          },
          "reliefFor": {
            "type": "array",
            "description": "List of transports this journey reliefs for [Entlastungszug].",
            "items": { "$ref": "#/components/schemas/TransportPublicReferenceDestination" }
          },
          "reliefBy": {
            "type": "array",
            "description": "List of transports this journey is reliefed by [Entlastungszug].",
            "items": { "$ref": "#/components/schemas/TransportPublicReferenceDestination" }
          },
          "replacementFor": {
            "type": "array",
            "description": "List of transports this journey replaces [Ersatzzug].",
            "items": { "$ref": "#/components/schemas/TransportPublicReferenceDestination" }
          },
          "replacedBy": {
            "type": "array",
            "description": "List of transports this journey is replaced by [Ersatzzug].",
            "items": { "$ref": "#/components/schemas/TransportPublicReferenceDestination" }
          },
          "continuationBy": { "$ref": "#/components/schemas/TransportPublicReferenceDestination" },
          "travelsWith": {
            "type": "array",
            "description": "List of journeys this journey travels with [Vereinigt Mit].",
            "items": { "$ref": "#/components/schemas/TransportPublicReferenceDestination" }
          }
        },
        "description": "Departure [Abfahrt] information within departure boards."
      },
      "TransportPublicDestinationVia": {
        "required": [ "category", "destination", "number", "type", "via" ],
        "type": "object",
        "properties": {
          "type": { "$ref": "#/components/schemas/TransportType" },
          "category": {
            "type": "string",
            "description": "Code of the transport [Fahrtgattung]."
          },
          "number": {
            "type": "integer",
            "description": "Number of the transport [Fahrtnummer].",
            "format": "int32"
          },
          "line": {
            "type": "string",
            "description": "Line of the transport [Linie]."
          },
          "label": {
            "type": "string",
            "description": "Marketing - or product name of the transport, for instance 'Sprinter' or 'Schwarzwaldexpress' etc. [Marketing Name / Produkt Name]."
          },
          "destination": { "$ref": "#/components/schemas/StopAtStation" },
          "via": {
            "type": "array",
            "description": "List of remaining stations the transport stops at [ViaHalt].",
            "items": { "$ref": "#/components/schemas/StopAtStationPrio" }
          }
        },
        "description": "Public transport [Oeffentlicher Transport] with destination [Ziel] and via [Via-Halte]."
      },
      "TransportPublicReferenceDestination": {
        "required": [ "category", "destination", "journeyID", "number", "type" ],
        "type": "object",
        "properties": {
          "type": { "$ref": "#/components/schemas/TransportType" },
          "category": {
            "type": "string",
            "description": "Code of the transport [Fahrtgattung]."
          },
          "number": {
            "type": "integer",
            "description": "Number of the transport [Fahrtnummer].",
            "format": "int32"
          },
          "line": {
            "type": "string",
            "description": "Line of the transport [Linie]."
          },
          "label": {
            "type": "string",
            "description": "Marketing - or product name of the transport, for instance 'Sprinter' or 'Schwarzwaldexpress' etc. [Marketing Name / Produkt Name]."
          },
          "destination": { "$ref": "#/components/schemas/StationShort" },
          "journeyID": {
            "type": "string",
            "description": "ID of the journey [FahrtID]."
          }
        },
        "description": "Public transport reference [Fahrtreferenz] containing journey id [FahrtID] and scheduled destination [Zielhalt]."
      },
      "StopPlaceKeyType": {
        "type": "string",
        "description": "Enumerates all identifiers a stop-place [Haltestelle] can be mapped into or mapped from.\n- IFOPT (transmodel identifier for fixed objects, in germany dhid = Deutschlandweitere Halte ID)\n- EVA (eva number)\n- RL100 (rl100 / ds100)\n- EPA (epa uic number)\n- STADA (statitionsdatenbank number)\n- IBNR (interne bahnhofsnummer)",
        "enum": [ "IFOPT", "EVA", "RL100", "EPA", "STADA", "IBNR" ]
      },
      "StopPlaceKey": {
        "required": [ "key", "type" ],
        "type": "object",
        "properties": {
          "type": { "$ref": "#/components/schemas/StopPlaceKeyType" },
          "key": {
            "type": "string",
            "description": "Key value."
          }
        },
        "description": "Key mapping for a stop place [Haltestelle]."
      },
      "StopPlaceKeys": {
        "required": [ "evaNumber", "keys" ],
        "type": "object",
        "properties": {
          "evaNumber": {
            "type": "string",
            "description": "Eva number of stop place."
          },
          "keys": {
            "type": "array",
            "description": "List of stop place keys.",
            "items": { "$ref": "#/components/schemas/StopPlaceKey" }
          }
        },
        "description": "Different key mappings a stop place [Haltestelle] may have."
      },
      "Platform": {
        "required": [ "end", "name", "start" ],
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "description": "Name of the platform."
          },
          "start": {
            "type": "number",
            "description": "Start of the usable part of the platform given in meter in local coordinates. This value may differ from zero and may be positive as well as negative.",
            "format": "double"
          },
          "end": {
            "type": "number",
            "description": "End of the usable part of the platform given in meter in local coordinates.",
            "format": "double"
          },
          "physicalPlatform": {
            "type": "string",
            "description": "Identifier of physical platform [Bahnsteig] this platform / subplatform belongs to. (platform '12' and platform '13' may belong to the same physcial platform '12/13')"
          },
          "parentPlatform": {
            "type": "string",
            "description": "Name of parent platform in case this is a subplatform [Teilgleis]."
          },
          "sectors": {
            "type": "array",
            "description": "List of sectors [Sektoren] that belong to the platform.",
            "items": { "$ref": "#/components/schemas/Sector" }
          }
        },
        "description": "Platform [Gleis, Bahnsteig, Plattform] information. All ranges and positions of objects are given in meter in local coordinates, e.g. as a distance to a fixed point somewhere on the platform and differentiating between the two possible directions by a plus- and a minus-sign."
      },
      "Sector": {
        "required": [ "end", "name", "start" ],
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "description": "Name of the sector [Sektor / Mast etc.]."
          },
          "start": {
            "type": "number",
            "description": "Start of the sector given in meters in local coordinates.",
            "format": "double"
          },
          "end": {
            "type": "number",
            "description": "End of the sector given in meters in local coordinates.",
            "format": "double"
          },
          "cubePosition": {
            "type": "number",
            "description": "Position of the cube [Sektorwuerfel] given in meters in local coordinates.",
            "format": "double"
          }
        },
        "description": "Platform [Gleis, Bahnsteig, Plattform] sector [Gleisabschnitt, Steigabschnitt] information."
      },
      "Locale": {
        "type": "string",
        "description": "Locale to use, defaults to DE.\n- DE (German)\n- EN (English)\n- FR (French)\n- IT (Italian)",
        "enum": [ "DE", "EN", "FR", "IT" ]
      },
      "Coordinate2D": {
        "required": [ "latitude", "longitude" ],
        "type": "object",
        "properties": {
          "longitude": {
            "type": "number",
            "description": "Longitude position in reference system.",
            "format": "double"
          },
          "latitude": {
            "type": "number",
            "description": "Latitude position in reference system.",
            "format": "double"
          }
        },
        "description": "2D Coordinate within geo reference system."
      },
      "StopPlace": {
        "required": [ "availableTransports", "countryCode", "evaNumber", "names", "validFrom" ],
        "type": "object",
        "properties": {
          "evaNumber": {
            "type": "string",
            "description": "Eva number of stop place."
          },
          "stationID": {
            "type": "string",
            "description": "ID of station [Bahnhof] the stop place belongs to [usually the STADA code for S&S], may be empty when stop place is not part of a station."
          },
          "names": {
            "type": "object",
            "additionalProperties": { "$ref": "#/components/schemas/StopPlaceName" },
            "description": "Language dependent names for stop place."
          },
          "metropolis": {
            "type": "object",
            "additionalProperties": {
              "type": "string",
              "description": "Language dependent name for metropolis [Metropole]."
            },
            "description": "Language dependent name for metropolis [Metropole]."
          },
          "availableTransports": {
            "type": "array",
            "description": "Available transport types [Verkehrsarten] at stop place.",
            "items": { "$ref": "#/components/schemas/TransportType" }
          },
          "countryCode": {
            "type": "string",
            "description": "Country [Staat / Land] the stop place belongs to as ISO 3166-1 alpha-3 code [germany = DEU for instance]."
          },
          "validFrom": {
            "type": "string",
            "description": "Date the stop place is valid from.",
            "format": "date-time"
          },
          "validTo": {
            "type": "string",
            "description": "Date the stop place is valid to.",
            "format": "date-time"
          },
          "position": { "$ref": "#/components/schemas/Coordinate2D" }
        },
        "description": "Base information for a stop place [Haltestelle]."
      },
      "StopPlaceName": {
        "required": [ "nameLong", "nameShort" ],
        "type": "object",
        "properties": {
          "nameLong": {
            "type": "string",
            "description": "Full long name for stop place."
          },
          "nameShort": {
            "type": "string",
            "description": "Short name for stop place."
          },
          "nameLocal": {
            "type": "string",
            "description": "Name that is applicable for local areas, for instance 'Berlin Zoologischer Garten' may become 'B Zoologischer Garten'."
          },
          "speech": {
            "type": "string",
            "description": "Name speech information for stop place [Haltestelle]."
          },
          "symbol": {
            "type": "string",
            "description": "Symbol information [UTF-8] for stop place [Haltestelle]."
          }
        },
        "description": "Name information for stop place [Haltestelle]."
      },
      "StopPlaceSortKey": {
        "type": "string",
        "description": "Different sorting keys for stop place queries.\n- RELEVANCE (stop places are sorted by relevance descending (central stations etc. first))\n- QUERY_MATCH (stop places are sorted by matching the provided query descending)",
        "enum": [ "RELEVANCE", "QUERY_MATCH" ]
      },
      "StopPlaceSearchResult": {
        "required": [ "availableTransports", "evaNumber", "names" ],
        "type": "object",
        "properties": {
          "evaNumber": {
            "type": "string",
            "description": "Eva number of stop place."
          },
          "names": {
            "type": "object",
            "additionalProperties": { "$ref": "#/components/schemas/StopPlaceName" },
            "description": "Language dependent names for stop place."
          },
          "availableTransports": {
            "type": "array",
            "description": "Available transport types [Verkehrsarten] at stop place.",
            "items": { "$ref": "#/components/schemas/TransportType" }
          },
          "position": { "$ref": "#/components/schemas/Coordinate2D" }
        },
        "description": "Search result information for a stop place [Haltestelle]."
      },
      "StopPlaceSearchResults": {
        "type": "object",
        "properties": {
          "stopPlaces": {
            "type": "array",
            "items": { "$ref": "#/components/schemas/StopPlaceSearchResult" }
          }
        },
        "description": "Stop place [Haltestelle] search result."
      },
      "StopPlaces": {
        "type": "object",
        "properties": {
          "stopPlaces": {
            "type": "array",
            "items": { "$ref": "#/components/schemas/StopPlace" }
          }
        },
        "description": "Stop place [Haltestelle] result."
      },
      "StopPlaceGroupType": {
        "type": "string",
        "description": "Possible groups [Station] a set of stop places [Haltestellen] may belong to.\n- STATION (group defined by station, for instance FFM = Hoch + Tief)",
        "enum": [ "STATION" ]
      },
      "PersonaType": {
        "type": "string",
        "description": "Specifies different personae.\n- HANDICAPPED (Handicaped [MER] slow traveller, not able to use stairs and escalators)\n- OCCASIONAL_TRAVELLER (Occasional traveller [Gelegenheits-Reisender / Standard-Reisender] having mean walking speed. This is the default traveller.)\n- FREQUENT_TRAVELLER (Frequent traveller [Pendler] having higher speed than occasional traveller.)",
        "enum": [ "HANDICAPPED", "OCCASIONAL_TRAVELLER", "FREQUENT_TRAVELLER" ]
      },
      "ConnectingTime": {
        "required": [ "fromEvaNumber", "fromPlatform", "source", "times", "toEvaNumber", "toPlatform" ],
        "type": "object",
        "properties": {
          "fromEvaNumber": {
            "type": "string",
            "description": "Eva number of stop place [Haltestelle] to connect from."
          },
          "fromPlatform": {
            "type": "string",
            "description": "Platform [Gleis, Bahnsteig, Plattform] of stop place to connect from."
          },
          "fromSector": {
            "type": "string",
            "description": "Sector [Gleisabschnitt, Steigabschnitt] of stop place to connect from."
          },
          "toEvaNumber": {
            "type": "string",
            "description": "Eva number stop place to connect to."
          },
          "toPlatform": {
            "type": "string",
            "description": "Platform [Gleis, Bahnsteig, Plattform] of stop place [Haltestelle] to connect to."
          },
          "toSector": {
            "type": "string",
            "description": "Sector [Gleisabschnitt, Steigabschnitt] of stop place [Haltestelle] to connect from."
          },
          "times": {
            "type": "array",
            "description": "Connecting times fo different personae.",
            "items": { "$ref": "#/components/schemas/ConnectionTime" }
          },
          "source": { "$ref": "#/components/schemas/ConnectingTimeSource" }
        },
        "description": "Connecting time [Umstiegszeit] from a particular stop place [Haltestelle], platform [Gleis, Bahnsteig, Plattform] and optional sector [Gleisabschnitt, Steigabschnitt] to a particular station, platform and optional sector."
      },
      "ConnectingTimeSource": {
        "type": "string",
        "description": "Enumerates all possible sources for connecting times [Umstiegszeiten].\n- FALLBACK (no specific information available, fixed constant used)\n- RIL420 (connecting time is based on DB guideline RIL420)\n- INDOOR_ROUTNG (connecting time is based on real indoor routing information from ris-maps system)",
        "enum": [ "FALLBACK", "RIL420", "INDOOR_ROUTNG" ]
      },
      "ConnectingTimes": {
        "type": "object",
        "properties": {
          "connectingTimes": {
            "type": "array",
            "items": { "$ref": "#/components/schemas/ConnectingTime" }
          }
        },
        "description": "List of connecting times [Umstiegszeiten] for requested list of stop places [Haltestellen]."
      },
      "ConnectionTime": {
        "required": [ "persona" ],
        "type": "object",
        "properties": {
          "persona": { "$ref": "#/components/schemas/PersonaType" },
          "distance": {
            "type": "number",
            "description": "Distance in meters."
          },
          "duration": {
            "type": "string",
            "description": "Duration of connect in ISO8601 (for instance 'P3Y6M4DT12H30M17S').",
            "format": "duration"
          }
        },
        "description": "Connection time [Anschlusszeit] for persona."
      },
      "Platforms": {
        "type": "object",
        "properties": {
          "platforms": {
            "type": "array",
            "items": { "$ref": "#/components/schemas/Platform" }
          }
        },
        "description": "List of platforms [Gleise, Bahnsteige, Plattformen] for a station."
      },
      "OperationalPlatform": {
        "required": [ "end", "name", "operationalplatformType", "start" ],
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "description": "Name of the platform."
          },
          "start": {
            "type": "number",
            "description": "Start of the usable part of the platform given in meter in local coordinates. This value may differ from zero and may be positive as well as negative.",
            "format": "double"
          },
          "end": {
            "type": "number",
            "description": "End of the usable part of the platform given in meter in local coordinates.",
            "format": "double"
          },
          "physicalPlatform": {
            "type": "string",
            "description": "Identifier of physical platform [Bahnsteig] this platform / subplatform belongs to. (platform '12' and platform '13' may belong to the same physcial platform '12/13')"
          },
          "parentPlatform": {
            "type": "string",
            "description": "Name of parent platform in case this is a subplatform [Teilgleis]."
          },
          "sectors": {
            "type": "array",
            "description": "List of sectors [Sektoren] that belong to the platform.",
            "items": { "$ref": "#/components/schemas/Sector" }
          },
          "operationalplatformType": { "$ref": "#/components/schemas/OperationalPlatformType" },
          "referencepoints": {
            "type": "array",
            "description": "Positions of the reference points that determine the position of a stopping train at the platform.",
            "items": { "$ref": "#/components/schemas/ReferencePoint" }
          },
          "optics": {
            "type": "array",
            "description": "Names of the operational units [Optiken] that belong to the platform.",
            "items": {
              "type": "string",
              "description": "Names of the operational units [Optiken] that belong to the platform."
            }
          },
          "operationalplatforms": {
            "type": "array",
            "description": "Names of the operational platforms that belong to the platform.",
            "items": {
              "type": "string",
              "description": "Names of the operational platforms that belong to the platform."
            }
          }
        },
        "description": "Detailed operational information to platform."
      },
      "OperationalPlatformType": {
        "type": "string",
        "description": "Type of a platform.",
        "enum": [ "TERMINAL", "THROUGH" ]
      },
      "OperationalPlatforms": {
        "type": "object",
        "properties": {
          "platforms": {
            "type": "array",
            "items": { "$ref": "#/components/schemas/OperationalPlatform" }
          }
        },
        "description": "List of operational platforms [Gleise, Bahnsteige, Plattformen] for a station."
      },
      "ReferencePoint": {
        "required": [ "name", "position", "readableFromOrigin", "referencePointType" ],
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "description": "Name of the reference point."
          },
          "referencePointType": { "$ref": "#/components/schemas/ReferencePointType" },
          "position": {
            "type": "number",
            "description": "Position of the reference point in meter in local coordinates.",
            "format": "double"
          },
          "maxLength": {
            "type": "number",
            "description": "Lenght up to the reference point is to be used by a stopping formation.",
            "format": "double"
          },
          "readableFromOrigin": {
            "type": "boolean",
            "description": "Determines the direction the reference point is to be used. If true, the formation moves from origin to positive values in local coordinates."
          }
        },
        "description": "Reference point that indicates where a vehicle [Fahrzeug] stops at a platform [Gleis, Bahnsteig, Plattform]."
      },
      "ReferencePointType": {
        "type": "string",
        "description": "Type of a reference point.\n- STOPSIGNAL (?)\n- STOPBOARD (?)\n- ORIENTATIONSIGN (?)\n- VIRTUALSTOPPOINT (?)",
        "enum": [ "STOPSIGNAL", "STOPBOARD", "ORIENTATIONSIGN", "VIRTUALSTOPPOINT" ]
      },
      "Weather": {
        "type": "object",
        "properties": {
          "position": { "$ref": "#/components/schemas/Coordinate2D" },
          "time": {
            "type": "string",
            "description": "Time of whether information in ZULU time.",
            "format": "date-time"
          },
          "degrees": {
            "type": "number",
            "description": "Temperature degress in celsius.",
            "format": "double"
          },
          "condition": { "$ref": "#/components/schemas/WeatherCondition" }
        },
        "description": "Represents weather information at a certain geo position for a certain date."
      },
      "WeatherCondition": {
        "type": "string",
        "description": "Possible weather conditions like cloudy, sunny etc.",
        "enum": [ "CLEAR", "CLEAR_NIGHT", "CLOUDS", "FEW_CLOUDS", "FEW_CLOUDS_NIGHT", "RAIN", "MIST", "SNOW", "THUNDER" ]
      },
      "IndoorLevel": {
        "type": "string",
        "description": "Indoor level [Stockwerk / Geschoss] descriptions for stations.\n- BASEMENT_FLOOR_1 (Basement Floor 1 [Untergeschoss / Kellergeschoss 1])\n- BASEMENT_FLOOR_2 (Basement Floor 2 [Untergeschoss / Kellergeschoss 2])\n- BASEMENT_FLOOR_3 (Basement Floor 3 [Untergeschoss / Kellergeschoss 3])\n- BASEMENT_FLOOR_4 (Basement Floor 4 [Untergeschoss / Kellergeschoss 4])\n- BASEMENT_FLOOR_5 (Basement Floor 5 [Untergeschoss / Kellergeschoss 5])\n- BASEMENT_FLOOR_6 (Basement Floor 6 [Untergeschoss / Kellergeschoss 6])\n- BASEMENT_FLOOR_7 (Basement Floor 7 [Untergeschoss / Kellergeschoss 7])\n- BASEMENT_FLOOR_8 (Basement Floor 8 Untergeschoss / Kellergeschoss 8])\n- BASEMENT_FLOOR_9 (Basement Floor 9 [Untergeschoss / Kellergeschoss 9])\n- GROUND_FLOOR (Ground Floor [Erdgeschoss)]\n- UPPER_FLOOR_1 (Upper Floor 1 [Obergeschoss 1 / 1. Stock])\n- UPPER_FLOOR_2 (Upper Floor 2 [Obergeschoss 2 / 2. Stock])\n- UPPER_FLOOR_3 (Upper Floor 3 [Obergeschoss 3 / 3. Stock])\n- UPPER_FLOOR_4 (Upper Floor 4 [Obergeschoss 4 / 4. Stock])\n- UPPER_FLOOR_5 (Upper Floor 5 [Obergeschoss 5 / 5. Stock])\n- UPPER_FLOOR_6 (Upper Floor 6 [Obergeschoss 6 / 6. Stock])\n- UPPER_FLOOR_7 (Upper Floor 7 [Obergeschoss 7 / 7. Stock])\n- UPPER_FLOOR_8 (Upper Floor 8 [Obergeschoss 8 / 8. Stock])\n- UPPER_FLOOR_9 (Upper Floor 9 [Obergeschoss 9 / 9. Stock])\n- MEZZANINE_FLOOR_1 (Mezzanine Floor 1 [Zwischengeschoss 1])\n- MEZZANINE_FLOOR_2 (Mezzanine Floor 1 [Zwischengeschoss 2])\n- MEZZANINE_FLOOR_3 (Mezzanine Floor 1 [Zwischengeschoss 3])\n- MEZZANINE_FLOOR_4 (Mezzanine Floor 1 [Zwischengeschoss 4])\n- MEZZANINE_FLOOR_5 (Mezzanine Floor 1 [Zwischengeschoss 5])\n- MEZZANINE_FLOOR_6 (Mezzanine Floor 1 [Zwischengeschoss 6])\n- MEZZANINE_FLOOR_7 (Mezzanine Floor 1 [Zwischengeschoss 7])\n- MEZZANINE_FLOOR_8 (Mezzanine Floor 1 [Zwischengeschoss 8])\n- MEZZANINE_FLOOR_9 (Mezzanine Floor 1 [Zwischengeschoss 9])",
        "enum": [ "BASEMENT_FLOOR_1", "BASEMENT_FLOOR_2", "BASEMENT_FLOOR_3", "BASEMENT_FLOOR_4", "BASEMENT_FLOOR_5", "BASEMENT_FLOOR_6", "BASEMENT_FLOOR_7", "BASEMENT_FLOOR_8", "BASEMENT_FLOOR_9", "GROUND_FLOOR", "UPPER_FLOOR_1", "UPPER_FLOOR_2", "UPPER_FLOOR_3", "UPPER_FLOOR_4", "UPPER_FLOOR_5", "UPPER_FLOOR_6", "UPPER_FLOOR_7", "UPPER_FLOOR_8", "UPPER_FLOOR_9", "MEZZANINE_FLOOR_1", "MEZZANINE_FLOOR_2", "MEZZANINE_FLOOR_3", "MEZZANINE_FLOOR_4", "MEZZANINE_FLOOR_5", "MEZZANINE_FLOOR_6", "MEZZANINE_FLOOR_7", "MEZZANINE_FLOOR_8", "MEZZANINE_FLOOR_9" ]
      },
      "BoardMultiDeparture": {
        "type": "object",
        "properties": {
          "publicTransports": {
            "type": "array",
            "description": "Available public transports for board.",
            "items": { "$ref": "#/components/schemas/StopWithDurationDeparture" }
          },
          "onDemandTransports": {
            "type": "array",
            "description": "Available on demand transports for board.",
            "items": { "$ref": "#/components/schemas/MobilityOnDemandWithDuration" }
          },
          "individualTransports": {
            "type": "array",
            "description": "Available individual transports for board.",
            "items": { "$ref": "#/components/schemas/MobilityIndividualWithDuration" }
          }
        },
        "description": "Multi modal departure board [Abfahrtstafel] for public transports [Oeffentliche Verkehre], individual transports [Individualverkehre] and on demand transports [Rufverkehre]."
      },
      "MobilityIndividualWithDuration": {
        "required": [ "count", "positions", "provider", "type", "walkDuration" ],
        "type": "object",
        "properties": {
          "pickUpStation": { "$ref": "#/components/schemas/PickUpStation" },
          "type": { "$ref": "#/components/schemas/TransportType" },
          "provider": {
            "type": "string",
            "description": "Name of provider."
          },
          "count": {
            "type": "integer",
            "description": "Amount of individual mobilities for pickup station, type and provider.",
            "format": "int32"
          },
          "positions": {
            "type": "array",
            "description": "Geo positions of individual mobilities.",
            "items": { "$ref": "#/components/schemas/Coordinate2D" }
          },
          "walkDuration": {
            "type": "string",
            "description": "Time to walk in order to reach pickup station / nearest transport the transport departs at in ISO8601 (for instance 'P3Y6M4DT12H30M17S').",
            "format": "duration"
          }
        },
        "description": "Individual transport like rental cars, bikes, scooters etc. for departure / arrival boards with walk duration to reach transport."
      },
      "MobilityOnDemandWithDuration": {
        "required": [ "provider", "type", "walkDuration" ],
        "type": "object",
        "properties": {
          "type": { "$ref": "#/components/schemas/TransportType" },
          "provider": {
            "type": "string",
            "description": "Name of provider."
          },
          "serviceArea": {
            "type": "array",
            "description": "Coordinates of the Service Area",
            "items": {
              "type": "array",
              "description": "Coordinates of the Service Area",
              "items": {
                "type": "array",
                "description": "Coordinates of the Service Area",
                "items": {
                  "type": "array",
                  "description": "Coordinates of the Service Area",
                  "items": {
                    "type": "number",
                    "description": "Coordinates of the Service Area",
                    "format": "double"
                  }
                }
              }
            }
          },
          "walkDuration": {
            "type": "string",
            "description": "Time to walk in order to reach pickup station / nearest transport the transport departs at in ISO8601 (for instance 'P3Y6M4DT12H30M17S').",
            "format": "duration"
          }
        },
        "description": "On demand transport like for shuttles or ubers for departure / arrival boards with walk duration."
      },
      "PickUpStation": {
        "required": [ "name", "position", "provider" ],
        "type": "object",
        "properties": {
          "provider": {
            "type": "string",
            "description": "Name of provider."
          },
          "name": {
            "type": "string",
            "description": "Name of station, may be empty."
          },
          "position": { "$ref": "#/components/schemas/Coordinate2D" }
        },
        "description": "Pickup station for ondemand / individual transports."
      },
      "StopWithDurationDeparture": {
        "required": [ "additional", "administration", "canceled", "departureID", "journeyID", "platform", "station", "time", "timeType", "transport" ],
        "type": "object",
        "properties": {
          "station": { "$ref": "#/components/schemas/StationShort" },
          "journeyID": {
            "type": "string",
            "description": "ID of journey [FahrtID]."
          },
          "timeSchedule": {
            "type": "string",
            "description": "Scheduled time [Abfahrtszeit Soll] of stop as fully qualified date (for instance '2019-08-19T12:56:14+02:00' or '2019-08-19T10:56:14Z').",
            "format": "date-time"
          },
          "timeType": { "$ref": "#/components/schemas/TimeType" },
          "time": {
            "type": "string",
            "description": "Best known time information of stop as fully qualified date (for instance '2019-08-19T12:56:14+02:00' or '2019-08-19T10:56:14Z').",
            "format": "date-time"
          },
          "platformSchedule": {
            "type": "string",
            "description": "Scheduled platform [Gleis, Bahnsteig, Plattform] the transport departs at."
          },
          "platform": {
            "type": "string",
            "description": "Actual platform [Gleis, Bahnsteig, Plattform] the transport departs at."
          },
          "administration": { "$ref": "#/components/schemas/Administration" },
          "messages": {
            "type": "array",
            "description": "List of available messages to display for this departure.",
            "items": { "$ref": "#/components/schemas/Message" }
          },
          "departureID": {
            "type": "string",
            "description": "ID of departure [AbfahrtID]."
          },
          "transport": { "$ref": "#/components/schemas/TransportPublicDestinationVia" },
          "canceled": {
            "type": "boolean",
            "description": "Indicates whether the departure has been canceled [Haltausfall]."
          },
          "additional": {
            "type": "boolean",
            "description": "Indicates whether this departure is additional [Zusatzhalt], meaning not be part of the regular schedule."
          },
          "reliefFor": {
            "type": "array",
            "description": "List of transports this journey reliefs for [Entlastungszug].",
            "items": { "$ref": "#/components/schemas/TransportPublicReferenceDestination" }
          },
          "reliefBy": {
            "type": "array",
            "description": "List of transports this journey is reliefed by [Entlastungszug].",
            "items": { "$ref": "#/components/schemas/TransportPublicReferenceDestination" }
          },
          "replacementFor": {
            "type": "array",
            "description": "List of transports this journey replaces [Ersatzzug].",
            "items": { "$ref": "#/components/schemas/TransportPublicReferenceDestination" }
          },
          "replacedBy": {
            "type": "array",
            "description": "List of transports this journey is replaced by [Ersatzzug].",
            "items": { "$ref": "#/components/schemas/TransportPublicReferenceDestination" }
          },
          "continuationBy": { "$ref": "#/components/schemas/TransportPublicReferenceDestination" },
          "travelsWith": {
            "type": "array",
            "description": "List of journeys this journey travels with [Vereinigt Mit].",
            "items": { "$ref": "#/components/schemas/TransportPublicReferenceDestination" }
          },
          "walkDuration": {
            "type": "string",
            "description": "Time to walk in order to reach actual platform the transport departs at in ISO8601 (for instance 'P3Y6M4DT12H30M17S').",
            "format": "duration"
          }
        },
        "description": "Departure information within departure boards including walk durations to reach the transports."
      },
      "BoardMultiArrival": {
        "type": "object",
        "properties": {
          "publicTransports": {
            "type": "array",
            "description": "Available public transports for board.",
            "items": { "$ref": "#/components/schemas/StopWithDurationArrival" }
          },
          "onDemandTransports": {
            "type": "array",
            "description": "Available on demand transports for board.",
            "items": { "$ref": "#/components/schemas/MobilityOnDemandWithDuration" }
          },
          "individualTransports": {
            "type": "array",
            "description": "Available individual transports for board.",
            "items": { "$ref": "#/components/schemas/MobilityIndividualWithDuration" }
          }
        },
        "description": "Multi modal arrival board [Ankunftstafel] for public transports [Oeffentliche Verkehre], individual transports [Individualverkehre] and on demand transports [Rufverkehre]."
      },
      "StopWithDurationArrival": {
        "required": [ "additional", "administration", "arrivalID", "canceled", "journeyID", "platform", "station", "time", "timeType", "transport" ],
        "type": "object",
        "properties": {
          "station": { "$ref": "#/components/schemas/StationShort" },
          "journeyID": {
            "type": "string",
            "description": "ID of journey [FahrtID]."
          },
          "timeSchedule": {
            "type": "string",
            "description": "Scheduled time [Abfahrtszeit Soll] of stop as fully qualified date (for instance '2019-08-19T12:56:14+02:00' or '2019-08-19T10:56:14Z').",
            "format": "date-time"
          },
          "timeType": { "$ref": "#/components/schemas/TimeType" },
          "time": {
            "type": "string",
            "description": "Best known time information of stop as fully qualified date (for instance '2019-08-19T12:56:14+02:00' or '2019-08-19T10:56:14Z').",
            "format": "date-time"
          },
          "platformSchedule": {
            "type": "string",
            "description": "Scheduled platform [Gleis, Bahnsteig, Plattform] the transport departs at."
          },
          "platform": {
            "type": "string",
            "description": "Actual platform [Gleis, Bahnsteig, Plattform] the transport departs at."
          },
          "administration": { "$ref": "#/components/schemas/Administration" },
          "messages": {
            "type": "array",
            "description": "List of available messages to display for this departure.",
            "items": { "$ref": "#/components/schemas/Message" }
          },
          "arrivalID": {
            "type": "string",
            "description": "ID of arrival [AnkunftID]."
          },
          "transport": { "$ref": "#/components/schemas/TransportPublicOriginVia" },
          "canceled": {
            "type": "boolean",
            "description": "Indicates whether the arrival has been canceled [Haltausfall]."
          },
          "additional": {
            "type": "boolean",
            "description": "Indicates whether this arrival is additional [Zusatzhalt], meaning not be part of the regular schedule."
          },
          "reliefFor": {
            "type": "array",
            "description": "List of transports this journey reliefs for [Entlastungszug].",
            "items": { "$ref": "#/components/schemas/TransportPublicReferenceOrigin" }
          },
          "reliefBy": {
            "type": "array",
            "description": "List of transports this journey is reliefed by [Entlastungszug].",
            "items": { "$ref": "#/components/schemas/TransportPublicReferenceOrigin" }
          },
          "replacementFor": {
            "type": "array",
            "description": "List of transports this journey replaces [Ersatzzug].",
            "items": { "$ref": "#/components/schemas/TransportPublicReferenceOrigin" }
          },
          "replacedBy": {
            "type": "array",
            "description": "List of transports this journey is replaced by [Ersatzzug].",
            "items": { "$ref": "#/components/schemas/TransportPublicReferenceOrigin" }
          },
          "continuationFor": { "$ref": "#/components/schemas/TransportPublicReferenceOrigin" },
          "travelsWith": {
            "type": "array",
            "description": "List of journeys this journey travels with [Vereinigt Mit].",
            "items": { "$ref": "#/components/schemas/TransportPublicReferenceOrigin" }
          },
          "walkDuration": {
            "type": "string",
            "description": "Time to walk in order to reach actual platform the transport departs at in ISO8601 (for instance 'P3Y6M4DT12H30M17S').",
            "format": "duration"
          }
        },
        "description": "Arrival information within arrival boards including walk durations to reach the transports."
      },
      "JourneyMatch": {
        "required": [ "administrationID", "date", "destinationSchedule", "journeyID", "originSchedule", "transport" ],
        "type": "object",
        "properties": {
          "journeyID": {
            "type": "string",
            "description": "ID of journey [FahrtID]."
          },
          "date": {
            "type": "string",
            "description": "Date of scheduled start departure of journey [Verkehrstag].",
            "format": "date"
          },
          "originSchedule": { "$ref": "#/components/schemas/StationShort" },
          "destinationSchedule": { "$ref": "#/components/schemas/StationShort" },
          "transport": { "$ref": "#/components/schemas/TransportPublic" },
          "administrationID": {
            "type": "string",
            "description": "Unique id for administration [Verwaltung]."
          }
        },
        "description": "Journey [Fahrt] match."
      },
      "JourneyMatches": {
        "required": [ "journeys" ],
        "type": "object",
        "properties": {
          "journeys": {
            "type": "array",
            "description": "Matched journeys.",
            "items": { "$ref": "#/components/schemas/JourneyMatch" }
          }
        },
        "description": "List of possible journey [Fahrt] matches."
      },
      "TransportPublic": {
        "required": [ "category", "number", "type" ],
        "type": "object",
        "properties": {
          "type": { "$ref": "#/components/schemas/TransportType" },
          "category": {
            "type": "string",
            "description": "Code of the transport [Fahrtgattung]."
          },
          "number": {
            "type": "integer",
            "description": "Number of the transport [Fahrtnummer].",
            "format": "int32"
          },
          "line": {
            "type": "string",
            "description": "Line of the transport [Linie]."
          },
          "label": {
            "type": "string",
            "description": "Marketing - or product name of the transport, for instance 'Sprinter' or 'Schwarzwaldexpress' etc. [Marketing Name / Produkt Name]."
          }
        },
        "description": "Public transport description for all types of trains, buses, subways, trams etc."
      },
      "DepartureMatch": {
        "required": [ "departureID", "journeyID", "station", "time", "timeSchedule", "timeType" ],
        "type": "object",
        "properties": {
          "journeyID": {
            "type": "string",
            "description": "ID of journey [FahrtID]."
          },
          "departureID": {
            "type": "string",
            "description": "ID of departure [AbfahrtID]"
          },
          "station": { "$ref": "#/components/schemas/StationShort" },
          "timeSchedule": {
            "type": "string",
            "description": "Scheduled time [Soll] of stop as fully qualified date (for instance '2019-08-19T12:56:14+02:00' or '2019-08-19T10:56:14Z').",
            "format": "date-time"
          },
          "timeType": { "$ref": "#/components/schemas/TimeType" },
          "time": {
            "type": "string",
            "description": "Best known time information of stop as fully qualified date (for instance '2019-08-19T12:56:14+02:00' or '2019-08-19T10:56:14Z').",
            "format": "date-time"
          },
          "platformSchedule": {
            "type": "string",
            "description": "Scheduled platform [Gleis, Bahnsteig, Plattform] the transport arrives / departs at."
          },
          "platform": {
            "type": "string",
            "description": "Actual platform [Gleis, Bahnsteig, Plattform] the transport arrives / departs at."
          }
        },
        "description": "Departure [Abfahrt] match."
      },
      "DepartureMatches": {
        "required": [ "departures" ],
        "type": "object",
        "properties": {
          "departures": {
            "type": "array",
            "description": "Matched departures.",
            "items": { "$ref": "#/components/schemas/DepartureMatch" }
          }
        },
        "description": "List of possible departure [Abfahrt] matches."
      },
      "Arrival": {
        "required": [ "arrivalID", "messages", "passengerChange", "platform", "station", "time", "timeSchedule", "timeType" ],
        "type": "object",
        "properties": {
          "station": { "$ref": "#/components/schemas/StationShort" },
          "passengerChange": {
            "type": "boolean",
            "description": "Indicates whether passengers are allowed to enter / leave [Fahrgastwechsel]."
          },
          "timeSchedule": {
            "type": "string",
            "description": "Scheduled time [Soll] of stop as fully qualified date (for instance '2019-08-19T12:56:14+02:00' or '2019-08-19T10:56:14Z').",
            "format": "date-time"
          },
          "timeType": { "$ref": "#/components/schemas/TimeType" },
          "time": {
            "type": "string",
            "description": "Best known time information of stop as fully qualified date (for instance '2019-08-19T12:56:14+02:00' or '2019-08-19T10:56:14Z').",
            "format": "date-time"
          },
          "platformSchedule": {
            "type": "string",
            "description": "Scheduled platform [Gleis, Bahnsteig, Plattform] the transport arrives / departs at."
          },
          "platform": {
            "type": "string",
            "description": "Actual platform [Gleis, Bahnsteig, Plattform] the transport arrives / departs at."
          },
          "messages": {
            "type": "array",
            "description": "List of messages for journey at this stop [Freitexte].",
            "items": { "$ref": "#/components/schemas/Message" }
          },
          "arrivalID": {
            "type": "string",
            "description": "Unique id for arrival [AnkunftsID]."
          }
        },
        "description": "Information on journey arrival [Ankunft]."
      },
      "Departure": {
        "required": [ "departureID", "messages", "passengerChange", "platform", "station", "time", "timeSchedule", "timeType" ],
        "type": "object",
        "properties": {
          "station": { "$ref": "#/components/schemas/StationShort" },
          "passengerChange": {
            "type": "boolean",
            "description": "Indicates whether passengers are allowed to enter / leave [Fahrgastwechsel]."
          },
          "timeSchedule": {
            "type": "string",
            "description": "Scheduled time [Soll] of stop as fully qualified date (for instance '2019-08-19T12:56:14+02:00' or '2019-08-19T10:56:14Z').",
            "format": "date-time"
          },
          "timeType": { "$ref": "#/components/schemas/TimeType" },
          "time": {
            "type": "string",
            "description": "Best known time information of stop as fully qualified date (for instance '2019-08-19T12:56:14+02:00' or '2019-08-19T10:56:14Z').",
            "format": "date-time"
          },
          "platformSchedule": {
            "type": "string",
            "description": "Scheduled platform [Gleis, Bahnsteig, Plattform] the transport arrives / departs at."
          },
          "platform": {
            "type": "string",
            "description": "Actual platform [Gleis, Bahnsteig, Plattform] the transport arrives / departs at."
          },
          "messages": {
            "type": "array",
            "description": "List of messages for journey at this stop [Freitexte].",
            "items": { "$ref": "#/components/schemas/Message" }
          },
          "departureID": {
            "type": "string",
            "description": "Unique id for departure [AbfahrtID]."
          }
        },
        "description": "Information on journey departure [Abfahrt]."
      },
      "JourneySegmentBased": {
        "required": [ "destinationSchedule", "journeyID", "originSchedule" ],
        "type": "object",
        "properties": {
          "journeyID": {
            "type": "string",
            "description": "ID of journey [FahrtID]."
          },
          "originSchedule": { "$ref": "#/components/schemas/StationShort" },
          "destinationSchedule": { "$ref": "#/components/schemas/StationShort" },
          "journeyCanceled": {
            "type": "boolean",
            "description": "Flag that indicates whether whole journey has been canceled."
          },
          "continuationFor": { "$ref": "#/components/schemas/TransportPublicReferenceOrigin" },
          "continuationBy": { "$ref": "#/components/schemas/TransportPublicReferenceDestination" },
          "segments": {
            "type": "array",
            "description": "List of segments [Fahrtabschnitte].",
            "items": { "$ref": "#/components/schemas/Segment" }
          },
          "segmentsCanceled": {
            "type": "array",
            "description": "List of canceled segments [Fahrtabschnitte].",
            "items": { "$ref": "#/components/schemas/SegmentCanceled" }
          }
        },
        "description": "Segment based [Fahrtabschnittsbasiert] information for a particular journey [Fahrtverlauf]."
      },
      "Segment": {
        "required": [ "additional", "administration", "arrival", "canceled", "departure", "transport" ],
        "type": "object",
        "properties": {
          "administration": { "$ref": "#/components/schemas/Administration" },
          "transport": { "$ref": "#/components/schemas/TransportPublic" },
          "additional": {
            "type": "boolean",
            "description": "Indicates whether this segment is additional, meaning not be part of the regular schedule."
          },
          "canceled": {
            "type": "boolean",
            "description": "Indicates whether this segment has been canceled."
          },
          "reliefFor": {
            "type": "array",
            "description": "List of transports this journey at this particular segment reliefs for [Entlastungszug].",
            "items": { "$ref": "#/components/schemas/TransportPublicReferenceDestination" }
          },
          "reliefBy": {
            "type": "array",
            "description": "List of transports this journey at this particular segment is reliefed by [Entlastungszug].",
            "items": { "$ref": "#/components/schemas/TransportPublicReferenceDestination" }
          },
          "replacementFor": {
            "type": "array",
            "description": "List of transports this journey at this particular segment replaces [Ersatzzug].",
            "items": { "$ref": "#/components/schemas/TransportPublicReferenceDestination" }
          },
          "replacedBy": {
            "type": "array",
            "description": "List of transports this journey at this particular segment is replaced by [Ersatzzug].",
            "items": { "$ref": "#/components/schemas/TransportPublicReferenceDestination" }
          },
          "travelsWith": {
            "type": "array",
            "description": "List of journeys this journey at this particular segment travels with [Traktionen].",
            "items": { "$ref": "#/components/schemas/TransportPublicReferenceDestination" }
          },
          "departure": { "$ref": "#/components/schemas/Departure" },
          "arrival": { "$ref": "#/components/schemas/Arrival" }
        },
        "description": "Journey segment information on departure and arrival [Fahrtabschnitt]."
      },
      "SegmentCanceled": {
        "required": [ "additional", "administration", "arrival", "canceled", "departure", "scheduledBeforeDepartureID", "transport" ],
        "type": "object",
        "properties": {
          "administration": { "$ref": "#/components/schemas/Administration" },
          "transport": { "$ref": "#/components/schemas/TransportPublic" },
          "additional": {
            "type": "boolean",
            "description": "Indicates whether this segment is additional, meaning not be part of the regular schedule."
          },
          "canceled": {
            "type": "boolean",
            "description": "Indicates whether this segment has been canceled."
          },
          "reliefFor": {
            "type": "array",
            "description": "List of transports this journey at this particular segment reliefs for [Entlastungszug].",
            "items": { "$ref": "#/components/schemas/TransportPublicReferenceDestination" }
          },
          "reliefBy": {
            "type": "array",
            "description": "List of transports this journey at this particular segment is reliefed by [Entlastungszug].",
            "items": { "$ref": "#/components/schemas/TransportPublicReferenceDestination" }
          },
          "replacementFor": {
            "type": "array",
            "description": "List of transports this journey at this particular segment replaces [Ersatzzug].",
            "items": { "$ref": "#/components/schemas/TransportPublicReferenceDestination" }
          },
          "replacedBy": {
            "type": "array",
            "description": "List of transports this journey at this particular segment is replaced by [Ersatzzug].",
            "items": { "$ref": "#/components/schemas/TransportPublicReferenceDestination" }
          },
          "travelsWith": {
            "type": "array",
            "description": "List of journeys this journey at this particular segment travels with [Traktionen].",
            "items": { "$ref": "#/components/schemas/TransportPublicReferenceDestination" }
          },
          "departure": { "$ref": "#/components/schemas/Departure" },
          "arrival": { "$ref": "#/components/schemas/Arrival" },
          "scheduledBeforeDepartureID": {
            "type": "string",
            "description": "References to departure ID this segment was positioned before. May reference to a canceled segment as well and may be empty in case of destination."
          }
        },
        "description": "Reflects a canceled segment."
      },
      "ArrivalDepartureEvent": {
        "required": [ "administration", "arrivalOrDepartureID", "canceled", "messages", "passengerChange", "platform", "reliefBy", "reliefFor", "replacedBy", "replacementFor", "station", "time", "timeSchedule", "timeType", "transport", "travelsWith", "type" ],
        "type": "object",
        "properties": {
          "station": { "$ref": "#/components/schemas/StationShort" },
          "passengerChange": {
            "type": "boolean",
            "description": "Indicates whether passengers are allowed to enter / leave [Fahrgastwechsel]."
          },
          "timeSchedule": {
            "type": "string",
            "description": "Scheduled time [Soll] of stop as fully qualified date (for instance '2019-08-19T12:56:14+02:00' or '2019-08-19T10:56:14Z').",
            "format": "date-time"
          },
          "timeType": { "$ref": "#/components/schemas/TimeType" },
          "time": {
            "type": "string",
            "description": "Best known time information of stop as fully qualified date (for instance '2019-08-19T12:56:14+02:00' or '2019-08-19T10:56:14Z').",
            "format": "date-time"
          },
          "platformSchedule": {
            "type": "string",
            "description": "Scheduled platform [Gleis, Bahnsteig, Plattform] the transport arrives / departs at."
          },
          "platform": {
            "type": "string",
            "description": "Actual platform [Gleis, Bahnsteig, Plattform] the transport arrives / departs at."
          },
          "messages": {
            "type": "array",
            "description": "List of messages for journey at this stop [Freitexte].",
            "items": { "$ref": "#/components/schemas/Message" }
          },
          "type": { "$ref": "#/components/schemas/EventType" },
          "arrivalOrDepartureID": {
            "type": "string",
            "description": "ID of arrival or departure, depends on event type."
          },
          "canceled": {
            "type": "boolean",
            "description": "Indicates whether this event has been canceled."
          },
          "administration": { "$ref": "#/components/schemas/Administration" },
          "transport": { "$ref": "#/components/schemas/TransportPublic" },
          "reliefFor": {
            "type": "array",
            "description": "List of transports this journey at this particular event reliefs for [Entlastungszug].",
            "items": { "$ref": "#/components/schemas/TransportPublicDestinationOriginJourney" }
          },
          "reliefBy": {
            "type": "array",
            "description": "List of transports this journey at this particular event is reliefed by [Entlastungszug].",
            "items": { "$ref": "#/components/schemas/TransportPublicDestinationOriginJourney" }
          },
          "replacementFor": {
            "type": "array",
            "description": "List of transports this journey at this particular event replaces [Ersatzzug].",
            "items": { "$ref": "#/components/schemas/TransportPublicDestinationOriginJourney" }
          },
          "replacedBy": {
            "type": "array",
            "description": "List of transports this journey at this particular event is replaced by [Ersatzzug].",
            "items": { "$ref": "#/components/schemas/TransportPublicDestinationOriginJourney" }
          },
          "travelsWith": {
            "type": "array",
            "description": "List of journeys this journey at this particular event travels with [Vereinigt Mit].",
            "items": { "$ref": "#/components/schemas/TransportPublicDestinationOriginJourney" }
          }
        },
        "description": "Journey event [Fahrtereignis]."
      },
      "EventType": {
        "type": "string",
        "description": "Type of event. Can be arrival or departure.\n- ARRIVAL (Ankunft)\n- DEPARTURE (Abfahrt)",
        "enum": [ "ARRIVAL", "DEPARTURE" ]
      },
      "JourneyEventBased": {
        "required": [ "destinationSchedule", "events", "journeyCanceled", "journeyID", "originSchedule", "type" ],
        "type": "object",
        "properties": {
          "journeyID": {
            "type": "string",
            "description": "ID of journey [FahrtID]."
          },
          "originSchedule": { "$ref": "#/components/schemas/StationShort" },
          "destinationSchedule": { "$ref": "#/components/schemas/StationShort" },
          "type": { "$ref": "#/components/schemas/JourneyType" },
          "journeyCanceled": {
            "type": "boolean",
            "description": "Flag that indicates whether whole journey has been canceled."
          },
          "continuationFor": { "$ref": "#/components/schemas/TransportPublicReferenceOrigin" },
          "continuationBy": { "$ref": "#/components/schemas/TransportPublicReferenceDestination" },
          "events": {
            "type": "array",
            "description": "List of events [Fahrtereignisse]. Order is based on 1 - scheduled time and 2 - arrival before departure.",
            "items": { "$ref": "#/components/schemas/ArrivalDepartureEvent" }
          }
        },
        "description": "Event based [Fahrtereignisbasiert] information for a particular journey [Fahrtverlauf]."
      },
      "JourneyType": {
        "type": "string",
        "description": "Defines whether journey [Fahrt] is regular or some kind of special.\n- REGULAR (Regular scheduled journey)\n- REPLACEMENT (Journey that replaces another journey)\n- RELIEF (Journey that reliefs another journey)\n- EXTRA (Journey that is somehow extra",
        "enum": [ "REGULAR", "REPLACEMENT", "RELIEF", "EXTRA" ]
      },
      "TransportPublicDestinationOriginJourney": {
        "required": [ "category", "destination", "journeyID", "number", "origin", "type" ],
        "type": "object",
        "properties": {
          "type": { "$ref": "#/components/schemas/TransportType" },
          "category": {
            "type": "string",
            "description": "Code of the transport [Fahrtgattung]."
          },
          "number": {
            "type": "integer",
            "description": "Number of the transport [Fahrtnummer].",
            "format": "int32"
          },
          "line": {
            "type": "string",
            "description": "Line of the transport [Linie]."
          },
          "label": {
            "type": "string",
            "description": "Marketing - or product name of the transport, for instance 'Sprinter' or 'Schwarzwaldexpress' etc. [Marketing Name / Produkt Name]."
          },
          "destination": { "$ref": "#/components/schemas/StationShort" },
          "journeyID": {
            "type": "string",
            "description": "ID of the journey [FahrtID]."
          },
          "origin": { "$ref": "#/components/schemas/StopAtStation" }
        },
        "description": "Public transport reference [Oeffentlicher Verkehr Referenz] with origin [Herkunft] and destination [Ziel] information and journey id [FahrtID]."
      },
      "Indoor2OutdoorRouting": {
        "type": "object",
        "properties": {
          "indoor": { "$ref": "#/components/schemas/IndoorRouting" },
          "exitName": {
            "type": "string",
            "description": "Name of exit to take."
          },
          "outdoor": { "$ref": "#/components/schemas/MultimodalRouting" }
        },
        "description": "Indoor 2 outdoor routing."
      },
      "IndoorRouting": {
        "type": "object",
        "properties": {
          "indoor": {
            "type": "array",
            "description": "List of indoor segments.",
            "items": { "$ref": "#/components/schemas/IndoorSegment" }
          }
        },
        "description": "Indoor routing with segments, levels and length."
      },
      "IndoorSegment": {
        "type": "object",
        "properties": {
          "type": {
            "type": "string",
            "description": "Type of segment within indoor routing.",
            "enum": [ "WALK", "STAIRS", "ESCALATOR", "ELEVATOR", "RAMP" ]
          },
          "level": { "$ref": "#/components/schemas/IndoorLevel" },
          "length": {
            "type": "number",
            "description": "Length to walk in meters.",
            "format": "double"
          },
          "polyline": {
            "type": "array",
            "description": "Polyline for segment.",
            "items": { "$ref": "#/components/schemas/Coordinate2D" }
          }
        },
        "description": "Represents an indoor routing segment."
      },
      "Leg": {
        "required": [ "type" ],
        "type": "object",
        "properties": {
          "type": { "$ref": "#/components/schemas/LegType" },
          "transportType": { "$ref": "#/components/schemas/TransportType" },
          "polyline": {
            "type": "array",
            "description": "Polyline of leg for map drawing.",
            "items": { "$ref": "#/components/schemas/Coordinate2D" }
          }
        },
        "description": "Base leg information.",
        "discriminator": {
          "propertyName": "type",
          "mapping": {
            "BUS": "#/components/schemas/LegBus",
            "CONNECT": "#/components/schemas/LegConnect",
            "TRAIN": "#/components/schemas/LegTrain",
            "WALK": "#/components/schemas/LegWalk"
          }
        },
        "oneOf": [
          { "$ref": "#/components/schemas/LegBus" },
          { "$ref": "#/components/schemas/LegConnect" },
          { "$ref": "#/components/schemas/LegTrain" },
          { "$ref": "#/components/schemas/LegWalk" }
        ]
      },
      "LegBus": {
        "required": [ "type" ],
        "type": "object",
        "properties": {
          "type": { "$ref": "#/components/schemas/LegType" },
          "transportType": { "$ref": "#/components/schemas/TransportType" },
          "polyline": {
            "type": "array",
            "description": "Polyline of leg for map drawing.",
            "items": { "$ref": "#/components/schemas/Coordinate2D" }
          },
          "duration": {
            "type": "string",
            "description": "Duration of trip in ISO8601 (for instance 'P3Y6M4DT12H30M17S').",
            "format": "duration"
          },
          "distance": {
            "type": "integer",
            "description": "Distance for leg. May be empty.",
            "format": "int32"
          },
          "origin": { "$ref": "#/components/schemas/TripStopBus" },
          "destination": { "$ref": "#/components/schemas/TripStopBus" },
          "journeyID": {
            "type": "string",
            "description": "Id of journey the bus belongs to."
          },
          "typeCode": {
            "type": "string",
            "description": "Type code of bus."
          },
          "number": {
            "type": "integer",
            "description": "Number of bus.",
            "format": "int32"
          },
          "line": {
            "type": "string",
            "description": "Line of bus, if applicable."
          }
        },
        "description": "Leg for transport type bus."
      },
      "LegConnect": {
        "required": [ "type" ],
        "type": "object",
        "properties": {
          "type": { "$ref": "#/components/schemas/LegType" },
          "transportType": { "$ref": "#/components/schemas/TransportType" },
          "polyline": {
            "type": "array",
            "description": "Polyline of leg for map drawing.",
            "items": { "$ref": "#/components/schemas/Coordinate2D" }
          },
          "origin": { "$ref": "#/components/schemas/TripStop" },
          "destination": { "$ref": "#/components/schemas/TripStop" },
          "connectingTimes": {
            "type": "array",
            "description": "List of person dependent connecting times for connect segment.",
            "items": { "$ref": "#/components/schemas/ConnectionTime" }
          }
        },
        "description": "Connect leg for connects within a station / stations group."
      },
      "LegTrain": {
        "required": [ "type" ],
        "type": "object",
        "properties": {
          "type": { "$ref": "#/components/schemas/LegType" },
          "transportType": { "$ref": "#/components/schemas/TransportType" },
          "polyline": {
            "type": "array",
            "description": "Polyline of leg for map drawing.",
            "items": { "$ref": "#/components/schemas/Coordinate2D" }
          },
          "duration": {
            "type": "string",
            "description": "Duration of trip in ISO8601 (for instance 'P3Y6M4DT12H30M17S').",
            "format": "duration"
          },
          "distance": {
            "type": "integer",
            "description": "Distance for leg. May be empty.",
            "format": "int32"
          },
          "origin": { "$ref": "#/components/schemas/TripStopTrain" },
          "destination": { "$ref": "#/components/schemas/TripStopTrain" },
          "journeyID": {
            "type": "string",
            "description": "Id of journey the train belongs to."
          },
          "typeCode": {
            "type": "string",
            "description": "Type code of train."
          },
          "number": {
            "type": "integer",
            "description": "Number of train.",
            "format": "int32"
          },
          "line": {
            "type": "string",
            "description": "Line of train, if applicable."
          },
          "trainOrigin": {
            "type": "string",
            "description": "Name of station the train departed at."
          },
          "trainDestination": {
            "type": "string",
            "description": "Name of station the train will arrive at."
          }
        },
        "description": "Leg for trains."
      },
      "LegType": {
        "type": "string",
        "description": "Type of leg.",
        "enum": [ "BUS", "CONNECT", "TRAIN", "WALK" ]
      },
      "LegWalk": {
        "required": [ "type" ],
        "type": "object",
        "properties": {
          "type": { "$ref": "#/components/schemas/LegType" },
          "transportType": { "$ref": "#/components/schemas/TransportType" },
          "polyline": {
            "type": "array",
            "description": "Polyline of leg for map drawing.",
            "items": { "$ref": "#/components/schemas/Coordinate2D" }
          },
          "duration": {
            "type": "string",
            "description": "Duration of trip in ISO8601 (for instance 'P3Y6M4DT12H30M17S').",
            "format": "duration"
          },
          "distance": {
            "type": "integer",
            "description": "Distance for leg. May be empty.",
            "format": "int32"
          },
          "origin": { "$ref": "#/components/schemas/TripStop" },
          "destination": { "$ref": "#/components/schemas/TripStop" }
        },
        "description": "Leg for walks."
      },
      "MultimodalRouting": {
        "type": "object",
        "properties": {
          "trips": {
            "type": "array",
            "description": "List of trips from routing provider.",
            "items": { "$ref": "#/components/schemas/Trip" }
          }
        },
        "description": "Multimodal routings."
      },
      "Trip": {
        "type": "object",
        "properties": {
          "tripID": {
            "type": "string",
            "description": "Unique id of trip."
          },
          "duration": {
            "type": "string",
            "description": "Duration of trip in ISO8601 (for instance 'P3Y6M4DT12H30M17S').",
            "format": "duration"
          },
          "legs": {
            "type": "array",
            "description": "List of trip legs.",
            "items": { "$ref": "#/components/schemas/Leg" }
          }
        },
        "description": "Represents a trip."
      },
      "TripStop": {
        "type": "object",
        "properties": {
          "geo": { "$ref": "#/components/schemas/Coordinate2D" },
          "timeTarget": {
            "type": "string",
            "description": "Target (planing) time of stop as fully qualified date (for instance '2019-08-19T12:56:14+02:00' or '2019-08-19T10:56:14Z').",
            "format": "date-time"
          },
          "timeActual": {
            "type": "string",
            "description": "Actual (forecast) time of stop as fully qualified date (for instance '2019-08-19T12:56:14+02:00' or '2019-08-19T10:56:14Z'). May be empty in case we don't have actual information.",
            "format": "date-time"
          }
        },
        "description": "Stop within trip."
      },
      "TripStopBus": {
        "type": "object",
        "properties": {
          "geo": { "$ref": "#/components/schemas/Coordinate2D" },
          "timeTarget": {
            "type": "string",
            "description": "Target (planing) time of stop as fully qualified date (for instance '2019-08-19T12:56:14+02:00' or '2019-08-19T10:56:14Z').",
            "format": "date-time"
          },
          "timeActual": {
            "type": "string",
            "description": "Actual (forecast) time of stop as fully qualified date (for instance '2019-08-19T12:56:14+02:00' or '2019-08-19T10:56:14Z'). May be empty in case we don't have actual information.",
            "format": "date-time"
          },
          "stationID": {
            "type": "string",
            "description": "Id of station."
          },
          "name": {
            "type": "string",
            "description": "Name of stop."
          },
          "stopID": {
            "type": "string",
            "description": "Id of stop."
          },
          "busID": {
            "type": "string",
            "description": "Id of bus."
          }
        },
        "description": "Stop for buses within trip."
      },
      "TripStopTrain": {
        "type": "object",
        "properties": {
          "geo": { "$ref": "#/components/schemas/Coordinate2D" },
          "timeTarget": {
            "type": "string",
            "description": "Target (planing) time of stop as fully qualified date (for instance '2019-08-19T12:56:14+02:00' or '2019-08-19T10:56:14Z').",
            "format": "date-time"
          },
          "timeActual": {
            "type": "string",
            "description": "Actual (forecast) time of stop as fully qualified date (for instance '2019-08-19T12:56:14+02:00' or '2019-08-19T10:56:14Z'). May be empty in case we don't have actual information.",
            "format": "date-time"
          },
          "stationID": {
            "type": "string",
            "description": "Id of station."
          },
          "name": {
            "type": "string",
            "description": "Name of stop."
          },
          "stopID": {
            "type": "string",
            "description": "Id of stop."
          },
          "trainID": {
            "type": "string",
            "description": "Id of train."
          },
          "track": {
            "type": "string",
            "description": "Track the train stops at."
          }
        },
        "description": "Stop for trains within trip."
      },
      "ConnectionArrival": {
        "required": [ "arrivalCanceled", "arrivalID", "arrivalPlatform", "arrivalPlatformSchedule", "arrivalTime", "arrivalTimeType", "journeyID" ],
        "type": "object",
        "properties": {
          "journeyID": {
            "type": "string",
            "description": "ID of journey [FahrtID]."
          },
          "arrivalID": {
            "type": "string",
            "description": "Unique id for arrival [AnkunftsID]."
          },
          "arrivalCanceled": {
            "type": "boolean",
            "description": "Indicates whether arrival has been canceled [Haltausfall]."
          },
          "arrivalTimeSchedule": {
            "type": "string",
            "description": "Scheduled arrival time [Ankunftszeit Soll] of stop as fully qualified date (for instance '2019-08-19T12:56:14+02:00' or '2019-08-19T10:56:14Z').",
            "format": "date-time"
          },
          "arrivalTimeType": { "$ref": "#/components/schemas/TimeType" },
          "arrivalTime": {
            "type": "string",
            "description": "Best known arrival time information of stop as fully qualified date (for instance '2019-08-19T12:56:14+02:00' or '2019-08-19T10:56:14Z').",
            "format": "date-time"
          },
          "arrivalPlatformSchedule": {
            "type": "string",
            "description": "Scheduled arrival platform [Gleis, Bahnsteig, Plattform - Plan]."
          },
          "arrivalPlatform": {
            "type": "string",
            "description": "Estimated arrival platform [Gleis, Bahnsteig, Plattform - Vorschau]."
          },
          "connections": {
            "type": "array",
            "description": "List of available connections [Anschluesse] with connection status [Anschlussbewertung].",
            "items": { "$ref": "#/components/schemas/StopDepartureConnect" }
          }
        },
        "description": "Connection [Anschluss] information for transport arriving at particular stop [Haltestelle]."
      },
      "ConnectionEvaluation": {
        "required": [ "persona", "status" ],
        "type": "object",
        "properties": {
          "persona": { "$ref": "#/components/schemas/PersonaType" },
          "distance": {
            "type": "number",
            "description": "Distance in meters."
          },
          "duration": {
            "type": "string",
            "description": "Duration of connect in ISO8601 (for instance 'P3Y6M4DT12H30M17S').",
            "format": "duration"
          },
          "status": { "$ref": "#/components/schemas/ConnectionStatus" }
        },
        "description": "Connection evaluation [Anschlussbewertung] for different personae."
      },
      "ConnectionSource": {
        "type": "string",
        "description": "Source of connection information.\n- CALCULATED_SCHEDULE (Connection is based on scheduled information)\n- CALCULATED_PREVIEW (Connection is based on preview / real information)\n- DISPOSITION (Connection is based on disposition decission)",
        "enum": [ "CALCULATED_SCHEDULE", "CALCULATED_PREVIEW", "DISPOSITION" ]
      },
      "ConnectionStatus": {
        "type": "string",
        "description": "Connecting status for different personas.\n- SAFE (Connection is considered as safe, enough time left)\n- CRITICAL (Connection is considered as critical, only little time left)\n- IMPOSSIBLE (Connection is consiered as impossible, not enough time to reach)\n- UNKNOWN (Connection status is unknown)",
        "enum": [ "SAFE", "CRITICAL", "IMPOSSIBLE", "UNKNOWN" ]
      },
      "DispositionStatus": {
        "type": "string",
        "description": "Status for disposition of connection.\n- WAITING (Disposition decission is transport must wait)\n- NOT_WAITING (Disposition decission is transport must not wait)\n- NONE (No disposition decission)",
        "enum": [ "WAITING", "NOT_WAITING", "NONE" ]
      },
      "StopDepartureConnect": {
        "required": [ "additional", "administration", "canceled", "connectionDisposition", "connectionSource", "connectionStatusByPersona", "departureID", "journeyID", "platform", "station", "time", "timeType", "transport" ],
        "type": "object",
        "properties": {
          "station": { "$ref": "#/components/schemas/StationShort" },
          "journeyID": {
            "type": "string",
            "description": "ID of journey [FahrtID]."
          },
          "timeSchedule": {
            "type": "string",
            "description": "Scheduled time [Abfahrtszeit Soll] of stop as fully qualified date (for instance '2019-08-19T12:56:14+02:00' or '2019-08-19T10:56:14Z').",
            "format": "date-time"
          },
          "timeType": { "$ref": "#/components/schemas/TimeType" },
          "time": {
            "type": "string",
            "description": "Best known time information of stop as fully qualified date (for instance '2019-08-19T12:56:14+02:00' or '2019-08-19T10:56:14Z').",
            "format": "date-time"
          },
          "platformSchedule": {
            "type": "string",
            "description": "Scheduled platform [Gleis, Bahnsteig, Plattform] the transport departs at."
          },
          "platform": {
            "type": "string",
            "description": "Actual platform [Gleis, Bahnsteig, Plattform] the transport departs at."
          },
          "administration": { "$ref": "#/components/schemas/Administration" },
          "messages": {
            "type": "array",
            "description": "List of available messages to display for this departure.",
            "items": { "$ref": "#/components/schemas/Message" }
          },
          "departureID": {
            "type": "string",
            "description": "ID of departure [AbfahrtID]."
          },
          "transport": { "$ref": "#/components/schemas/TransportPublicDestinationVia" },
          "canceled": {
            "type": "boolean",
            "description": "Indicates whether the departure has been canceled [Haltausfall]."
          },
          "additional": {
            "type": "boolean",
            "description": "Indicates whether this departure is additional [Zusatzhalt], meaning not be part of the regular schedule."
          },
          "reliefFor": {
            "type": "array",
            "description": "List of transports this journey reliefs for [Entlastungszug].",
            "items": { "$ref": "#/components/schemas/TransportPublicReferenceDestination" }
          },
          "reliefBy": {
            "type": "array",
            "description": "List of transports this journey is reliefed by [Entlastungszug].",
            "items": { "$ref": "#/components/schemas/TransportPublicReferenceDestination" }
          },
          "replacementFor": {
            "type": "array",
            "description": "List of transports this journey replaces [Ersatzzug].",
            "items": { "$ref": "#/components/schemas/TransportPublicReferenceDestination" }
          },
          "replacedBy": {
            "type": "array",
            "description": "List of transports this journey is replaced by [Ersatzzug].",
            "items": { "$ref": "#/components/schemas/TransportPublicReferenceDestination" }
          },
          "continuationBy": { "$ref": "#/components/schemas/TransportPublicReferenceDestination" },
          "travelsWith": {
            "type": "array",
            "description": "List of journeys this journey travels with [Vereinigt Mit].",
            "items": { "$ref": "#/components/schemas/TransportPublicReferenceDestination" }
          },
          "connectionSource": { "$ref": "#/components/schemas/ConnectionSource" },
          "connectionDisposition": { "$ref": "#/components/schemas/DispositionStatus" },
          "connectionStatusByPersona": {
            "type": "array",
            "description": "Connection status for different personae.",
            "items": { "$ref": "#/components/schemas/ConnectionEvaluation" }
          }
        },
        "description": "Departure information within departure boards [Abfahrtstafeln] with connect info [Anschlussinformation]."
      },
      "ConnectionJourneys": {
        "required": [ "arrivalID", "connectionStatus", "departureIDConnecting", "journeyID", "journeyIDConnecting" ],
        "type": "object",
        "properties": {
          "journeyID": {
            "type": "string",
            "description": "ID of journey [FahrtID]."
          },
          "arrivalID": {
            "type": "string",
            "description": "Unique id for arrival [AnkunftID]."
          },
          "journeyIDConnecting": {
            "type": "string",
            "description": "ID of connecting journey [AnschlussFahrtID]."
          },
          "departureIDConnecting": {
            "type": "string",
            "description": "Unique id for departure of connecting journey [AbfahrtID]."
          },
          "connectionStatus": {
            "type": "array",
            "description": "Connection status [Anschlussbewertung] fo different personas.",
            "items": { "$ref": "#/components/schemas/ConnectionEvaluation" }
          }
        },
        "description": "Connection [Anschluss] information for two journeys."
      },
      "MobilitiesOnDemand": {
        "required": [ "mobilities" ],
        "type": "object",
        "properties": {
          "mobilities": {
            "type": "array",
            "description": "List of mobilities.",
            "items": { "$ref": "#/components/schemas/MobilityOnDemand" }
          }
        },
        "description": "On demand mobility information."
      },
      "MobilityOnDemand": {
        "required": [ "provider", "type" ],
        "type": "object",
        "properties": {
          "type": { "$ref": "#/components/schemas/TransportType" },
          "provider": {
            "type": "string",
            "description": "Name of provider."
          },
          "serviceArea": {
            "type": "array",
            "description": "Coordinates of the Service Area",
            "items": {
              "type": "array",
              "description": "Coordinates of the Service Area",
              "items": {
                "type": "array",
                "description": "Coordinates of the Service Area",
                "items": {
                  "type": "array",
                  "description": "Coordinates of the Service Area",
                  "items": {
                    "type": "number",
                    "description": "Coordinates of the Service Area",
                    "format": "double"
                  }
                }
              }
            }
          }
        },
        "description": "On demand mobility information like taxis, shuttles etc."
      },
      "MobilitiesIndividual": {
        "required": [ "mobilities" ],
        "type": "object",
        "properties": {
          "mobilities": {
            "type": "array",
            "description": "List of mobilities.",
            "items": { "$ref": "#/components/schemas/MobilityIndividual" }
          }
        },
        "description": "Individual mobilities information."
      },
      "MobilityIndividual": {
        "required": [ "count", "positions", "provider", "type" ],
        "type": "object",
        "properties": {
          "pickUpStation": { "$ref": "#/components/schemas/PickUpStation" },
          "type": { "$ref": "#/components/schemas/TransportType" },
          "provider": {
            "type": "string",
            "description": "Name of provider."
          },
          "count": {
            "type": "integer",
            "description": "Amount of individual mobilities for pickup station, type and provider.",
            "format": "int32"
          },
          "positions": {
            "type": "array",
            "description": "Geo positions of individual mobilities.",
            "items": { "$ref": "#/components/schemas/Coordinate2D" }
          }
        },
        "description": "Individual mobility information like call a bike, scooter, rental cars."
      },
      "TransportPosition": {
        "required": [ "position" ],
        "type": "object",
        "properties": {
          "position": { "$ref": "#/components/schemas/Coordinate2D" },
          "speed": {
            "type": "number",
            "description": "Current speed of transport in km/h.",
            "format": "double"
          }
        },
        "description": "Geoposition and speed of transport."
      },
      "TransportMatchWifi": {
        "required": [ "journeyID", "transport", "vehicle", "wifiaccesspointID" ],
        "type": "object",
        "properties": {
          "wifiaccesspointID": {
            "type": "string",
            "description": "ID of wifi access point [MAC Adresse]."
          },
          "journeyID": {
            "type": "string",
            "description": "ID of journey [FahrtID]."
          },
          "transport": { "$ref": "#/components/schemas/TransportPublic" },
          "vehicle": { "$ref": "#/components/schemas/Vehicle" },
          "wagonIdentificationNumber": {
            "type": "integer",
            "description": "Wagon identification number [Wagenordnugnsnummer] of vehicle in transport.",
            "format": "int32"
          }
        },
        "description": "Public transport [Oeffentlicher Verkehr] and vehicle [Fahrzeug] matching result where a wifi accesspoint is located in."
      },
      "TransportMatchWifis": {
        "required": [ "transports", "wifiaccesspointID" ],
        "type": "object",
        "properties": {
          "wifiaccesspointID": {
            "type": "string",
            "description": "ID of wifi access point [MAC Adresse]."
          },
          "transports": {
            "type": "array",
            "description": "List of matchted transports.",
            "items": { "$ref": "#/components/schemas/TransportMatchWifi" }
          }
        },
        "description": "Public transports [Oeffentlicher Verkehr] and vehicles [Fahrzeug] matching results where a wifi accesspoint is located in."
      },
      "Vehicle": {
        "required": [ "type", "vehicleID" ],
        "type": "object",
        "properties": {
          "vehicleID": {
            "type": "string",
            "description": "ID of the vehicle (for rail vehicles usually the UIC identification nunmber)."
          },
          "type": { "$ref": "#/components/schemas/VehicleType" }
        },
        "description": "General vehicle [Fahrzeug] information. If the vehicleID is empty, only the type information is available."
      },
      "VehicleCategory": {
        "type": "string",
        "description": "Category of vehicle [Fahrzeug] according to basic visual differentiation.\n- DOUBLEDECK_FIRST_ECONOMY_CLASS (Doppelstockwagen 1.& 2. Klasse)\n- DOUBLEDECK_FIRST_CLASS (Doppelstockwagen 1. Klasse)\n- DOUBLEDECK_ECONOMY_CLASS (Doppelstockwagen 2. Klasse)\n- DOUBLEDECK_CONTROLCAR_FIRST_ECONOMOY_CLASS (Doppelstocksteuerwagen 1. & 2. Klasse)\n- DOUBLEDECK_CONTROLCAR_FIRST_CLASS (Doppelstocksteuerwagen 1. Klasse)\n- DOUBLEDECK_CONTROLCAR_ECONOMY_CLASS (Doppelstocksteuerwagen 2. Klasse)\n- DOUBLEDECK_CARCARRIER_PASSENGERTRAIN (Doppelstock-Autotransportwagen der Reisezugwagen-Bauart)\n- PASSENGERCARRIAGE_FIRST_ECONOMY_CLASS (Reisezugwagen 1.& 2. Klasse)\n- PASSENGERCARRIAGE_FIRST_CLASS (Reisezugwagen 1.Klasse)\n- PASSENGERCARRIAGE_ECONOMY_CLASS (Reisezugwagen 2.Klasse)\n- CONTROLCAR_FIRST_CLASS (Steuerwagen & 1.Klasse)\n- CONTROLCAR_ECONOMY_CLASS (Steuerwagen & 2.Klasse)\n- CONTROLCAR_FIRST_ECONOMY_CLASS (Steuerwagen 1.& 2.Klasse)\n- DININGCAR (Speisewagen)\n- HALFDININGCAR_FIRST_CLASS (Halbspeisewagen & 1. Klasse)\n- HALFDININGCAR_ECONOMY_CLASS (Halbspeisewagen & 2. Klasse)\n- SLEEPER_FIRST_CLASS (Schlafwagen 1. Klasse)\n- SLEEPER_FIRST_ECONOMY_CLASS (Schlafwagen 1. & 2. Klasse)\n- SLEEPER_ECONOMY_CLASS (Schlafwagen 2. Klasse)\n- COUCHETTE_FIRST_CLASS (Liegewagen 1. Klasse)\n- COUCHETTE_ECONOMY_CLASS (Liegewagen 2. Klasse)\n- BAGGAGECAR (Gepaeckwagen)\n- LOCOMOTIVE (Lok)\n- POWERCAR (Triebkopf)\n- UNDEFINED (unbekannt)",
        "enum": [ "DOUBLEDECK_FIRST_ECONOMY_CLASS", "DOUBLEDECK_FIRST_CLASS", "DOUBLEDECK_ECONOMY_CLASS", "DOUBLEDECK_CONTROLCAR_FIRST_ECONOMOY_CLASS", "DOUBLEDECK_CONTROLCAR_FIRST_CLASS", "DOUBLEDECK_CONTROLCAR_ECONOMY_CLASS", "DOUBLEDECK_CARCARRIER_PASSENGERTRAIN", "PASSENGERCARRIAGE_FIRST_ECONOMY_CLASS", "PASSENGERCARRIAGE_FIRST_CLASS", "PASSENGERCARRIAGE_ECONOMY_CLASS", "CONTROLCAR_FIRST_CLASS", "CONTROLCAR_ECONOMY_CLASS", "CONTROLCAR_FIRST_ECONOMY_CLASS", "DININGCAR", "HALFDININGCAR_FIRST_CLASS", "HALFDININGCAR_ECONOMY_CLASS", "SLEEPER_FIRST_CLASS", "SLEEPER_FIRST_ECONOMY_CLASS", "SLEEPER_ECONOMY_CLASS", "COUCHETTE_FIRST_CLASS", "COUCHETTE_ECONOMY_CLASS", "BAGGAGECAR", "HALFBAGGAGECAR", "LOCOMOTIVE", "POWERCAR", "UNDEFINED" ]
      },
      "VehicleType": {
        "required": [ "category", "constructionType", "hasEconomyClass", "hasFirstClass" ],
        "type": "object",
        "properties": {
          "category": { "$ref": "#/components/schemas/VehicleCategory" },
          "constructionType": {
            "type": "string",
            "description": "Class respectively (Construction) type of the vehicle [Bauart bzw. Baureihe]."
          },
          "hasFirstClass": {
            "type": "boolean",
            "description": "Indicates if the vehicle has first class seats."
          },
          "hasEconomyClass": {
            "type": "boolean",
            "description": "Indicates if the vehicle has economy class seats."
          },
          "layoutID": {
            "type": "string",
            "description": "ID of the layout of the vehicle type."
          }
        },
        "description": "Detailed information on the vehicle [Fahrzeug] type."
      },
      "TransportMatchVehicleID": {
        "required": [ "journeyID", "transport", "vehicle" ],
        "type": "object",
        "properties": {
          "journeyID": {
            "type": "string",
            "description": "ID of journey [FahrtID]."
          },
          "transport": { "$ref": "#/components/schemas/TransportPublic" },
          "vehicle": { "$ref": "#/components/schemas/Vehicle" },
          "wagonIdentificationNumber": {
            "type": "integer",
            "description": "Wagon identification number [Wagenordnugnsnummer] of vehicle in transport.",
            "format": "int32"
          }
        },
        "description": "Public transport [Oeffentlicher Verkehr] and vehicle [Fahrzeug] matching result for a particular vehicle id."
      },
      "TransportMatchVehicleIDs": {
        "required": [ "transports", "vehicleID" ],
        "type": "object",
        "properties": {
          "vehicleID": {
            "type": "string",
            "description": "Unique id for vehicle (for rail vehicles usually the UIC identification nunmber)."
          },
          "transports": {
            "type": "array",
            "description": "List of matchted transports.",
            "items": { "$ref": "#/components/schemas/TransportMatchVehicleID" }
          }
        },
        "description": "Public transports [Oeffentlicher Verkehr] and vehicles [Fahrzeug] matching results for a particular vehicle id."
      },
      "CoordinateOutdoor": {
        "required": [ "altitude", "latitude", "longitude" ],
        "type": "object",
        "properties": {
          "longitude": {
            "type": "number",
            "description": "Longitude position in reference system.",
            "format": "double"
          },
          "latitude": {
            "type": "number",
            "description": "Latitude position in reference system.",
            "format": "double"
          },
          "altitude": {
            "type": "number",
            "description": "Altitude position in reference system.",
            "format": "double"
          }
        },
        "description": "Outdoor coordinate within geo reference system."
      },
      "TransportMatchGeoPosition": {
        "required": [ "position", "transport" ],
        "type": "object",
        "properties": {
          "position": { "$ref": "#/components/schemas/CoordinateOutdoor" },
          "informationAge": {
            "type": "string",
            "description": "Duration of trip in ISO8601 (for instance 'P3Y6M4DT12H30M17S').",
            "format": "duration"
          },
          "transport": { "$ref": "#/components/schemas/TransportPublic" }
        },
        "description": "Public transport [Oeffentlicher Verkehr] matching result for a particular geo position."
      },
      "TransportMatchGeoPositions": {
        "required": [ "position", "transports" ],
        "type": "object",
        "properties": {
          "position": { "$ref": "#/components/schemas/CoordinateOutdoor" },
          "transports": {
            "type": "array",
            "description": "List of matchted transports.",
            "items": { "$ref": "#/components/schemas/TransportMatchGeoPosition" }
          }
        },
        "description": "Public transports [Oeffentlicher Verkehr] matching results for a particular geo position."
      },
      "VehicleSequenceAvailableAdministrations": {
        "required": [ "administrations" ],
        "type": "object",
        "properties": {
          "administrations": {
            "type": "array",
            "description": "List of administrations.",
            "items": { "$ref": "#/components/schemas/Administration" }
          }
        },
        "description": "Administrations [Verwaltung] that provide vehicle sequences [Wagenreihung]."
      },
      "OccupancyDetail": {
        "type": "string",
        "description": "Detail level for vehicle occupancy [Auslastung] information.\n- NONE (return no occupancy)\n- OVERALL (return only overall occupancy on a first / economy class level)\n- DETAIL (return detailed occupancy information like free bike mounts , free seats, stance etc.)",
        "enum": [ "NONE", "OVERALL", "DETAIL" ]
      },
      "AmenityStatus": {
        "type": "string",
        "description": "Status an amenity [Ausstattungsmerkmal] can have.\n- AVAILABLE (Amenity is considered as available [VerfÃ¼gbar])\n- NOT_AVAILABLE (Amenity is considered as not available [Nicht VerfÃ¼gbar])\n- RESERVED (Amenity is considered as reserved [Reserviert])\n- UNDEFINED (Status is undefined [Undefiniert])",
        "enum": [ "AVAILABLE", "NOT_AVAILABLE", "RESERVED", "UNDEFINED" ]
      },
      "AmenityType": {
        "type": "string",
        "description": "Type of amenity [Ausstattungsmerkmal] mostly according to VDV 454.\n- BISTRO (Bordbistro)\n- AIR_CONDITION (Klimaanlage)\n- BIKE_SPACE (Fahrradstellplaetze)\n- WHEELCHAIR_SPACE (Rollstuhlstellplaetze)\n- TOILET_WHEELCHAIR (Rollstuhlgaengige Toilette)\n- ZONE_MULTI_PURPOSE (Mehrzweckbereich)\n- BOARDING_AID (Einstiegshilfe)\n- CABIN_INFANT (Kleinkindabteil)\n- ZONE_QUIET (Ruhebereich)\n- ZONE_FAMILY (Familienbereich)\n- INFO (Info-Abteil)\n- SEATS_SEVERELY_DISABLED (Plaetze fuer Schwerbehinderte)\n- SEATS_BAHN_COMFORT (Plaetze fÃ¼r BahnComfort-Kunden)\n- SEATS_LUFTHANSA_EXPRESS_RAIL (Plaetze fuer LH-Codeshare) ???\n- WIFI (WLAN-Hotspot)",
        "enum": [ "BISTRO", "AIR_CONDITION", "BIKE_SPACE", "WHEELCHAIR_SPACE", "TOILET_WHEELCHAIR", "ZONE_MULTI_PURPOSE", "BOARDING_AID", "CABIN_INFANT", "ZONE_QUIET", "ZONE_FAMILY", "INFO", "SEATS_SEVERELY_DISABLED", "SEATS_BAHN_COMFORT", "SEATS_LUFTHANSA_EXPRESS_RAIL", "WIFI" ]
      },
      "VehicleAmenity": {
        "required": [ "status", "type" ],
        "type": "object",
        "properties": {
          "type": { "$ref": "#/components/schemas/AmenityType" },
          "status": { "$ref": "#/components/schemas/AmenityStatus" }
        },
        "description": "Vehicle amenity [Ausstattungsmerkmal]."
      },
      "VehicleGroupInSequence": {
        "required": [ "name", "transport", "vehicles" ],
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "description": "Name of the vehicle group within the sequence."
          },
          "transport": { "$ref": "#/components/schemas/TransportPublicReferenceDestination" },
          "vehicles": {
            "type": "array",
            "description": "Vehicles within the group ordered in direction of travel, including informations only valid within the sequence.",
            "items": { "$ref": "#/components/schemas/VehicleInGroup" }
          }
        },
        "description": "Vehicle group [Fahrzeuggruppe] within the vehicle sequence [Wagenreihung] containing at least one vehicle [Fahrzeug]."
      },
      "VehicleInGroup": {
        "required": [ "amenities", "orientation", "status", "type", "vehicleID" ],
        "type": "object",
        "properties": {
          "vehicleID": {
            "type": "string",
            "description": "ID of the vehicle (for rail vehicles usually the UIC identification nunmber)."
          },
          "type": { "$ref": "#/components/schemas/VehicleType" },
          "wagonIdentificationNumber": {
            "type": "integer",
            "description": "Wagon identification number [Ordnungsnummer] of the vehicle. May be empty, if no unique identification of a wagon is needed.",
            "format": "int32"
          },
          "status": { "$ref": "#/components/schemas/VehicleStatus" },
          "orientation": { "$ref": "#/components/schemas/VehicleOrientation" },
          "platformPosition": { "$ref": "#/components/schemas/VehiclePlatformPosition" },
          "amenities": {
            "type": "array",
            "description": "Amount and status of vehicle amenities [Ausstattungsmerkmale].",
            "items": { "$ref": "#/components/schemas/VehicleAmenity" }
          }
        },
        "description": "Vehicle information for a vehicle [Fahrzeug] within a vehicle group [Fahrzeuggruppe] within a vehicle sequence."
      },
      "VehicleOrientation": {
        "type": "string",
        "description": "Orientation of vehicle [Fahrzeug].\n - FORWARDS (Relative orientation forwards [Vorwaerts])\n - BACKWARDS (Relative orientation backwards [Rueckwaerts])\n - UNDEFINED (Undefined orientation)",
        "enum": [ "FORWARDS", "BACKWARDS", "UNDEFINED" ]
      },
      "VehiclePlatformPosition": {
        "required": [ "end", "start" ],
        "type": "object",
        "properties": {
          "start": {
            "type": "number",
            "description": "Start position [Beginn Meter] at the platform given in meters in local coordinates.",
            "format": "double"
          },
          "end": {
            "type": "number",
            "description": "End position [Ende Meter] at the platform given in meters in local coordinates.",
            "format": "double"
          },
          "sector": {
            "type": "string",
            "description": "Sector [Sektor] the major part of the vehicle is located in. May be empty in case the platform has no sectors."
          }
        },
        "description": "Position of a vehicle [Fahrzeug] at a platform [Gleis, Bahnsteig, Plattform]."
      },
      "VehicleSequenceDeparture": {
        "required": [ "departureID", "groups", "journeyID", "sequenceStatus" ],
        "type": "object",
        "properties": {
          "journeyID": {
            "type": "string",
            "description": "ID of the requested journey [FahrtID]."
          },
          "departureID": {
            "type": "string",
            "description": "ID of the requested departure [AbfahrtID]."
          },
          "departurePlatformSchedule": {
            "type": "string",
            "description": "Name of the scheduled departure platform [Plattform Soll]."
          },
          "departurePlatform": {
            "type": "string",
            "description": "Name of the estimated departure platform [Plattform Vorschau]. Note that there might be no information on the estimated departure platform (due to various reasons); in this case the attribute platform will also be empty."
          },
          "platform": { "$ref": "#/components/schemas/Platform" },
          "sequenceStatus": { "$ref": "#/components/schemas/VehicleSequenceStatus" },
          "groups": {
            "type": "array",
            "description": "Vehicle groups [Fahrzeuggruppen] of the transport ordered in direction of travel.",
            "items": { "$ref": "#/components/schemas/VehicleGroupInSequence" }
          }
        },
        "description": "Vehicle sequence [Wagenreihung] for transports at a particular departure."
      },
      "VehicleSequenceStatus": {
        "type": "string",
        "description": "Reflects vehicle sequence [Wagenreihung] status with respect to order of first and economy class. \n- MATCHES_SCHEDULE (The current sequence matches the scheduled order.)\n- DIFFERS_FROM_SCHEDULE (The current sequence differs from the scheduled order.)\n- NO_SCHEDULE (There is no scheduled sequence.)",
        "enum": [ "MATCHES_SCHEDULE", "DIFFERS_FROM_SCHEDULE", "NO_SCHEDULE" ]
      },
      "VehicleStatus": {
        "type": "string",
        "description": "Status of vehicle [Fahrzeug] with respect to accessibility for passengers.\n- OPEN  (Vehicle is open [Offen]\n- CLOSED (Vehicle is closed [Geschlossen]",
        "enum": [ "OPEN", "CLOSED" ]
      },
      "AddressGeo": {
        "type": "object",
        "properties": {
          "street": {
            "type": "string",
            "description": "Street name of address the position should be retrived for."
          },
          "houseNumber": {
            "type": "string",
            "description": "Housenumber of address the position should be retrived for."
          },
          "postalCode": {
            "type": "string",
            "description": "Postalcode [Postleitzahl] of address the position should be retrived for."
          },
          "city": {
            "type": "string",
            "description": "City of address the position should be retrived for."
          },
          "country": {
            "type": "string",
            "description": "Country of address the position should be retrived for."
          },
          "position": { "$ref": "#/components/schemas/Coordinate2D" }
        },
        "description": "Address with geo information."
      },
      "Locations": {
        "type": "object",
        "properties": {
          "locationList": {
            "type": "array",
            "description": "List of matching locations.",
            "items": { "$ref": "#/components/schemas/AddressGeo" }
          },
          "stopPlaces": {
            "type": "array",
            "description": "List of matching stop places.",
            "items": { "$ref": "#/components/schemas/StopPlaceSearchResult" }
          }
        },
        "description": "List of locations."
      }
    },
    "securitySchemes": {
      "basicAuth": {
        "type": "http",
        "name": "basicAuth",
        "scheme": "basic"
      }
    }
  }
}